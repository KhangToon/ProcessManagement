@page "/spmanagementv2"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Pages.Manager_SanPhamV2.Dialogs
@using ProcessManagement.Services.QRCodes
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen

@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .custom-datepicker input[type="text"]::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .rz-grid-table-fixed-2 {
        table-layout: auto;
        border-radius: 10px;
        padding: 10px;
    }
</style>

<RadzenRow Gap="0" Style="height: 100%; width: 100%; overflow-y: auto; background-color: white; border-radius: 10px;">
    <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding-right: 0">
        <RadzenTabs Style="width: 100%; height: 100%; padding-right: 0">
            <Tabs>
                <RadzenTabsItem Selected="true" Text="Quản lý sản phẩm">
                    <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding-top: 15px">
                        <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                            <!--Thanh tim kiem-->
                            <RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenStack Style="height: 100%; width: 20%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="QUẢN LÝ SẢN PHẨM" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: 60%;">
                                    <RadzenTextBox @oninput="@((args) => FilterSP(args?.Value))" Placeholder="Tìm theo tên, mã sản phẩm" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 50% "></RadzenTextBox>
                                    <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                                    <RadzenButton Click="@(async() => { await LoadAllDanhsachSanPhamBase(); ReSelectCurrentSanPham(Common.SelectedSanPhamid); })" IsBusy="@isLoadingDSSanPham" BusyText=" Loading..." Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
                                </RadzenStack>
                            </RadzenStack>
                            <!--Filter-->
                            <RadzenStack Gap="0px" Orientation="Orientation.Horizontal" Style="height: 50px; width: 100%; padding-top: 5px; padding-bottom: 0px; border-top: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">

                            </RadzenStack>

                            <!--Danh sach san pham-->
                            <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
                                <!--Column bang danh sach san pham-->
                                <RadzenColumn Size="12" SizeMD="7" Style="height: contain; width: 100%; padding-top: 5px;">
                                    <!--Header information-->
                                    <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding-bottom: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Visible="@(DSachSanPhams.Count > 0)" Gap="10px" Style="height: contain; width: contain; padding: 10px; padding-left: 0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenText Text="Danh sách sản phẩm" Style="font-weight: 600; height: contain; width: contain; font-style: italic; color: darkred"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                <RadzenText Text="@($"Tổng số lượng: ")" Style="color: black;  height: contain; width: contain; font-size: 15px"></RadzenText>
                                                <RadzenText Text="@($"{DSachSanPhams?.Count?? 0}")" Style="color: black; font-weight: 600; font-size: 15px; height: contain; width: contain"></RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                        <!--Button add new product-->
                                        <RadzenStack Style="height: 100%; width: contain; padding-left: 10px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenButton Click="OnThemMoiSanPham" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm sản phẩm mới"))" Icon="add" Text="Thêm sản phẩm mới" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                                          Style="height: contain; width: contain; font-size: 14px;" />
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenStack Visible="@(DSachSanPhams?.Count == 0)" Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Hãy chọn loại sản phẩm" Style="color: red; font-weight: 500; font-size: 16px"></RadzenText>
                                    </RadzenStack>


                                    <!--Datagrid danh sach sản phẩm-->
                                    <RadzenStack Visible="@(DSachSanPhams?.Count > 0)" Style="height: 450px; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                                        <RadzenDataGrid class="rz-grid-table-fixed-2" Data="@(DSachSanPhams)" TItem="SanPham" IsLoading="@isLoadingDSSanPham"
                                                        EmptyText="Danh sách sản phẩm trống." Style="overflow-x: scroll; width: 100%; height: 100%"
                                                        ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true"
                                                        AllowFiltering="false" FilterMode="FilterMode.Simple"
                                                        AllowPaging="true" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                                        GridLines="DataGridGridLines.Both" PageSize="10" Density="Density.Default"
                                                        HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77)"))"
                                                        CellRender="@OnCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">
                                            <Columns>
                                                @if (DSachSanPhams?.Count > 0)
                                                {
                                                    List<Propertyy> columns = DSachSanPhams.FirstOrDefault()?.GetPropertiesValues() ?? new();

                                                    <!--STT-->
                                                    <RadzenDataGridColumn Width="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                                          TItem="SanPham" Title="#"
                                                                          Property="STT" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                                        </HeaderTemplate>
                                                        <Template Context="sanpham">
                                                            <span style="font-weight: bold;">@(DSachSanPhams.IndexOf(sanpham) + 1)</span>
                                                        </Template>
                                                    </RadzenDataGridColumn>

                                                    foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                                    {
                                                        string colName = column.DBName ?? string.Empty;
                                                        string displayName = column.DisplayName ?? string.Empty;

                                                        if (colName == Common.SP_MaSP) // mã sản phẩm
                                                        {
                                                            <RadzenDataGridColumn Width="100px" TItem="SanPham" Title="@displayName"
                                                                                  Property="@colName" TextAlign="TextAlign.Center">
                                                                <HeaderTemplate>
                                                                    <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                </HeaderTemplate>
                                                                <Template Context="sanpham">
                                                                    <RadzenText Text="@($"{sanpham.GetPropertyValue(colName)}")" Style="font-size: 16px; height: contain; color: darkblue; font-weight: bold"></RadzenText>
                                                                </Template>
                                                            </RadzenDataGridColumn>
                                                        }
                                                        else if (colName == Common.SP_TenSanPham) // tên sản phẩm
                                                        {
                                                            <RadzenDataGridColumn Width="150px" TItem="SanPham" Title="@displayName"
                                                                                  Property="@colName" TextAlign="TextAlign.Center">
                                                                <HeaderTemplate>
                                                                    <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                </HeaderTemplate>
                                                                <Template Context="sanpham">
                                                                    <RadzenText Text="@($"{sanpham.GetPropertyValue(colName)}")" Style="font-size: 16px; color: black; height: contain; font-weight: 600"></RadzenText>
                                                                </Template>
                                                            </RadzenDataGridColumn>
                                                        }
                                                    }

                                                    <!--Xem danh sach NVL-->
                                                    <RadzenDataGridColumn Width="200px" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                                          TItem="SanPham" Title="Danh sách NVL"
                                                                          Property="dsnvl" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: bold; font-size: 16px; color: white">Danh sách NVL</span>
                                                        </HeaderTemplate>
                                                        <Template Context="sp">
                                                            @{
                                                                int nvlcount = 0;
                                                                nvlcount = sp?.DanhSachNVLs?.Count ?? 0;
                                                            }
                                                            <RadzenText @onclick="@(() => OnOpenDialogXemDSachNVL(sp))" Text="@($"Xem danh sách NVL ({nvlcount})")" Style="font-size: 15px; color: Highlight; width: contain; font-weight: 600; font-style: italic; cursor: pointer"></RadzenText>
                                                        </Template>
                                                    </RadzenDataGridColumn>

                                                    <!--Them NVL-->
                                                    <RadzenDataGridColumn Width="150px" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                                          TItem="SanPham" Title="THÊM NVL"
                                                                          Property="themnvl" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: bold; font-size: 16px; color: white">THÊM NGUYÊN LIỆU</span>
                                                        </HeaderTemplate>
                                                        <Template Context="sp">
                                                            <RadzenButton Click="@(() => OnOpenDialogAddNVL(sp))" Icon="add" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Filled" Text="Thêm"></RadzenButton>
                                                        </Template>
                                                    </RadzenDataGridColumn>

                                                    <!--ID-->
                                                    <RadzenDataGridColumn Width="60px" TItem="SanPham" Title="#ID" Frozen="true"
                                                                          Property="#ID" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: 600; font-size: 15px; color: white">#ID</span>
                                                        </HeaderTemplate>
                                                        <Template Context="sanpham">
                                                            <RadzenText Text="@($"#{sanpham.GetPropertyValue(Common.SP_SPID)}")" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                        </Template>
                                                    </RadzenDataGridColumn>
                                                }
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenStack>
                                </RadzenColumn>

                                <!--Column danh sach thong tin san pham-->
                                <RadzenColumn Size="12" SizeMD="5" Style="height: contain; width: 100%; padding-top: 10px; padding-left: 10px; border-left: var(--rz-grid-cell-border);">
                                    <RadzenCard Variant="Variant.Filled" Style="border-radius: 10px; height: 100%; width: 100%;">
                                        <RadzenStack Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" Gap="5px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenCard Variant="@((isEditSanPhamDetail)? Variant.Flat : Variant.Outlined)" Style="height: 390px; width: 100%; padding: 0px; border-radius: 10px;">
                                                <RadzenStack Style="height: 100%; width: 100%; padding: 5px; padding-right: 0; overflow-y: scroll" Gap="0" Orientation="Orientation.Vertical">
                                                    <RadzenStack Style="height: contain; width: 100%; padding: 10px; padding-right: 0;" Gap="0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                        <RadzenCard Variant="Variant.Filled" Style="height: contain; width: contain; padding: 0px; border-radius: 10px">
                                                            @{
                                                                string qrBase64string = QRCodeServices.GenerateQRCode(SelectedSanPham.SP_MaSP.Value?.ToString() ?? string.Empty, 150);
                                                                @if (!string.IsNullOrEmpty(qrBase64string))
                                                                {
                                                                    <RadzenImage Style="max-width: 130px; max-height: 130px; padding: 0px; border-radius: 10px; margin: 0" Path="@($"data:image/png;base64,{qrBase64string}")"></RadzenImage>
                                                                }
                                                                else
                                                                {
                                                                    <RadzenIcon Icon="image_not_supported" Style="font-size: 150px; color: #ccc;"></RadzenIcon>
                                                                }
                                                            }
                                                        </RadzenCard>
                                                        <RadzenStack Style="height: contain; width: 70%; padding: 0px; padding-left: 30px" Orientation="Orientation.Vertical" Gap="10px" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                                                            <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenText Text="Tên sản phẩm:" Style="font-size: 16px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                                <RadzenText Text="@($"{SelectedSanPham.SP_TenSanPham.Value?.ToString()}")" Style="color: black; font-size: 18px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenText Text="Mã sản phẩm:" Style="font-size: 16px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                                <RadzenText Text="@($"{SelectedSanPham.SP_MaSP.Value?.ToString()}")" Style="color: darkblue; font-size: 18px; font-weight: bold; height: contain; width: contain"></RadzenText>
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenStack>

                                                    <RadzenStack Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-darker); padding: 5px; padding-left: 10px; margin-bottom: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                        <RadzenText Text="Thông tin chi tiết sản phẩm" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>
                                                    </RadzenStack>
                                                    <!--Display main details--> <!--Edit mode-->
                                                    @if (isEditSanPhamDetail)
                                                    {
                                                        var thongtins = SelectedSanPham?.GetPropertiesValues().Where(nvl => nvl.AlowDisplay == true).ToList() ?? new();

                                                        foreach (var thongtin in thongtins)
                                                        {
                                                            <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Style="width: 30%;">
                                                                    <RadzenText Text="@thongtin.DisplayName" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditSanPhamDetail)? JustifyContent.Start : JustifyContent.Center)">

                                                                    @if (thongtin.Type == typeof(string))
                                                                    {
                                                                        <RadzenTextBox Placeholder="@($"* nhập {thongtin.DisplayName}")" Value="@thongtin.Value?.ToString()" ValueChanged="@((args) => { thongtin.Value = args; } )"
                                                                                       Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                    }
                                                                    else if (thongtin.Type == typeof(int))
                                                                    {
                                                                        <RadzenNumeric Placeholder="@($"* nhập {thongtin.DisplayName}")" TValue="int" Value="@int.Parse(thongtin.Value?.ToString()?? "0")" Min="0" Max="999999" ValueChanged="@((args) => { thongtin.Value = args; })"
                                                                                       Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                    }
                                                                    else if (thongtin.Type == typeof(DateTime))
                                                                    {
                                                                        bool ishaveValueOfday = DateTime.TryParse(thongtin.Value?.ToString(), out DateTime selectday);
                                                                        if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                        <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {thongtin.DisplayName}")"
                                                                                          TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                          Change="@((args) =>
                                                                                            {
                                                                                                if (args != null)
                                                                                                {
                                                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                    thongtin.Value = value;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    thongtin.Value = string.Empty;
                                                                                                }
                                                                                            })"
                                                                                          ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" ParseInput="@Common.ParseDate" AllowInput="true"
                                                                                          Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                    }
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        }
                                                    }

                                                    <!--Display extra details-->
                                                    @if (SelectedSanPham?.DSThongTin.Count > 0)
                                                    {
                                                        var sanphamdetails = SelectedSanPham.DSThongTin;

                                                        if (sanphamdetails != null)
                                                        {
                                                            foreach (var spdetail in sanphamdetails)
                                                            {
                                                                <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenStack Style="width: 30%;">
                                                                        <RadzenText Text="@(spdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString())" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditSanPhamDetail)? JustifyContent.Start : JustifyContent.Center)">
                                                                        @{
                                                                            int kieudulieu = int.TryParse(spdetail.LoaiThongTin.KieuDuLieu.Value?.ToString(), out int kdl) ? kdl : 0;

                                                                            <!--Edit mode-->
                                                                            if (isEditSanPhamDetail)
                                                                            {

                                                                                if (kieudulieu == 1) // kieu ki tu
                                                                                {
                                                                                    <RadzenTextBox class="custom-placeholder" Placeholder="@($"* nhập {spdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                   Value="@spdetail.GiaTri.Value?.ToString()" ValueChanged="@((args) => { spdetail.GiaTri.Value = args; } )"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                                }
                                                                                else if (kieudulieu == 2) // kieu so
                                                                                {
                                                                                    <RadzenNumeric class="custom-placeholder" Placeholder="@($"* nhập {spdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")" TValue="int"
                                                                                                   Value="@int.Parse(spdetail.GiaTri.Value?.ToString()?? "0")" Min="1" Max="999999"
                                                                                                   ValueChanged="@((args) => { spdetail.GiaTri.Value = args; })"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                                }
                                                                                else if (kieudulieu == 3) // datetime
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(spdetail.GiaTri.Value?.ToString(), out DateTime selectday);
                                                                                    if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                                    <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {spdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                      TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                                      Change="@((args) =>
                                                                                                                        {
                                                                                                                            if (args != null)
                                                                                                                            {
                                                                                                                                DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                                                spdetail.GiaTri.Value = value;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                spdetail.GiaTri.Value = string.Empty;
                                                                                                                            }
                                                                                                                        })"
                                                                                                      ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" ParseInput="@Common.ParseDate" AllowInput="true"
                                                                                                      Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                <!--Normal mode-->
                                                                                if (kieudulieu == 3)
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(spdetail.GiaTri.Value?.ToString(), out DateTime vldate);

                                                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <RadzenText Text="@spdetail.GiaTri.Value?.ToString()" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                            }
                                                                        }
                                                                    </RadzenStack>
                                                                    <RadzenStack Visible="@isEditSanPhamDetail" Gap="5" Style="width: 15%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenButton Click="@(() => OpendialogRenameThongTinSP(spdetail))" Icon="edit" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Đổi tên trường thông tin"))"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                        <RadzenButton Click="@(() => OpendialogDeleteThongTinSP(spdetail))" Icon="delete" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa trường thông tin"))"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            }
                                                        }
                                                    }
                                                </RadzenStack>
                                            </RadzenCard>

                                            <RadzenStack Visible="(SelectedSanPham.SP_SPID.Value != null)" Gap="10px" Style="height: contain; width: 100%; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenButton Visible="@(!isEditSanPhamDetail)" Style="width: contain; height: contain;" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm thông tin khác cho sản phẩm"))"
                                                                  Icon="add" Text="Thông tin khác" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click="@(() => OnOpenDialogAddNewSPDetail())" />
                                                    <RadzenButton Visible="@(isEditSanPhamDetail)" Style="width: contain; height: contain;"
                                                                  Icon="check" Text="Lưu thay đổi" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click=@(() => OnUpdateThongTinSanPham(SelectedSanPham))
                                                                  BusyText="Saving ..." IsBusy=@isSavingSPdetails />
                                                    <RadzenButton Style="width: contain; min-width: 120px; height: contain;" Click="@(() => EnableEditSPDetail())"
                                                                  Icon="@((isEditSanPhamDetail)? "clear" : "edit")" Text="@((isEditSanPhamDetail)? "Hủy" : "Chỉnh sửa")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                                </RadzenStack>
                                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenButton Visible="@(isEditSanPhamDetail)" Style="width: contain; height: contain; background-color: darkred"
                                                                  Icon="delete" Text="Xóa sản phẩm" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click=@(() => OnDeleteSanPham(SelectedSanPham)) />
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenColumn>
</RadzenRow>


@code {
    private List<SanPham> DSachSanPhamsBase = new();
    private List<SanPham> DSachSanPhams = new();
    private SanPham SelectedSanPham = new();
    private ThongTinSanPham SelectedThongtinSP = new();
    private IList<SanPham>? DatagridSeleted;

    private DateTime startSearchDay = DateTime.Today;
    private DateTime endSearchDay = DateTime.Today;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";
    private bool isEditSanPhamDetail = false;
    private bool isSavingSPdetails = false;

    protected override async Task OnInitializedAsync()
    {
        // Load ds san pham base/ hien thi
        await LoadAllDanhsachSanPhamBase();

        ReSelectCurrentSanPham(Common.SelectedSanPhamid); // re-selected

        await base.OnInitializedAsync();
    }

    // Them moi san pham
    private async Task OnThemMoiSanPham()
    {
        SanPham newSP = await DialogService.OpenAsync<DialogAddnewSanPham>(null, null,
        new DialogOptions() { ShowTitle = false, Width = "50%", Height = "95%", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        // Reload ds san pham
        await LoadAllDanhsachSanPhamBase();

        if (newSP != null)
        {
            Common.SelectedSanPhamid = newSP.SP_SPID.Value;

            ReSelectCurrentSanPham(Common.SelectedSanPhamid);

            ShowNotification("Reload success!", NotificationSeverity.Success, 2000);
        }
    }

    // Rename truong thong tin san pham
    private async Task OpendialogRenameThongTinSP(ThongTinSanPham thongtin)
    {
        var renamestatus = await DialogService.OpenAsync<DialogRenameThongTinSanPham>(null, new Dictionary<string, object>() { { "ThongTinSanPham", thongtin }, { "TargetSanPham", SelectedSanPham } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (renamestatus != null)
        {
            await LoadAllDanhsachSanPhamBase();

            ReSelectCurrentSanPham(Common.SelectedSanPhamid);
        }
    }

    // Delete thong tin san pham
    private async Task OpendialogDeleteThongTinSP(ThongTinSanPham thongtin)
    {
        var deletestatus = await DialogService.OpenAsync<DialogDeleteThongTinSanPham>(null, new Dictionary<string, object>() { { "DeleteThongTinSP", thongtin } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (deletestatus != null)
        {
            await LoadAllDanhsachSanPhamBase();

            ReSelectCurrentSanPham(Common.SelectedSanPhamid);
        }
    }

    // Add new thong tin san pham
    private async Task OnOpenDialogAddNewSPDetail()
    {
        List<LoaiThongTinSanPham> loaiThongTinSPs = await DialogService.OpenAsync<DialogAddnewThongTinSanPham>(null, new Dictionary<string, object>() { { "TargetSanPham", SelectedSanPham }, { "IsAddThongTinInCreateNewSanPhamMode", false } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (loaiThongTinSPs != null && loaiThongTinSPs.Count > 0)
        {
            int ttmmid = 0; string err = string.Empty;

            foreach (var loaiThongTinSP in loaiThongTinSPs)
            {
                var isexisting = SelectedSanPham.DSThongTin.Any(thongtin => thongtin.LoaiThongTin.TenTruyXuat.Value?.ToString()?.Trim() == loaiThongTinSP.TenTruyXuat.Value?.ToString()?.Trim());

                if (!isexisting)
                {
                    ThongTinSanPham thongTin = new()
                        {
                            LoaiTTSPID = { Value = loaiThongTinSP.LoaiTTSPID.Value },
                            SPID = { Value = SelectedSanPham.SP_SPID.Value },
                            LoaiThongTin = loaiThongTinSP,
                            GiaTri = { Value = loaiThongTinSP.GiaTriMacDinh.Value ?? string.Empty }
                        };

                    (ttmmid, err) = SQLServerServices.InsertThongTinSanPham(thongTin);
                }
            }

            if (ttmmid > 0)
            {
                await LoadAllDanhsachSanPhamBase();

                ReSelectCurrentSanPham(Common.SelectedSanPhamid);

                ShowNotification("Đã thêm trường thông tin!", NotificationSeverity.Success, 3000);
            }
            else if (ttmmid == -1)
            {
                await DialogService.Alert($"Thêm thông tin lỗi: {err}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }

        isEditSanPhamDetail = false;
    }

    // Save sanpham updatedinfors
    private async Task OnUpdateThongTinSanPham(SanPham selectedsanpham)
    {
        isSavingSPdetails = true;

        // Update truong thong tin chinh

        (int mainUDresult, string mainUDerror) = SQLServerServices.UpdateSanPhamMainDetails(selectedsanpham);

        if (mainUDresult == -1)
        {
            await DialogService.Alert($"Lỗi: {mainUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
        else
        {
            // Update truong thong tin phu
            int subUDresult = 1; string subUDerror = string.Empty;

            if (SelectedSanPham.DSThongTin.Count > 0)
            {
                (subUDresult, subUDerror) = SQLServerServices.UpdateListExtraSanPhamDetails(selectedsanpham.DSThongTin);
            }

            if (subUDresult == -1)
            {
                await DialogService.Alert($"Lỗi: {subUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                // await DialogService.Alert($"Cập nhật thành công!", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                await LoadAllDanhsachSanPhamBase();

                ReSelectCurrentSanPham(Common.SelectedSanPhamid);

                ShowNotification("Đã lưu thay đổi!", NotificationSeverity.Success, 3000);
            }
        }

        isSavingSPdetails = false;

        isEditSanPhamDetail = false;
    }

    // Delete sanpham
    private async Task OnDeleteSanPham(SanPham selectedsanpham)
    {
        bool? comfirm = await DialogService.Confirm("Xóa sản phẩm này khỏi danh sách sản phẩm?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (comfirm.Value)
        {
            (int result, string error) = SQLServerServices.DeleteSanPham(SelectedSanPham.SP_SPID.Value);

            if (result == -1)
            {
                await DialogService.Alert($"Không thể xóa: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = false });
            }
            else
            {
                await LoadAllDanhsachSanPhamBase();

                ReSelectCurrentSanPham(Common.SelectedSanPhamid);

                ShowNotification("Đã xóa!", NotificationSeverity.Success, 3000);
            }
        }

        isEditSanPhamDetail = false;
    }

    // Press button Edit/Cancel
    private async Task EnableEditSPDetail()
    {
        if (isEditSanPhamDetail)
        {
            // Press cancel button
            isEditSanPhamDetail = false;

            await LoadAllDanhsachSanPhamBase();

            ReSelectCurrentSanPham(Common.SelectedSanPhamid);
        }
        else
        {
            // Press edit button
            isEditSanPhamDetail = true;
        }
    }


    bool isSearching = false;
    // Searching
    private async Task FilterSP(object? args)
    {
        await Task.Run(() =>
        {
            if (isSearching == false)
            {
                isSearching = true;

                SelectedSanPham = new();

                string keysearch = args?.ToString()?.Trim() ?? string.Empty;

                // Load danh sach san pham

                if (string.IsNullOrEmpty(keysearch))
                {
                    DSachSanPhams = DSachSanPhamsBase; // Lay danh sach base
                }
                else
                {
                    List<SanPham>? dssanphamFilterResult = DSachSanPhamsBase?.FindAll(sp => sp.SP_TenSanPham.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);

                    if (dssanphamFilterResult?.Count == 0)
                    {
                        dssanphamFilterResult = DSachSanPhamsBase?.FindAll(sp => sp.SP_MaSP.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);

                        if (dssanphamFilterResult?.Count == 0)
                        {
                            dssanphamFilterResult = DSachSanPhamsBase?.FindAll(sp => sp.SP_SPID.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);
                        }
                    }

                    DSachSanPhams = dssanphamFilterResult ?? new();
                }

                isSearching = false;
            }
        });
    }

    private bool isLoadingDSSanPham = false;
    // Load all danh sach san pham base
    private async Task LoadAllDanhsachSanPhamBase()
    {
        await Task.Run(async () =>
        {
            if (isLoadingDSSanPham == false)
            {
                isLoadingDSSanPham = true;

                DSachSanPhamsBase = SQLServerServices.GetDanhSachSanPham(); // load dach mac dinh

                DSachSanPhams = DSachSanPhamsBase.ToList(); // gan cho ds hien thi

                await Task.Delay(300);

                isLoadingDSSanPham = false;
            }
        });
    }

    // Re-selected current san pham
    private void ReSelectCurrentSanPham(object? targetID)
    {
        if (DSachSanPhams != null)
        {
            if (targetID == null) // get fist row
            {
                var fistitem = DSachSanPhams.FirstOrDefault();

                if (fistitem != null) { DatagridSeleted = new List<SanPham>() { fistitem }; }
            }
            else
            {
                var selectedID = targetID;
                // load last selected item
                var selecteditem = DSachSanPhams.FirstOrDefault(sp => sp.SP_SPID.Value?.ToString() == selectedID.ToString());

                if (selecteditem != null) { DatagridSeleted = new List<SanPham>() { selecteditem }; }
                else { DatagridSeleted = new List<SanPham>(); }
            }

            SelectedSanPham = DatagridSeleted?.FirstOrDefault() ?? new();
        }
    }

    // Dialog xem danh sach NVL
    private async Task OnOpenDialogXemDSachNVL(SanPham? seletecSP)
    {
        await DialogService.OpenAsync<DialogXemDSNguyenLieuofSanPham>(null, new Dictionary<string, object>() { { "Sanpham", seletecSP ?? new SanPham() } },
        new DialogOptions() { ShowTitle = false, Width = "50%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });
    }

    // Dialog add NVL cho san pham
    private async Task OnOpenDialogAddNVL(SanPham? seletecSP)
    {
        var result = await DialogService.OpenAsync<DialogAddNLforSanpham>(null, new Dictionary<string, object>() { { "SanPham", seletecSP ?? new SanPham() } },
        new DialogOptions() { ShowTitle = false, Width = "80%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = 500, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<SanPham> selectedSanPham)
    {
        DatagridSeleted = selectedSanPham;

        var fistItemSelectedSanPham = DatagridSeleted.FirstOrDefault();

        if (fistItemSelectedSanPham != null)
        {
            SelectedSanPham = fistItemSelectedSanPham;

            Common.SelectedSanPhamid = fistItemSelectedSanPham.SP_SPID.Value;
        }
    }

    private void OnCellRender(DataGridCellRenderEventArgs<SanPham> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }
}
