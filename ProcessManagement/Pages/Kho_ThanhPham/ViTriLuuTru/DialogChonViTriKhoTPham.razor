@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices

<style>
    .vitri_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }

    .vtofnvl_IsSelectd {
        width: 100%;
        height: contain;
        padding: 5px;
        padding-right: 0px;
        background-color: var(--rz-success-light) !important;
    }

    .vtofnvl_UnSelectd {
        width: 100%;
        height: contain;
        padding: 5px;
        padding-right: 0px;
        cursor: pointer;
        background-color: white !important;
    }
</style>

<RadzenCard Variant="Variant.Filled" Style="height: 100%; width: 100%; padding: 10px; padding-right: 0">
    <RadzenStack Gap="10" Orientation="Orientation.Vertical" Style=" height: 100%; width: 100%; padding: 0px; padding-bottom: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenRow Style="height: 100%; width: 100%;">
                <RadzenColumn SizeMD="3" Size="12">
                    <RadzenStack Style="height: 100%; width: 100%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenText Text="CHỌN VỊ TRÍ LƯU KHO THÀNH PHẨM" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeMD="5" Size="12">
                    <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Style="height: 100%; width: 100%;">
                        <RadzenTextBox @oninput="@((args) => GetFilterDSachViTriTPham(args?.Value?.ToString()?? string.Empty))" Placeholder="Nhập mã vị trí hoặc mã sản phẩm để tìm kiếm" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 70% "></RadzenTextBox>
                        <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                        <RadzenButton Style="border-radius: 20px;" Icon="autorenew" Click="@( async() => {await GetFilterDSachViTriTPham(string.Empty);})" IsBusy="@isSearching" ButtonStyle="ButtonStyle.Primary" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeMD="3" Size="12">
                    <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%; padding-left: 10px">
                        <RadzenMenu Style="width: 100%; padding: 0; margin: 0; border-radius: 10px; background-color: var(--rz-primary-lighter)">
                            <RadzenMenuItem Text="@($"Bộ lọc ( {DSachModeSearch[modeSearch]} )")" Icon="search">
                                <RadzenMenuItem Text="@DSachModeSearch[0]" Click="@( async() => { modeSearch = 0; await LoadDSachViTriTPham();} )" Icon="filter_alt"></RadzenMenuItem>
                                <RadzenMenuItem Text="@DSachModeSearch[1]" Click="@(() => modeSearch = 1)" Icon="filter_alt"></RadzenMenuItem>
                                <RadzenMenuItem Text="@DSachModeSearch[2]" Click="@(() => modeSearch = 2)" Icon="filter_alt"></RadzenMenuItem>
                                <RadzenMenuItem Text="@DSachModeSearch[3]" Click="@( async() => {modeSearch = 3; await GetFilterDSachViTriTPham(string.Empty);})" Icon="filter_alt"></RadzenMenuItem>
                                <RadzenMenuItem Text="@DSachModeSearch[4]" Click="@( async() => {modeSearch = 4; await GetFilterDSachViTriTPham(string.Empty);})" Icon="filter_alt"></RadzenMenuItem>
                            </RadzenMenuItem>
                        </RadzenMenu>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
        <RadzenStack Style="height: auto; width: 100%; overflow-y: scroll" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenRow Gap="10px" Style="height: 100%; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; padding-top: 10px;">
                <RadzenColumn Size="12" SizeMD="8" Style="height: 100%; width: 100%; padding-top: 10px; padding-left: 10px; border-left: var(--rz-grid-cell-border);">
                    <RadzenRow class="rowbackground-style" Gap="10px" Style="height: 100%; width: 100%; border-radius: 0;">
                        <!--Danh sách vị trí trong kho-->
                        <RadzenColumn Size="12" SizeMD="5" Style="height: 100%; width: 100%; background-color: var(--rz-primary-lighter);">
                            <RadzenStack Style="height: 100%; width: 100%;" Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 10px; padding-left: 10px; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenText Text="Danh sách vị trí trong kho thành phẩm" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
                                    <RadzenText Text="@($"( {DSVitris.Count} vị trí )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="height: 100%; width: 100%; overflow-y: scroll" Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenDataList Style="height: contain; width: 100%;" Density="Density.Compact" PagerPosition="PagerPosition.Top" PageSize="9" WrapItems="true" AllowPaging="true" Data="@DSVitris" TItem="ViTriTPham">
                                        <Template Context="vitri">
                                            <RadzenCard Style="width: 150px; height: contain; padding: 0; margin-right: 0" Variant="Variant.Flat">
                                                <RadzenStack Style="height: 100%; width: 100%;" Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenCard class="@(IsVitriSelected(vitri))" Style="width: 100%; height: contain; padding: 10px;" Variant="Variant.Filled">
                                                        <RadzenStack onclick="@(async() => await OnViTriLuuTruClick(vitri))" Style="width: contain; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                            <RadzenCard Style="height: 100%; width: 100%; padding: 10px;" Variant="@((vitri.VTTPID.Value?.Equals(SelectedViTri.VTTPID.Value)?? false)? Variant.Flat : Variant.Outlined)">
                                                                <RadzenStack Style="width: 100%; height: 100%; cursor: pointer" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenStack Gap="10px" Style="width: 100%; height: contain;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            <RadzenText Text="@((DSVitris.IndexOf(vitri) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                                                        </RadzenStack>
                                                                        <RadzenStack Style="width: 100%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            <RadzenText Text="@($"{vitri.MaViTri.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px"></RadzenText>
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                    <RadzenStack Gap="10" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                                        <RadzenStack Style="height: contain; width: 100%; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            @if (vitri.SLConTrong > 0)
                                                                            {
                                                                                <RadzenButton Text="@($"Trống {((vitri.SLConTrong > 0)? $"({vitri.SLConTrong})" : string.Empty)}")" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                                              Style="border-radius: 5px; --rz-icon-size: 18px; height: contain; width: 100%; cursor: default; background-color: rgb(229,245,233); font-weight: 600" />
                                                                            }
                                                                            else
                                                                            {
                                                                                <RadzenButton Text="Đầy" Icon="block" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                                              Style="border-radius: 5px; --rz-icon-size: 18px; height: contain; width: 100%; cursor: default; background-color: rgb(254,243,220); font-weight: 600" />
                                                                            }
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            </RadzenCard>
                                                        </RadzenStack>
                                                    </RadzenCard>

                                                </RadzenStack>
                                            </RadzenCard>
                                        </Template>
                                    </RadzenDataList>

                                </RadzenStack>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; padding-right: 10px; border-top: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Click="@(() => { DialogService.Close(null);})" Style="width: 120px;" Icon="close" Text="Đóng" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public ThungTPhamExtend TarGetThungTPhamEx { get; set; } = new();
    private List<ViTriTPham> DSVitris = new();
    private ViTriTPham SelectedViTri = new();
    private Dictionary<int, string> DSachModeSearch = new() { { 0, "Tất cả vị trí" }, { 1, "Mã vị trí" }, { 2, "Tên nguyên liệu" }, { 3, "Vị trí đầy" }, { 4, "Vị trí còn trống" } };
    private int modeSearch = 4;
    private bool isChidinhSLok = false;
    private ViTriofTPham SelectedVTofTPham = new();

    private string IsVitriSelected(ViTriTPham selectVitri)
    {
        if (SelectedViTri.VTTPID.Value != null && SelectedViTri.VTTPID.Value.Equals(selectVitri.VTTPID.Value))
        {
            return "vitri_IsSelected";
        }
        else return string.Empty;
    }

    private bool IsVTofNVLSelected(ViTriofTPham selected)
    {
        if (SelectedVTofTPham.VTTPID.Value != selected.VTTPID.Value)
        {
            return false;
        }
        if (SelectedVTofTPham.LotVitri.Value?.ToString()?.Trim() != selected.LotVitri.Value?.ToString()?.Trim())
        {
            return false;
        }

        return true;
    }

    private void OnVTofNVLSelected(ViTriofTPham selected, int slhienco)
    {
        bool nnk = selected.NgayNhapKho.Value?.ToString()?.Trim() == DateTime.Now.Date.ToShortDateString();

        if ((slhienco > 0 || slhienco == 0))
        {
            SelectedVTofTPham = selected;

            StateHasChanged();
        }
    }

    private async Task OnViTriLuuTruClick(ViTriTPham selectVitri)
    {
        SelectedViTri = selectVitri;

        await Task.Delay(1);

        StateHasChanged();
    }


    // Load danh sach vi tri trong kho luu tru
    private async Task LoadDSachViTriTPham(object? vtid = null)
    {
        await Task.Run(() =>
        {
            DSVitris = SQLServerServices.GetListViTriTPhams(new Dictionary<string, object?>(), true).viTriTPhams;

            Parallel.ForEach(DSVitris, vitri =>
            {
                Dictionary<string, object?> parameters = new() { { ViTriofTPham.DBName.VTTPID, vitri.VTTPID.Value } };

                vitri.DSachViTriofTPhams = SQLServerServices.GetListViTriofTPhams(parameters, false).viTriofTPhams;

                vitri.DSachViTriofTPhams = RangeIncreaseLOTs(vitri.DSachViTriofTPhams);

                // Load san pham infor
                Parallel.ForEach(vitri.DSachViTriofTPhams, vitrioftp =>
                {
                    _ = int.TryParse(vitrioftp.SPID.Value?.ToString(), out int spid) ? spid : 0;

                    if ((spid) > 0)
                    {
                        vitrioftp.TargetSanPham = SQLServerServices.GetSanpham(spid);
                    }
                });
            });
        });
    }

    private List<ViTriofTPham> RangeIncreaseLOTs(List<ViTriofTPham> inputList)
    {
        // Sort the list based on extracting the numeric part of the Lot property
        return inputList.OrderBy(item =>
        int.TryParse(
            item.LotVitri.Value?.ToString()?.Replace("LOT", ""),
            out int lotNumber
        ) ? lotNumber : int.MaxValue
        ).ToList();
    }

    private bool isSearching = false;
    private async Task GetFilterDSachViTriTPham(string keyWord)
    {
        if (isSearching == false)
        {
            isSearching = true;

            await LoadDSachViTriTPham();

            if (modeSearch == 1) // tim theo mavitri
            {
                DSVitris = DSVitris.Where(vitri => vitri.MaViTri.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0).ToList();
            }
            else if (modeSearch == 2) // tim theo ten
            {
                DSVitris = DSVitris.Where(vitri => vitri.DSachViTriofTPhams.Any(tp => tp.TargetSanPham.SP_MaSP.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0)).ToList();
            }
            else if (modeSearch == 3) // vi tri day
            {
                DSVitris = DSVitris.Where(vitri => vitri.SLConTrong == 0).ToList();

                if (!string.IsNullOrEmpty(keyWord.Trim()))
                {
                    DSVitris = DSVitris.Where(vitri => vitri.MaViTri.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0
                                                    || vitri.DSachViTriofTPhams.Any(tp => tp.TargetSanPham.SP_MaSP.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0)).ToList();
                }
            }
            else if (modeSearch == 4) // vi tri con trong
            {
                DSVitris = DSVitris.Where(vitri => vitri.SLConTrong > 0).ToList();

                if (!string.IsNullOrEmpty(keyWord.Trim()))
                {
                    DSVitris = DSVitris.Where(vitri => vitri.MaViTri.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0
                                                    || vitri.DSachViTriofTPhams.Any(tp => tp.TargetSanPham.SP_MaSP.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0)).ToList();
                }
            }
            else
            {
                if (!string.IsNullOrEmpty(keyWord.Trim()))
                {
                    DSVitris = DSVitris.Where(vitri => vitri.MaViTri.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0
                                                    || vitri.DSachViTriofTPhams.Any(tp => tp.TargetSanPham.SP_MaSP.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0)).ToList();
                }
            }

            if (DSVitris.Count > 0)
            {
                SelectedViTri = DSVitris.FirstOrDefault() ?? new();
            }
            else SelectedViTri = new();

            isSearching = false;
        }
    }

}
