@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Pages.Kho_ThanhPham.NhapKho
@using ProcessManagement.Pages.Manager_NVL.Dialogs
@using ProcessManagement.Services.QRCodes
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices

<style>
    .vitri_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }

    .vitriofTP_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
        padding: 2px;
    }

    .vitriofTP_UnSelected {
        padding: 2px;
        cursor: pointer;
    }

    .vtofnvl_IsSelectd {
        width: 100%;
        height: contain;
        padding: 1px;
        background-color: var(--rz-success-dark) !important;
    }

    .vtofnvl_UnSelectd {
        width: 100%;
        height: contain;
        padding: 0px;
        cursor: pointer;
    }
</style>

<RadzenRow Gap="10px" Style="height: 100%; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
    <!--Column bang danh sach thanh pham-->
    <RadzenColumn Size="12" SizeMD="6" Style="height: 100%; padding-top: 10px">
        <RadzenCard Variant="Variant.Filled" Style="height: 100%; width: 100%; padding: 10px; padding-top: 0">
            <RadzenStack Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 5px; padding-left: 10px; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenText Text="Danh sách thành phẩm" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
                        <RadzenText Text="@($"( {TPhamViews.Count} thành phẩm )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                    </RadzenStack>
                    <!--Button enable advance filter-->
                    <RadzenStack Style="height: 100%; width: contain; padding-left: 10px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenButton Icon="@(filterActive ? "filter_alt_off" : "filter_alt")" Text="Bộ lọc nâng cao" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="@(filterActive ? Shade.Darker : Shade.Lighter)"
                                        Style="height: contain; width: contain; font-size: 14px;"
                                        Click="@( async () =>
                                                {
                                                    if (filterActive)
                                                    {
                                                        await LoadTPhamViewBase();
                                                    }
                                                    filterActive = !filterActive;
                                                })" />
                        <RadzenButton Click="@(async () => {keyFilterExtraColumns = new(); keyFilterMainColumns = new(); await LoadTPhamViewBase();})"
                                        Icon="reset_settings" Text="Reset bộ lọc" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                        Style="height: contain; width: contain; font-size: 14px;" />
                    </RadzenStack>
                </RadzenStack>

                <!--Datagrid danh sach thanh pham-->
                <RadzenStack Visible="@(TPhamViews?.Count > 0)" Style="height: 95%; width: 100%; padding-top: 10px; overflow: scroll" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                    <RadzenDataGrid @ref=refDatagrid class="rz-grid-table" Data="@(TPhamViews)" TItem="ThanhPhamView" IsLoading="@isLoading"
                                    EmptyText="Danh sách thành phẩm trống." Style="overflow: scroll; min-width: 100%; height: 100%"
                                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true"
                                    AllowFiltering="@filterActive" FilterMode="FilterMode.Simple" Page=@((args) => OnPageChanged(args) )
                                    AllowPaging="true" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                    GridLines="DataGridGridLines.Both" PageSize="20" Density="Density.Default" 
                                    HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77); padding-left: 10px; padding-right: 10px"))"
                                    CellRender="@OnCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">
                        <Columns>
                            @if (TPhamViews?.Count > 0)
                            {
                                List<Propertyy> columns = ThanhPhamView.GetClassProperties() ?? new();

                                <!--STT-->
                                <RadzenDataGridColumn Width="60px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                        TItem="ThanhPhamView" Title="#"
                                                        Property="STT" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                    </HeaderTemplate>
                                    <Template Context="nv">
                                        <span style="font-weight: bold;">@(TPhamViews.IndexOf(nv) + 1)</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                {
                                    string colName = column.DBName ?? string.Empty;
                                    string displayName = column.DisplayName ?? string.Empty;

                                    <RadzenDataGridColumn TItem="ThanhPhamView" Title="@displayName" FilterMode="FilterMode.CheckBoxList"
                                                            Property="@colName" TextAlign="TextAlign.Center">
                                        <HeaderTemplate>
                                            <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                        </HeaderTemplate>
                                        <FilterTemplate>
                                            <RadzenDropDown AllowClear="true"
                                                            Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; background-color: white"
                                                            AllowVirtualization="true"
                                                            AllowFiltering="true"
                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                            FilterOperator="StringFilterOperator.Contains"
                                                            AllowSelectAll="true"
                                                            TValue="IEnumerable<string>"
                                                            Data="@(GetMainColumnKeysSearch(colName))"
                                                            Multiple="true"
                                                            SelectedItem="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                                            Value="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                                            ValueChanged="@((IEnumerable<string> args) => OnComboboxMainColumnSelectedChanged(args, colName))">
                                            </RadzenDropDown>
                                        </FilterTemplate>
                                        <Template Context="nv">
                                            @if (colName == ThanhPhamView.DBName.Soluong)
                                            {
                                                <RadzenText Text="@($"{nv.GetPropertyValue(colName)} (PCS)")" Style="font-size: 15px; height: contain; color: black; font-weight: 600"></RadzenText>
                                            }
                                            else if (colName == ThanhPhamView.DBName.MaThanhPham)
                                            {
                                                <RadzenText Text="@($"{nv.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; color: darkblue; font-weight: 600"></RadzenText>
                                            }
                                            else
                                            {
                                                <RadzenText Text="@($"{nv.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                }
                            }
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </RadzenStack>
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6" Style="height: 100%; padding-top: 10px">
        <RadzenStack Style="width: 100%; height: contain; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenCard Variant="Variant.Flat" Style="height: contain; width: 100%; padding: 10px; border-top: var(--rz-grid-cell-border); margin-bottom: 10px; max-height: 550px; overflow-y: scroll">
                <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                    @foreach (var palletthungtp in SelectedThanhPhamView.PalletThungTPhams)
                    {
                        <RadzenStack Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            <RadzenCard Variant="Variant.Filled" Style="height: contain; width: 100%; padding: 10px;">
                                <RadzenCard Visible="@(palletthungtp.ThungTPhams.Any())" Variant="Variant.Outlined" Style="height: contain; width: 100%; padding: 10px; border-width: 1px;">
                                    <RadzenRow Style="width: 100%; height: contain" Gap="10px">
                                        <RadzenColumn Size="12" SizeMD="5" Style="width: 100%; height: contain">
                                            <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween"> 
                                                <RadzenStack Gap="5px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Pallet thành phẩm" Style="color: black; font-weight: 600; font-size: 17px; font-style: italic"></RadzenText>
                                                </RadzenStack>

                                                <RadzenStack Gap="50px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenCard Style="width: contain; min-width: 80px; height: contain; padding: 5px; " Variant="Variant.Flat">
                                                        <RadzenStack Gap="0" Style="width: contain; height: contain;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                            <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Số thùng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="@($"{palletthungtp.ThungTPhams.Count} (thùng)")" Style="font-size: 17px; font-weight: 600; height: contain; color: darkred"></RadzenText>
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenCard>
                                                    <RadzenStack Gap="0" Style="width: contain; height: contain;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                        <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                            <RadzenText Text="Tổng số lượng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                        </RadzenStack>
                                                        <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                            <RadzenText Text="@($"{palletthungtp.Total} (pcs)")" Style="font-size: 17px; font-weight: 600; height: contain; color: darkred"></RadzenText>
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                </RadzenStack>

                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="@($"Sản phẩm: ")" Style="font-weight: 500; font-size: 16px;"></RadzenText>
                                                    <RadzenText Text="@($"{palletthungtp.MaSanPham}")" Style="font-weight: 600; color: black; font-size: 16px;"></RadzenText>
                                                </RadzenStack>

                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    @{
                                                        DateTime? ngaynk = DateTime.TryParse(palletthungtp.ThungTPhams.FirstOrDefault()?.NgayNhapKho.Value?.ToString(), out DateTime nnk) ? nnk : null;

                                                        string _ngaynk = ngaynk?.ToString("dd/MM/yyyy") ?? "---";
                                                    }
                                                    <RadzenText Text="@($"Ngày nhập kho: ")" Style="font-weight: 500; font-size: 16px;"></RadzenText>
                                                    <RadzenText Text="@($"{_ngaynk}")" Style="font-weight: 600; color: black; font-size: 16px;"></RadzenText>
                                                </RadzenStack>

                                                <RadzenStack Gap="5px" Style="width: 100%; height: contain;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                    <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                        <RadzenText Text="Mã pallet" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                    </RadzenStack>
                                                    <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                        <RadzenButton Text="@($"{palletthungtp.PalletKey}")"
                                                                        Variant="Variant.Flat" Size="ButtonSize.Small" Shade="Shade.Lighter"
                                                                        Style="font-size: 16px; font-weight: 600; height: contain; color: darkgreen"></RadzenButton>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="7" Style="width: 100%; height: contain">
                                            <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="Danh sách mã quản lý thùng" Style="color: black; font-weight: 600; font-size: 15px; font-style: italic"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: contain; max-height: 200px; width: 100%; padding-right: 0px; overflow-y: scroll" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    @foreach (var thung in palletthungtp.ThungTPhams)
                                                    {
                                                        <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px; background-color: white">
                                                            <RadzenStack Style="width: 100%; height: 100%" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenStack Style="width: 70%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="@thung.MaQuanLyThung.Value?.ToString()" Style="color: darkblue; font-weight: 600; font-size: 14px"></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="10px" Style="width: 30%; height: contain; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="@($"{thung.SoLuong.Value?.ToString()} PCS")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        </RadzenCard>
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                            </RadzenCard>
                        </RadzenStack>
                    }
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {
    [Parameter]
    public List<ViTriTPham> ViTriTPhams { get; set; } = new();

    private List<ThanhPhamView> TPhamViews = new();
    private List<ThanhPhamView> TPhamViewsBase = new();
    private ThanhPhamView SelectedThanhPhamView = new();

    private bool filterActive = false;
    private bool isLoading = false;

    private int CurrSelectPageNgCongIndex = 1;

    private RadzenDataGrid<ThanhPhamView> refDatagrid = new();
    private IList<ThanhPhamView>? DatagridSeleted;
    private Dictionary<string, List<string>> keyFilterMainColumns = new();
    private Dictionary<string, List<string>> keyFilterExtraColumns = new();
    private DateTime startSearchDay = DateTime.Today;
    private DateTime endSearchDay = DateTime.Today;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ViTriTPhams.Count > 0 && TPhamViews.Count == 0)
        {
            await LoadTPhamViewBase();

            if (SelectedThanhPhamView.TPhamID.Value == null)
            {
                SelectedThanhPhamView = TPhamViews.FirstOrDefault() ?? new();
                DatagridSeleted = new List<ThanhPhamView> { { SelectedThanhPhamView } };
            }
        }

        await base.OnParametersSetAsync();
    }

    private List<ThanhPhamView> GroupBySanPham(List<ViTriTPham> viTriTPhams)
    {
        List<ThanhPhamView> thanhPhamViews = viTriTPhams.SelectMany(vt => vt.DSachViTriofTPhams).Select(v => v.PalletThungTPham)
            .Where(pl => !string.IsNullOrEmpty(pl.MaSanPham))
            .GroupBy(pl => pl.MaSanPham)
            .Select(g => new ThanhPhamView
            {
                MaThanhPham = { Value = g.Key },
                Soluong = { Value = g.Sum(pl => pl.Total) },
                PalletThungTPhams = g.ToList()
            }).ToList();

        return thanhPhamViews;
    }

    private async Task LoadTPhamViewBase()
    {
            isLoading = true;
            TPhamViewsBase = GroupBySanPham(ViTriTPhams);
            TPhamViews = TPhamViewsBase.ToList();
            await Task.Delay(300);
            isLoading = false;
    }

        // Khoi tao bien luu danh sach key search
    private async Task CreateCurrentSelectedKeyVariable()
    {
        await Task.Run(() =>
        {
            // Get main key colum
            List<Propertyy> columns = ThanhPhamView.GetClassProperties() ?? new();
            foreach (var column in columns)
            {
                string key = column.DBName ?? string.Empty;
                if (key != string.Empty && !keyFilterMainColumns.ContainsKey(key))
                {
                    keyFilterMainColumns.Add(key, new());
                }
            }
        });
    }

    // Lay danh sach key search Main column
    private List<string> GetMainColumnKeysSearch(string targetColumn)
    {
        List<string> keys = TPhamViewsBase
            .Select(nv => nv.GetPropertyValue(targetColumn)?.ToString() ?? string.Empty)
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();

        return keys;
    }

    // Update selected Main column key
    private async Task OnComboboxMainColumnSelectedChanged(IEnumerable<string> values, string targetColumn)
    {
        if (values != null)
        {
            keyFilterMainColumns[targetColumn] = values.ToList();
        }
        else
        {
            keyFilterMainColumns[targetColumn] = new();
        }

        await FilterDSachThanhPhamViewProcessing();
    }


        // Filtering processing
    private async Task FilterDSachThanhPhamViewProcessing()
    {
        await Task.Run(() =>
        {
            TPhamViews = TPhamViewsBase.ToList();

            // Main column filtering
            foreach (var column in keyFilterMainColumns)
            {
                List<string> selectedkeys = column.Value;

                if (selectedkeys != null && selectedkeys.Count > 0)
                {
                    TPhamViews = TPhamViewsBase
                            .Where(nv =>
                            {
                                var value = nv.GetPropertyValue(column.Key);
                                var valueString = value?.ToString();
                                return valueString != null && selectedkeys.Contains(valueString);
                            }).ToList();
                }
            }

            TPhamViews.Reverse();
        });
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<ThanhPhamView> selectedThanhPhamView)
    {
        DatagridSeleted = selectedThanhPhamView;

        var fistItemSelectedThanhPhamView = DatagridSeleted.FirstOrDefault();

        if (fistItemSelectedThanhPhamView != null)
        {
            SelectedThanhPhamView = fistItemSelectedThanhPhamView;
        }
    }

    // Datagrid selected page changed
    private void OnPageChanged(PagerEventArgs pagerEventArgs)
    {
        CurrSelectPageNgCongIndex = pagerEventArgs.PageIndex;
    }

    // Datagrid cellrender
    private void OnCellRender(DataGridCellRenderEventArgs<ThanhPhamView> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }
}
