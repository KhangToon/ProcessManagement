@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace ProcessManagement.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Process-Management</title>
    <base href="~/" />

    <!--BlazorBootstrap-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
    <link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />
    <!--BlazorBootstrap-->

    <link href="css/site.css" rel="stylesheet" />
    <link href="ProcessManagement.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <!--Radzen-->
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/software.css">
    <!--Radzen-->
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <!--BlazorBootstrap-->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <!-- Add chart.js reference if chart components are used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js" integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- Add sortable.js reference if SortableList component is used in your application. -->
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
    <script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>
    <!--BlazorBootstrap-->

    <!--Radzen-->
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <!--Radzen-->
    <script>
        let videoElement;

        window.checkCameraAvailability = async () => {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                console.log('Video devices found:', videoDevices.length);
                if (videoDevices.length > 0) {
                    return "Camera available";
                } else {
                    return "No camera devices found";
                }
            } catch (error) {
                console.error('Error checking camera availability:', error);
                return `Error checking camera: ${error.message}`;
            }
        };

        window.setupCamera = async () => {
            videoElement = document.getElementById('camera-video');
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                videoElement.srcObject = stream;
                return "Camera stream set up successfully";
            } catch (error) {
                console.error('Error accessing camera:', error);
                return `Error accessing camera: ${error.message}`;
            }
        };

        window.captureImage = () => {
            if (!videoElement || !videoElement.srcObject) {
                console.error('Video element not set up');
                return "Error: Video element not set up";
            }

            console.log('Video element dimensions:', videoElement.videoWidth, 'x', videoElement.videoHeight);

            if (videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {
                console.error('Video dimensions are zero. The stream may not be ready.');
                return "Error: Video dimensions are zero";
            }

            const canvas = document.createElement('canvas');
            canvas.width = videoElement.videoWidth;
            canvas.height = videoElement.videoHeight;
            const context = canvas.getContext('2d');

            try {
                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                const dataUrl = canvas.toDataURL('image/jpeg');
                console.log('Image captured. Data URL length:', dataUrl.length);
                return dataUrl;
            } catch (error) {
                console.error('Error capturing image:', error);
                return `Error capturing image: ${error.message}`;
            }
        };
    </script>
    
    <!--Coppy to clipboard-->
    <script>
        window.fallbackCopyToClipboard = function (text) {
            const textArea = document.createElement('textarea');
            textArea.value = text;

            // Make the textarea hidden but still selectable
            textArea.style.position = 'fixed';
            textArea.style.left = '-9999px';
            textArea.style.top = '0';
            textArea.style.opacity = '0';

            document.body.appendChild(textArea);
            textArea.select();

            try {
                document.execCommand('copy');
                textArea.remove();
                return Promise.resolve();
            } catch (err) {
                textArea.remove();
                return Promise.reject();
            }
        }
    </script>

    <!--JSBarcode-->
    <script src="~/js/JsBarcode.all.min.js"></script>
    <script src="~/js/JsBarcode.all.js"></script>
    <script>
        window.generateBarcode = function (input) {
            var barcode = document.getElementById("barcode");
            if (input == '') {
                alert("<<!-- Provide the data first --!>> ");
                return false;
            } else {
                JsBarcode(barcode, input);
                barcode.style.display = "inline";
            }
        };
    </script>
    <script>
        window.downloadBarcode = function (codename) {
            const canvas = document.createElement("canvas");
            const svg = document.getElementById("barcode");
            const base64doc = btoa(unescape(encodeURIComponent(svg.outerHTML)));
            const w = parseInt(svg.getAttribute('width'));
            const h = parseInt(svg.getAttribute('height'));
            const img_to_download = document.createElement('img');
            img_to_download.src = 'data:image/svg+xml;base64,' + base64doc;
            console.log(w, h);
            img_to_download.onload = function () {
                console.log('img loaded');
                canvas.setAttribute('width', w);
                canvas.setAttribute('height', h);
                const context = canvas.getContext("2d");
                //context.clearRect(0, 0, w, h);
                context.drawImage(img_to_download, 0, 0, w, h);
                const dataURL = canvas.toDataURL('image/png');
                if (window.navigator.msSaveBlob) {
                    window.navigator.msSaveBlob(canvas.msToBlob(), codename + ".png");
                } else {
                    const a = document.createElement('a');
                    const my_evt = new MouseEvent('click');
                    a.download = codename + ".png";
                    a.href = dataURL;
                    a.dispatchEvent(my_evt);
                }
                //canvas.parentNode.removeChild(canvas);
            }
        }
    </script>
    <!--JSBarcode-->

    <!--Open url new tab-->
    <script>
        window.openInNewTab = (url) => {
            window.open(url, '_blank');
        }
    </script>
</body>
</html>
