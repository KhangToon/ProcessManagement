@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace ProcessManagement.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Process-Management</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="ProcessManagement.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <!--Radzen-->
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/software.css">
    <!--Radzen-->
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <!--Radzen-->
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    <!--Radzen-->
    <script>
        let videoElement;

        window.checkCameraAvailability = async () => {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                console.log('Video devices found:', videoDevices.length);
                if (videoDevices.length > 0) {
                    return "Camera available";
                } else {
                    return "No camera devices found";
                }
            } catch (error) {
                console.error('Error checking camera availability:', error);
                return `Error checking camera: ${error.message}`;
            }
        };

        window.setupCamera = async () => {
            videoElement = document.getElementById('camera-video');
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                videoElement.srcObject = stream;
                return "Camera stream set up successfully";
            } catch (error) {
                console.error('Error accessing camera:', error);
                return `Error accessing camera: ${error.message}`;
            }
        };

        window.captureImage = () => {
            if (!videoElement || !videoElement.srcObject) {
                console.error('Video element not set up');
                return "Error: Video element not set up";
            }

            console.log('Video element dimensions:', videoElement.videoWidth, 'x', videoElement.videoHeight);

            if (videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {
                console.error('Video dimensions are zero. The stream may not be ready.');
                return "Error: Video dimensions are zero";
            }

            const canvas = document.createElement('canvas');
            canvas.width = videoElement.videoWidth;
            canvas.height = videoElement.videoHeight;
            const context = canvas.getContext('2d');

            try {
                context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                const dataUrl = canvas.toDataURL('image/jpeg');
                console.log('Image captured. Data URL length:', dataUrl.length);
                return dataUrl;
            } catch (error) {
                console.error('Error capturing image:', error);
                return `Error capturing image: ${error.message}`;
            }
        };
    </script>
</body>
</html>
