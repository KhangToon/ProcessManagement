@page "/user-management"
@attribute [Authorize(Roles = "Admin")]

@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using ProcessManagement.Commons
@using ProcessManagement.Pages.Account_Management.Password_Management
@using ProcessManagement.Pages.Account_Management.User_Management.Models
@using Radzen
@using Radzen.Blazor

@inject IHttpClientFactory HttpClientFactory
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenCard>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="m-0">Users</h3>
        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
            <RadzenButton Text="Reset Password" Icon="lock" ButtonStyle="ButtonStyle.Primary" Click="@OpenResetPasswordDialog" />

            <RadzenButton Text="Add User" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="@OpenCreateUserDialog" />
        </RadzenStack>
    </div>

    <RadzenDataGrid @ref="usersGrid" Data="@users" TItem="UserResponse"
                    AllowSorting="true" AllowFiltering="false" AllowPaging="true" PageSize="10"
                    IsLoading="@isLoading">
        <Columns>
            <RadzenDataGridColumn TItem="UserResponse" Property="Id" Title="STT" Width="150px" TextAlign="TextAlign.Center">
                <Template Context="user">
                    @(users.IndexOf(user) + 1)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserResponse" Property="Username" Title="Username" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="UserResponse" Property="Email" Title="Email" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="UserResponse" Property="FirstName" Title="First Name" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="UserResponse" Property="LastName" Title="Last Name" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="UserResponse" Property="Roles" Title="Roles" TextAlign="TextAlign.Center">
                <Template Context="user">
                    @string.Join(", ", user.Roles)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="UserResponse" Title="Actions" Width="200px" TextAlign="TextAlign.Center">
                <Template Context="user">
                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenButton Style="font-weight: 600px" Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"
                                      Click="@(() => OpenEditUserDialog(user))" />
                        <RadzenButton Style="font-weight: 600px" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Shade=Shade.Lighter
                                      Click="@(() => DeleteUser(user.Id))" />
                    </RadzenStack>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    private List<UserResponse> users = new();
    private RadzenDataGrid<UserResponse> usersGrid = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);
            users = await client.GetFromJsonAsync<List<UserResponse>>("api/user") ?? new();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OpenCreateUserDialog()
    {
        var result = await DialogService.OpenAsync<CreateUserDialog>("Create New User",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "500px", Height = "400px" });

        if (result != null)
        {
            await LoadUsers();
        }
    }

    private async Task OpenEditUserDialog(UserResponse user)
    {
        var result = await DialogService.OpenAsync<EditUserDialog>("Edit User",
            new Dictionary<string, object> { { "User", user } },
            new DialogOptions { Width = "500px", Height = "400px" });

        if (result != null)
        {
            await LoadUsers();
        }
    }

    private async Task DeleteUser(string userId)
    {
        var confirmed = await DialogService.Confirm($"Are you sure you want to delete this user?",
            "Delete User", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed ?? false)
        {
            try
            {
                var client = HttpClientFactory.CreateClient(Common.ServerAPI);
                var response = await client.DeleteAsync($"api/user/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "User deleted successfully");
                    await LoadUsers();
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete user");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to delete user: {ex.Message}");
            }
        }
    }

    private async Task OpenResetPasswordDialog()
    {
        var result = await DialogService.OpenAsync<ManualResetPasswordDialog>("Manual Password Reset",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "500px", Height = "contain" });

        if (result != null)
        {
            await LoadUsers();
        }
    }
}
