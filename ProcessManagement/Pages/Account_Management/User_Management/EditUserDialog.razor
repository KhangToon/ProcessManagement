@using ProcessManagement.Commons
@using ProcessManagement.Pages.Account_Management.User_Management.Models
@using Radzen
@using Radzen.Blazor

@inject IHttpClientFactory HttpClientFactory
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenTemplateForm TItem="UserResponse" Data="@user" Submit="@UpdateUser">
    <div class="row mb-3">
        <div class="col-md-6">
            <RadzenLabel Text="Username" />
            <RadzenTextBox @bind-Value="user.Username" Name="Username" class="w-100" Disabled="true" />
        </div>
        <div class="col-md-6">
            <RadzenLabel Text="Email" />
            <RadzenTextBox @bind-Value="user.Email" Name="Email" class="w-100" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-6">
            <RadzenLabel Text="First Name" />
            <RadzenTextBox @bind-Value="user.FirstName" Name="FirstName" class="w-100" />
        </div>
        <div class="col-md-6">
            <RadzenLabel Text="Last Name" />
            <RadzenTextBox @bind-Value="user.LastName" Name="LastName" class="w-100" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Update" Icon="save" ButtonStyle="ButtonStyle.Primary" />
            <RadzenButton Text="Cancel" Icon="cancel" ButtonStyle="ButtonStyle.Secondary" Click="@CloseDialog" />
        </div>
    </div>
</RadzenTemplateForm>

@code {
    [Parameter] public UserResponse User { get; set; } = new();
    private UserResponse user = new();

    protected override void OnInitialized()
    {
        user = new UserResponse
            {
                Id = User.Id,
                Username = User.Username,
                Email = User.Email,
                FirstName = User.FirstName,
                LastName = User.LastName
            };
    }

    private async Task UpdateUser()
    {
        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);
            var response = await client.PutAsJsonAsync($"api/user/{user.Id}", user);

            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success", "User updated successfully");
                DialogService.Close(true);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update user: {error}");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update user: {ex.Message}");
        }
    }

    private void CloseDialog()
    {
        DialogService.Close(false);
    }
}