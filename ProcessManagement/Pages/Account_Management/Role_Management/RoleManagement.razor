@page "/role-management"
@attribute [Authorize(Roles = "Admin")]

@using System.Net.Http.Json
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using ProcessManagement.Commons
@using Radzen
@using Radzen.Blazor

@inject IHttpClientFactory HttpClientFactory
@inject NotificationService NotificationService
@inject DialogService DialogService

<div class="row mb-4">
    <div class="col">
        <RadzenCard>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="m-0">Roles</h3>
                <div>
                    <RadzenButton Text="Test API Connection" Icon="network_check" ButtonStyle="ButtonStyle.Info" Click="@TestApiConnection" class="me-2" />
                    <RadzenButton Text="Add Role" Icon="add" ButtonStyle="ButtonStyle.Primary" Click="@OpenCreateRoleDialog" />
                </div>
            </div>

            @if (apiError)
            {
                <div class="alert alert-danger">
                    <h4>API Connection Error</h4>
                    <p>Could not connect to the roles API. Please check your API configuration.</p>
                    @if (!string.IsNullOrEmpty(lastErrorMessage))
                    {
                        <p><strong>Error details:</strong> @lastErrorMessage</p>
                    }
                    @if (!string.IsNullOrEmpty(lastResponsePreview))
                    {
                        <div>
                            <strong>Response preview:</strong>
                            <pre style="max-height: 200px; overflow-y: auto; background-color: #f8f9fa; padding: 10px;">@lastResponsePreview</pre>
                        </div>
                    }
                </div>
            }

            <RadzenDataGrid @ref="rolesGrid" Data="@roles" TItem="IdentityRole"
                            AllowSorting="true" AllowFiltering="false" AllowPaging="true" PageSize="10"
                            FilterMode="FilterMode.Advanced" Count="@count"
                            IsLoading="@isLoading">
                <Columns>
                    <RadzenDataGridColumn TItem="IdentityRole" Property="Id" Title="ID" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="IdentityRole" Property="Name" Title="Role Name" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="IdentityRole" Property="NormalizedName" Title="Normalized Name" TextAlign="TextAlign.Center" />
                    <RadzenDataGridColumn TItem="IdentityRole" Title="Actions" TextAlign="TextAlign.Center">
                        <Template Context="role">
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"
                                          Click="@(() => DeleteRole(role.Name ?? string.Empty))" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    </div>
</div>

<div class="row">
    <div class="col">
        <RadzenCard>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h3 class="m-0">Assign Role to User</h3>
            </div>

            <RadzenTemplateForm TItem="AssignRoleModel" Data="@assignRoleModel" Submit="@(async() => await AssignRole())">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <RadzenLabel Text="User ID" />
                        <RadzenTextBox @bind-Value="@assignRoleModel.UserId" Name="UserId" class="w-100" />
                        <RadzenRequiredValidator Component="UserId" Text="User ID is required" />
                    </div>
                    <div class="col-md-6">
                        <RadzenLabel Text="Role" />
                        <RadzenDropDown @bind-Value="@assignRoleModel.RoleName" Data="@roles"
                                        TextProperty="Name" ValueProperty="Name" Name="RoleName" class="w-100" />
                        <RadzenRequiredValidator Component="RoleName" Text="Role is required" />
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <RadzenButton Visible=@(!string.IsNullOrEmpty(assignRoleModel.UserId) && !string.IsNullOrEmpty(assignRoleModel.RoleName)) ButtonType="ButtonType.Submit" Text="Assign Role" Icon="assignment_ind"
                                      ButtonStyle="ButtonStyle.Primary" />
                    </div>
                </div>
            </RadzenTemplateForm>
        </RadzenCard>
    </div>
</div>

@code {
    private List<IdentityRole> roles = new List<IdentityRole>();
    private RadzenDataGrid<IdentityRole> rolesGrid = new();
    private bool isLoading = false;
    private bool apiError = false;
    private int count = 0;
    private AssignRoleModel assignRoleModel = new AssignRoleModel();
    private string lastErrorMessage = string.Empty;
    private string lastResponsePreview = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task TestApiConnection()
    {
        isLoading = true;
        apiError = false;
        lastErrorMessage = string.Empty;
        lastResponsePreview = string.Empty;

        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);

            // Log what URL we're actually calling
            var baseAddress = client.BaseAddress ?? throw new InvalidOperationException("HttpClient BaseAddress is not set.");
            var fullUrl = new Uri(baseAddress, "api/roles").ToString();
            Console.WriteLine($"Testing API connection to: {fullUrl}");

            var response = await client.GetAsync("api/roles");
            var rawContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                apiError = true;
                lastErrorMessage = $"Status code: {(int)response.StatusCode} ({response.StatusCode})";
                lastResponsePreview = rawContent.Length > 500 ? rawContent.Substring(0, 500) + "..." : rawContent;

                NotificationService.Notify(NotificationSeverity.Error, "API Test Failed",
                    $"Failed to connect to API: {lastErrorMessage}", 2000);
            }
            else if (rawContent.StartsWith("<"))
            {
                apiError = true;
                lastErrorMessage = "Received HTML instead of JSON";
                lastResponsePreview = rawContent.Length > 500 ? rawContent.Substring(0, 500) + "..." : rawContent;

                NotificationService.Notify(NotificationSeverity.Error, "API Test Failed",
                    "Received HTML instead of JSON. Check the API endpoint configuration.");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Success, "API Test Successful",
                    "Successfully connected to the roles API");
                lastResponsePreview = rawContent.Length > 500 ? rawContent.Substring(0, 500) + "..." : rawContent;
            }
        }
        catch (Exception ex)
        {
            apiError = true;
            lastErrorMessage = ex.Message;
            NotificationService.Notify(NotificationSeverity.Error, "API Test Failed",
                $"Exception: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadRoles()
    {
        isLoading = true;
        apiError = false;
        lastErrorMessage = string.Empty;
        lastResponsePreview = string.Empty;

        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);

            var response = await client.GetAsync("api/roles");

            var rawContent = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                apiError = true;

                lastErrorMessage = $"Status code: {(int)response.StatusCode} ({response.StatusCode})";

                lastResponsePreview = rawContent.Length > 500 ? rawContent.Substring(0, 500) + "..." : rawContent;

                NotificationService.Notify(NotificationSeverity.Error, "Error", $"API error: {lastErrorMessage}");
            }
            else
            {
                try
                {
                    roles = JsonSerializer.Deserialize<List<IdentityRole>>(rawContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();

                    count = roles.Count;
                }
                catch (JsonException jsonEx)
                {
                    apiError = true;

                    lastErrorMessage = $"JSON deserialization error: {jsonEx.Message}";

                    lastResponsePreview = rawContent.Length > 500 ? rawContent.Substring(0, 500) + "..." : rawContent;

                    NotificationService.Notify(NotificationSeverity.Error, "JSON Error", $"Could not parse JSON: {jsonEx.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            apiError = true;

            lastErrorMessage = ex.Message;

            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Could not load roles: {ex.Message}");
        }
        finally
        {
            isLoading = false;

            StateHasChanged();
        }
    }

    private async Task OpenCreateRoleDialog()
    {
        var result = await DialogService.OpenAsync<CreateRoleDialog>("Create New Role",
            new Dictionary<string, object>(),
            new DialogOptions { Width = "500px", Height = "300px" });

        if (result != null)
        {
            await CreateRole(result.ToString());
        }
    }

    private async Task CreateRole(string roleName)
    {
        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);

            // Fix: Properly format JSON string with double quotes
            var jsonContent = JsonSerializer.Serialize(roleName);

            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await client.PostAsync("api/roles", content);

            var rawContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success",
                    $"Role '{roleName}' created successfully");

                await LoadRoles();
            }
            else
            {
                var preview = rawContent.Length > 200 ? rawContent.Substring(0, 200) + "..." : rawContent;

                NotificationService.Notify(NotificationSeverity.Error, "Error",
                    $"Failed to create role: Status {(int)response.StatusCode} - {response.StatusCode}");

                NotificationService.Notify(NotificationSeverity.Error, "Response Content", preview);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to create role: {ex.Message}");
        }
    }

    private async Task DeleteRole(string roleName)
    {
        if (string.IsNullOrEmpty(roleName))
        {
            return;
        }

        var confirmed = await DialogService.Confirm($"Are you sure you want to delete the role '{roleName}'?",
            "Delete Role", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

        if (confirmed ?? false)
        {
            try
            {
                var client = HttpClientFactory.CreateClient(Common.ServerAPI);

                var response = await client.DeleteAsync($"api/roles/{roleName}");

                var rawContent = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Success",
                        $"Role '{roleName}' deleted successfully");

                    await LoadRoles();
                }
                else
                {
                    var preview = rawContent.Length > 200 ? rawContent.Substring(0, 200) + "..." : rawContent;
                    NotificationService.Notify(NotificationSeverity.Error, "Error",
                        $"Failed to delete role: Status {(int)response.StatusCode} - {response.StatusCode}");

                    NotificationService.Notify(NotificationSeverity.Error, "Response Content", preview);
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error",
                    $"Failed to delete role: {ex.Message}");
            }
        }
    }

    private async Task AssignRole()
    {
        try
        {
            var client = HttpClientFactory.CreateClient(Common.ServerAPI);

            var response = await client.PostAsJsonAsync("api/roles/assign", new
            {
                UserId = assignRoleModel.UserId,
                RoleName = assignRoleModel.RoleName
            });

            var rawContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Success",
                    "Role assigned successfully");

                assignRoleModel = new AssignRoleModel(); // Clear the form
            }
            else
            {
                var preview = rawContent.Length > 200 ? rawContent.Substring(0, 200) + "..." : rawContent;

                NotificationService.Notify(NotificationSeverity.Error, "Error",
                    $"Failed to assign role: Status {(int)response.StatusCode} - {response.StatusCode}");

                NotificationService.Notify(NotificationSeverity.Error, "Response Content", preview);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to assign role: {ex.Message}");
        }
    }

    public class AssignRoleModel
    {
        public string UserId { get; set; } = string.Empty;
        public string RoleName { get; set; } = string.Empty;
    }
}