@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Services
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SQLServerServices SQLServerServices

<RadzenCard class="rz-shadow-5" Variant="Variant.Outlined" Style="width: 100%; height: 100%; padding: 10px;">
    <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="5px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenStack Style="height: contain; width: 100%; padding: 10px;" Gap="5px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenNumeric TValue="int" Placeholder="0" Step="1"
                           Min="1" Max="oldValue"
                           Value="@(newValue)"
                           ValueChanged="@(async (args) =>{newValue = args;})" />
        </RadzenStack>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenButton Text="Lưu" Icon="save" Click="OnSaveChange"
                          ButtonStyle="ButtonStyle.Success" Size="ButtonSize.ExtraSmall" Variant="Variant.Flat" Shade="Shade.Darker" Style="--rz-icon-size: 14px; padding-left: 10px; padding-right: 10px" />

            <RadzenButton Style="width: contain; height: contain; --rz-icon-size: 14px; font-size: 12px; padding-left: 10px; padding-right: 10px" Icon="close" Text="Hủy" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.ExtraSmall" Variant="Variant.Flat" Click="OnCancelChange" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>


@code {
    [Parameter]
    public object CurrentValue { get; set; } = 0;

    private int newValue = 0;
    private int oldValue = 0;

    protected override Task OnInitializedAsync()
    {
        if (int.TryParse(CurrentValue.ToString(), out int sl))
        {
            newValue = sl;
            oldValue = sl;
        }
        return base.OnInitializedAsync();
    }

    private void OnSaveChange()
    {
        DialogService.Close(newValue);
    }

    private void OnCancelChange()
    {
        DialogService.Close(oldValue);
    }
}
