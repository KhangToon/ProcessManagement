@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Commons
@using ProcessManagement.Models
@using System.Text

@inject DialogService DialogService
@inject SQLServerServices SQLServerServices
@inject NotificationService NotificationService

<!--Add new item for product-->
<RadzenCard Variant="Variant.Outlined" Style="height: contain; width: 100%; padding: 10px; margin-top: 15px; overflow: scroll ">
    <RadzenStack AlignItems="AlignItems.Center" Style="width: 100%; height: 100%;">
        <RadzenText Text="Thêm thông tin cho sản phẩm" Style="font-size: 16px; font-weight: 600; height: contain;"></RadzenText>
    </RadzenStack>
    <RadzenStack Orientation="Orientation.Vertical" Gap="15px" Style="width: 100%; height: 100%; padding-left: 15px; padding-top: 10px">
        <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="15px" Orientation="Orientation.Vertical">

            <!--Item Name-->
            <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="width: 100%;" Gap="10px">
                    <RadzenText Text="Tên thông tin" Style="font-size: 16px; font-weight: 600;"></RadzenText>
                    <RadzenTextBox Value="@NewchitietSanpham.PropertyName.Value?.ToString()" ValueChanged="@((args) => { NewchitietSanpham.PropertyName.Value = args; } )"
                                   Style="font-size: 16px; height: contain; border-color: Highlight; border-width: 1px; width: 100% "></RadzenTextBox>
                    <RadzenText Text="*Nhập tên thông tin mới" Style="color: green; font-style: italic; font-size: 13px"></RadzenText>
                </RadzenStack>
            </RadzenCard>

            <!--Item Data Type-->
            <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="width: 100%;" Gap="10px">
                    <RadzenText Text="Kiểu dữ liệu" Style="font-size: 16px; font-weight: 600;"></RadzenText>
                    <RadzenDropDown TValue="string" Value="@Itemtypes.Keys.FirstOrDefault(key => Itemtypes[key].ToString() == NewchitietSanpham.PropertyType.Value?.ToString())"
                                    Data=@Itemtypes.Keys Change="@(args => {NewchitietSanpham.PropertyValue.Value = null; NewchitietSanpham.PropertyType.Value = Itemtypes[args?.ToString()?? string.Empty];})"
                                    Style="width: 100%; border-color: var(--rz-primary-light);">
                    </RadzenDropDown>
                    <RadzenText Text="*Chọn kiểu dữ liệu" Style="color: green; font-style: italic; font-size: 13px"></RadzenText>
                </RadzenStack>
            </RadzenCard>

            <!--Item Value-->
            <RadzenCard Visible="NewchitietSanpham.PropertyType.Value != null" Variant="Variant.Flat" Style="width: 100%; height: contain">
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" Style="width: 100%;" Gap="10px">
                    <RadzenText Text="Gía trị" Style="font-size: 16px; font-weight: 600;"></RadzenText>
                    @if (NewchitietSanpham.PropertyType.Value?.ToString() == "1")
                    {
                        <RadzenTextBox Value="@NewchitietSanpham.PropertyValue.Value?.ToString()"
                                       ValueChanged="@((args) => { NewchitietSanpham.PropertyValue.Value = args; } )"
                                       Style="font-size: 16px; height: contain; border-color: Highlight; border-width: 1px; width: 100% "></RadzenTextBox>
                    }
                    else if (NewchitietSanpham.PropertyType.Value?.ToString() == "2")
                    {
                        <RadzenNumeric TValue="int" Value="@int.Parse(NewchitietSanpham.PropertyValue.Value?.ToString()?? "0")" Min="0" Max="100000"
                                       ValueChanged="@((args) => { NewchitietSanpham.PropertyValue.Value = args; })"
                                       Style="font-size: 16px; height: contain; border-color: Highlight; border-width: 1px; width: 100%" />
                    }
                    else if (NewchitietSanpham.PropertyType.Value?.ToString() == "3")
                    {
                        <RadzenDatePicker TValue="DateTime"
                                          ValueChanged="@((args) => { NewchitietSanpham.PropertyValue.Value = args; })"
                                          ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" AllowInput="false"
                                          Name="DatePicker" Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                    }
                    <RadzenText Text="*Nhập giá trị" Style="color: green; font-style: italic; font-size: 13px"></RadzenText>
                </RadzenStack>
            </RadzenCard>

        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="width: 100%; height: contain">
            <RadzenButton Style="width: contain; background-color: darkgreen" Icon="save"
                          Click=@(() => OnSubmitNewItems(NewchitietSanpham)) Text="Thêm" Size="ButtonSize.Small"
                          ButtonStyle="ButtonStyle.Success" Shade="Shade.Light" Variant="Variant.Flat">
            </RadzenButton>
            <RadzenButton Style="width: contain; background-color: darkred " Icon="close"
                          Click=@(() => { DialogService.Close(ProductID); }) Text="Thoát" Size="ButtonSize.Small"
                          ButtonStyle="ButtonStyle.Danger" Shade="Shade.Dark" Variant="Variant.Flat">
            </RadzenButton>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {

    [Parameter]
    public int ProductID { get; set; }

    [Parameter]
    public string? Tensanpham { get; set; }

    private SanPham.ChitietSanPham NewchitietSanpham = new();

    private Dictionary<string, int> Itemtypes = new Dictionary<string, int>() { { "Ký tự", 1 }, { "Số lượng", 2 }, { "Ngày tháng", 3 } };

    protected async override Task OnInitializedAsync()
    {
        NewchitietSanpham.SPID.Value = ProductID;

        await base.OnInitializedAsync();
    }

    private async Task OnSubmitNewItems(SanPham.ChitietSanPham? chitietSanpham)
    {
        foreach (var property in NewchitietSanpham.GetPropertiesValues())
        {
            if (property.Name != Common.CTSPID && property.Name != Common.SPID)
            {
                if (property.Value == null)
                {
                    ShowNotification("Hãy nhập đầy đủ thông tin!", NotificationSeverity.Warning, 2000);

                    return;
                }
            }
        }

        bool? comfirm = await DialogService.Confirm("Thêm thông tin cho sản phẩm này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (comfirm.Value)
        {
            (int ctspid, string checkerr) = SQLServerServices.CheckNewChitietSanpham(NewchitietSanpham);

            if (ctspid > 0 || ctspid == -1)
            {
                await DialogService.Alert($"Thông tin này đã tồn tại!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }
            else if (checkerr != string.Empty)
            {
                await DialogService.Alert($"{checkerr}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }

            (int result, string error) = SQLServerServices.InsertNewChitietSanPham(NewchitietSanpham);

            if (result > 0)
            {
                ShowNotification("Thêm mới thông tin thành công!", NotificationSeverity.Success, 2000);

                NewchitietSanpham = new();

                NewchitietSanpham.SPID.Value = ProductID;
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };
        NotificationService.Notify(notify);
    }
}
