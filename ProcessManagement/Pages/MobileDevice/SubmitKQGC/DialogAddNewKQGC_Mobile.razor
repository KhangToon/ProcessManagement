@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.MAYMOC
@using ProcessManagement.Models.NHANVIEN
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models.KHSXs

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 10px;
        font-weight: 600;
        font-style: italic;
    }

    /* Style for dropdown placeholder (auto apply)*/
    .rz-dropdown:not(.rz-state-filled) .rz-inputtext {
        color: #888888 !important;
        font-size: 10px !important;
        font-weight: 600 !important;
        font-style: italic !important;
    }

    .rz-numeric.custom-numeric input {
        font-size: 10px !important;
        font-weight: 600 !important;
    }

    .rz-datepicker.custom-datepicker input {
        font-size: 10px !important;
        font-weight: 600 !important;
    }

    .custom-datepicker input[type="text"]::placeholder {
        font-size: 10px;
        font-style: italic;
    }
</style>

<RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0; padding: 0;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
    @{
        List<Propertyy> properties = newKetQuaGC.GetPropertiesValues().Where(pro => pro.AlowDisplay == true).ToList();
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px; padding-top: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenText Text="Nhập thông tin kết quả gia công" Style="color: red; font-size: 14px; font-weight: 600; font-style: italic"></RadzenText>
        </RadzenStack>
        <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; overflow-y: scroll">
            <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding: 0">
                <RadzenStack Style="height: 100%; width: 100%; padding: 0;" Gap="0" Orientation="Orientation.Vertical">
                    @{
                        foreach (var property in properties)
                        {
                            string displayName = property.DisplayName;

                            if (property.DBName == KetQuaGC.KQGCDBName.SPID || property.DBName == KetQuaGC.KQGCDBName.MMID || property.DBName == KetQuaGC.KQGCDBName.NCID || property.DBName == KetQuaGC.KQGCDBName.MaQuanLyLot)
                            {
                                <RadzenStack Gap="5px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                    <RadzenStack Style="width: 100%;">
                                        <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 12px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                            <RadzenStack Style="width: 85%;">
                                                <RadzenDropDown AllowClear="true" Disabled="@((property.DBName != KetQuaGC.KQGCDBName.NCID && string.IsNullOrEmpty(newKetQuaGC.NCID.Value?.ToString()) || property.DBName == KetQuaGC.KQGCDBName.SPID))"
                                                                Style="width: 100%; height: contain; font-size: 12px; font-weight: 600; background-color: white"
                                                                Placeholder="@($" * chọn {displayName}")"
                                                                AllowVirtualization="true"
                                                                AllowFiltering="true"
                                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                FilterOperator="StringFilterOperator.Contains"
                                                                AllowSelectAll="true"
                                                                TValue="KeyValuePair<string, string>"
                                                                Data="@(ComboboxDSachKeys(property.DBName))"
                                                                SelectedItem="@(ITemSelecteds[property.DBName])"
                                                                Value="@(ITemSelecteds[property.DBName])" SearchTextChanged="@((args) => OnComboboxInputTextChange(property.DBName, args))"
                                                                ValueChanged="@((KeyValuePair<string, string> args) => OnComboboxDSachKeysSelectedChanged(new List<KeyValuePair<string, string>>{args}, property))">
                                                    <!--Custom style off dropdownbox items-->
                                                    <Template>
                                                        <span style="font-size: 12px; font-weight: 500; font-style: normal; color: black">@($"{context.Value}")</span>
                                                    </Template>

                                                    <!--Custom style off dropdownbox selected value items-->
                                                    <ValueTemplate>
                                                        <span style="font-size: 12px; font-weight: 500; font-style: normal; color: black">@($"{context.Value}")</span>
                                                    </ValueTemplate>
                                                </RadzenDropDown>
                                            </RadzenStack>
                                            <RadzenStack Style="width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                <RadzenAlert Visible="@(!property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            }
                            else if (property.DBName == KetQuaGC.KQGCDBName.NVIDs || property.DBName == KetQuaGC.KQGCDBName.NGIDs) // Danh sach Nhan vien thuc hien // Danh sach NGType
                            {
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                    <RadzenStack Style="width: 100%;">
                                        <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 12px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                            <RadzenStack Style="width: 85%;">
                                                <RadzenDropDown AllowClear="true" Disabled="@property.IsDisable"
                                                                Style="width: 100%; height: contain; font-size: 12px; font-weight: 600; color: black; background-color: white"
                                                                Placeholder="@($" * chọn {displayName}")"
                                                                AllowVirtualization="true"
                                                                AllowFiltering="true"
                                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                FilterOperator="StringFilterOperator.Contains"
                                                                AllowSelectAll="true" Multiple="true"
                                                                TValue="IEnumerable<KeyValuePair<string, string>>"
                                                                Data="@(ComboboxDSachKeys(property.DBName))"
                                                                SelectedItem="@((property.DBName == KetQuaGC.KQGCDBName.NVIDs)? NhanviensSelected : NGTypesSelected)"
                                                                Value="@((property.DBName == KetQuaGC.KQGCDBName.NVIDs)? NhanviensSelected : NGTypesSelected)"
                                                                ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxDSachKeysSelectedChanged(args, property))">

                                                    <!--Custom style off dropdownbox items-->
                                                    <Template Context="item">
                                                        <span style="color: black; font-size: 12px; font-weight: 500">
                                                            @item.Value
                                                        </span>
                                                    </Template>

                                                    <!--Custom style off dropdownbox selected value items-->
                                                    <ValueTemplate>
                                                        <span style="font-size: 12px; font-weight: 500; font-style: normal; color: black">
                                                            @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                        </span>
                                                    </ValueTemplate>

                                                </RadzenDropDown>
                                            </RadzenStack>
                                            <RadzenStack Visible="@(!property.IsDisable)" Style="width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                <RadzenAlert Visible="@(!property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            }
                            else if (property.DBName == KetQuaGC.KQGCDBName.CaLamViec)
                            {
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                    <RadzenStack Style="width: 100%;">
                                        <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 12px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                            <RadzenStack Style="width: 85%;">
                                                <RadzenDropDown AllowClear="true" Disabled="@(string.IsNullOrEmpty(newKetQuaGC.NCID.Value?.ToString()))"
                                                                Style="width: 100%; height: contain; font-size: 12px; font-weight: 600; color: black; background-color: white"
                                                                Placeholder="@($" * chọn {displayName}")"
                                                                TValue="string" Data="@(new List<string>(){"Ngày", "Đêm"})"
                                                                ValueChanged="@(async (args) =>{newKetQuaGC.CaLamViec.Value = args;await DefaultThongTinKetQuaGC_ValueIsOK(property);})">
                                                    <!--Custom style off dropdownbox items-->
                                                    <Template>
                                                        <span style="font-size: 12px; font-weight: 500; font-style: normal; color: black">@($"{context}")</span>
                                                    </Template>

                                                    <!--Custom style off dropdownbox selected value items-->
                                                    <ValueTemplate>
                                                        <span style="font-size: 12px; font-weight: 500; font-style: normal; color: black">@($"{context}")</span>
                                                    </ValueTemplate>
                                                </RadzenDropDown>
                                            </RadzenStack>
                                            <RadzenStack Style="width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                <RadzenAlert Visible="@(!property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            }
                            else
                            {
                                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                    <RadzenStack Style="width: 100%;">
                                        <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 12px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                            @{
                                                if (property.Type == typeof(string)) // kieu ky tu
                                                {
                                                    <RadzenStack Style="width: 85%;">
                                                        <RadzenTextBox class="custom-placeholder" Placeholder="@($" * nhập {displayName}")" Value="@property.Value?.ToString()" Style="font-size: 12px; height: contain; border-width: 1px; color: black; font-weight: 500"
                                                                       @oninput="@(async (args) => { property.Value = args.Value; await DefaultThongTinKetQuaGC_ValueIsOK(property);})">
                                                        </RadzenTextBox>
                                                    </RadzenStack>
                                                }
                                                else if (property.Type == typeof(double)) // Kieu double
                                                {
                                                    <RadzenStack Style="width: 85%;">
                                                        <RadzenNumeric class="custom-numeric" TValue="double" Placeholder="0.0" Step="0.5"
                                                                       Min="0" Max="999999"
                                                                       ValueChanged="@(async (args) =>
                                                                               {
                                                                                    property.Value = args;

                                                                                    await DefaultThongTinKetQuaGC_ValueIsOK(property);
                                                                               })" />
                                                    </RadzenStack>
                                                }
                                                else if (property.Type == typeof(int)) // Kieu int
                                                {
                                                    int max = 999999;

                                                    if (property.DBName == KetQuaGC.KQGCDBName.SLOK || property.DBName == KetQuaGC.KQGCDBName.SLperLOT)
                                                    {
                                                        max = (int.TryParse(newKetQuaGC.SLperLOT.Value?.ToString(), out int num) ? num : 999999);
                                                    }
                                                    else if (property.DBName == KetQuaGC.KQGCDBName.SLNG)
                                                    {
                                                        _ = int.TryParse(newKetQuaGC.SLperLOT.Value?.ToString(), out int sllot) ? sllot : 0;
                                                        _ = int.TryParse(newKetQuaGC.SLOK.Value?.ToString(), out int slok) ? slok : 0;
                                                        max = sllot - slok;
                                                    }

                                                    <RadzenStack Style="width: 85%;">
                                                        <RadzenNumeric Disabled="@(property.DBName == KetQuaGC.KQGCDBName.SLperLOT)" class="custom-numeric" TValue="int" Placeholder="0" Step="1"
                                                                       Min="0" Max="max"
                                                                       Value="@((int.TryParse(property.Value?.ToString(), out int num)? num : 0))"
                                                                       ValueChanged="@(async (args) =>
                                                                               {
                                                                                    property.Value = args;

                                                                                    if (property.DBName == KetQuaGC.KQGCDBName.SLOK)
                                                                                    {
                                                                                        _ = int.TryParse(newKetQuaGC.SLperLOT.Value?.ToString(), out int total) ? total : 0;
                                                                                        _ = int.TryParse(newKetQuaGC.SLOK.Value?.ToString(), out int slok) ? slok : 0;
                                                                                        int slng = total - slok;

                                                                                        int maxng = (slng > 0 && slok > 0) ? slng : 0;

                                                                                        newKetQuaGC.SLNG.Value = maxng;

                                                                                        newKetQuaGC.NGIDs.IsDisable = (maxng == 0);
                                                                                        newKetQuaGC.NGIDs.Value = null;
                                                                                        NGTypesSelected = null;

                                                                                        await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLNG);
                                                                                        await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.NGIDs);
                                                                                    }
                                                                                    else if (property.DBName == KetQuaGC.KQGCDBName.SLNG)
                                                                                    {
                                                                                        newKetQuaGC.NGIDs.IsDisable = property.Value.Equals(0);
                                                                                        newKetQuaGC.NGIDs.Value = null;
                                                                                        NGTypesSelected = null;

                                                                                        await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.NGIDs);
                                                                                    }

                                                                                    await DefaultThongTinKetQuaGC_ValueIsOK(property);
                                                                               })" />
                                                    </RadzenStack>
                                                }
                                                else if (property.Type == typeof(DateTime)) // kieu ngay thang
                                                {
                                                    bool ishaveValueOfday = DateTime.TryParse(property.Value?.ToString(), out DateTime selectday);
                                                    if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);
                                                    <RadzenStack Style="width: 85%;">
                                                        <RadzenDatePicker class="custom-datepicker custom-datepicker" Placeholder="@($"* nhập {displayName}")"
                                                                          TValue="DateTime" Value="selectday" AllowClear="true"
                                                                          Change="@(async (args) =>
                                                                                    {
                                                                                        if (args != null)
                                                                                        {
                                                                                            DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                            property.Value = value;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            property.Value = string.Empty;
                                                                                        }
                                                                                        await DefaultThongTinKetQuaGC_ValueIsOK(property);
                                                                                    })"
                                                                          ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyddMM" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                                                          Style="height: contain;">
                                                        </RadzenDatePicker>
                                                    </RadzenStack>
                                                }

                                                <RadzenStack Style="width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                    <RadzenAlert Visible="@(!property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                    <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 12px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                </RadzenStack>
                                            }
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            }
                        }
                    }
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Disabled="@(!IsAllValueThongTinOK(properties))" Click="@(() => OnAddNewKetQuaGC())" Style="padding: 5px; width: contain; height: contain; font-size: 12px" Icon="check" Text="Xác nhận thêm" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Size="ButtonSize.ExtraSmall" Variant="Variant.Filled" />
            <RadzenButton Style="width: contain; height: contain; font-size: 12px; padding: 5px" Icon="close" Text="Thoát" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" Variant="Variant.Flat" Click="@(() => OnCancelAddnewKetQuaGC())" />
        </RadzenStack>
    }
</RadzenStack>

@code {
    [Parameter]
    public int KHSXID { get; set; } = 0; // KHSXID
    [Parameter]
    public int SPID { get; set; }// ID San pham
                                 // [Parameter]
                                 // public int CDID { get; set; } // ID Cong doan
                                 // [Parameter]
                                 // public int MMID { get; set; } // ID May moc

    private KetQuaGC newKetQuaGC = new();
    private List<SanPham> dsachSanPhams = new();
    private List<NguyenCong> dsachNguyenCongs = new();
    private List<MayMoc> dsachMayMocs = new();
    private List<NhanVien> dsachNhanViens = new();
    private List<NGType> dsachNGTypes = new();
    private List<KHSX_LOT> dsachMaQLyLots = new();

    // Selected item changed
    private IEnumerable<KeyValuePair<string, string>>? NhanviensSelected;
    private IEnumerable<KeyValuePair<string, string>>? NGTypesSelected;
    private Dictionary<string, KeyValuePair<string, string>?> ITemSelecteds = new Dictionary<string, KeyValuePair<string, string>?>()
    {{KetQuaGC.KQGCDBName.SPID, null}, {KetQuaGC.KQGCDBName.MMID, null}, {KetQuaGC.KQGCDBName.NCID, null}, {KetQuaGC.KQGCDBName.MaQuanLyLot, null } };

    protected override async Task OnInitializedAsync()
    {
        newKetQuaGC.SubMitDay.Value = DateTime.Now;
        newKetQuaGC.SLNG.Value = 0;
        newKetQuaGC.NGIDs.IsDisable = true;
        NGTypesSelected = null;

        await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SubMitDay);
        await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLNG);

        await base.OnInitializedAsync();
    }

    #region Combobox

    // Count element of dynamic data
    private int CountElements(dynamic data)
    {
        if (data is string str)
        {
            return str.Length; // Count characters in a string
        }
        else if (data is ICollection<NhanVien> collection)
        {
            return collection.Count; // Count elements in a collection
        }
        else
        {
            return 0;
        }
    }

    // Get list Keys
    private IEnumerable<KeyValuePair<string, string>> ComboboxDSachKeys(string? colName)
    {
        IEnumerable<KeyValuePair<string, string>> results = new List<KeyValuePair<string, string>>();

        if (colName == KetQuaGC.KQGCDBName.SPID)
        {
            dsachSanPhams = SQLServerServices.GetDanhSachSanPham_ID_Name();
            results = dsachSanPhams
                    .Where(item => item.SP_SPID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.SP_SPID.Value?.ToString() ?? string.Empty,
                        $"{item.SP_MaSP.Value?.ToString()?.Trim()} ({item.SP_MaSP.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();

            if (newKetQuaGC.SPID.Value != null)
            {
                // Gan target SPID cho selected SPID
                KeyValuePair<string, string> targetrs = results.FirstOrDefault(rs => rs.Key == newKetQuaGC.SPID.Value.ToString());

                if (!string.IsNullOrEmpty(targetrs.Value))
                {
                    ITemSelecteds[colName] = targetrs;
                }
                else newKetQuaGC.SPID.Value = null;
            }
        }
        else if (colName == KetQuaGC.KQGCDBName.NCID)
        {
            dsachNguyenCongs = SQLServerServices.GetListNguyenCongs();
            results = dsachNguyenCongs
                    .Where(item => item.NCID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.NCID.Value?.ToString() ?? string.Empty,
                        item.TenNguyenCong.Value?.ToString()?.Trim() ?? string.Empty
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == KetQuaGC.KQGCDBName.MMID)
        {
            dsachMayMocs = SQLServerServices.GetDanhSachMayMoc();
            results = dsachMayMocs
                    .Where(item => item.MMID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.MMID.Value?.ToString() ?? string.Empty,
                        $"{item.MaMay.Value?.ToString()?.Trim()} ({item.TenMay.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == KetQuaGC.KQGCDBName.MaQuanLyLot)
        {
            Dictionary<string, object?> par = new Dictionary<string, object?>() { { KHSX_LOT.DBName.KHSXID, KHSXID } };
            (dsachMaQLyLots, string errorLot) = SQLServerServices.GetListLOT_khsx(par, false);

            results = dsachMaQLyLots
                    .Where(item => item.KHSXLOTID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.KHSXLOTID.Value?.ToString() ?? string.Empty,
                        $"{item.MaQuanLyLot.Value?.ToString()?.Trim()} (số lượng: {item.SLLOT.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .DistinctBy(x => x.Value);
        }
        else if (colName == KetQuaGC.KQGCDBName.NVIDs)
        {
            dsachNhanViens = SQLServerServices.GetDanhSachNhanVien();
            results = dsachNhanViens
                    .Where(item => item.NVID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.NVID.Value?.ToString() ?? string.Empty,
                        $"{item.MaNhanVien.Value?.ToString()?.Trim()} ({item.GetThongTinNhanVienByName("Tên nhân viên").GiaTri.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == KetQuaGC.KQGCDBName.NGIDs)
        {
            (dsachNGTypes, string errorMess) = SQLServerServices.GetDanhSachNGType();

            results = dsachNGTypes
                    .Where(item => item.NGID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(item.NGID.Value?.ToString() ?? string.Empty, $"{item.NoiDungNG.Value?.ToString()?.Trim()}"))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        return results;
    }

    private string GetMaKHSXbyMaQuanLyLot(string maLOT)
    {
        string maKHSX = string.Empty;

        string[] items = maLOT.Trim().Split("-");

        if (items != null && items.Any())
        {
            maKHSX = items[0].Trim();
        }

        return maKHSX;
    }

    private async Task OnComboboxInputTextChange(string proName, object? args) // using for scan QR Maquanly autobinding
    {
        if (proName == KetQuaGC.KQGCDBName.MaQuanLyLot && args != null)
        {
            // Split maLOT get maKHSX
            string targetMaKHSX = GetMaKHSXbyMaQuanLyLot(args.ToString() ?? string.Empty);

            int targetKHSXID = SQLServerServices.GetKHSXIDbyMaKHSX(targetMaKHSX);

            (var dsLots, string errorreturn) = SQLServerServices.GetListLOT_khsx(new Dictionary<string, object?>() { { KetQuaGC.KQGCDBName.KHSXID, targetKHSXID } }, false);

            if (dsLots != null && dsLots.Count() > 0)
            {
                dsachMaQLyLots = dsLots;
                KHSXID = targetKHSXID;
            }

            if (dsLots?.Count > 0 && dsLots.Any(lot => lot.MaQuanLyLot.Value?.ToString() == args.ToString()))
            {
                newKetQuaGC.KHSXID.Value = KHSXID;

                // Asign target SPham
                SPID = SQLServerServices.GetSPIDbyMaKHSX(targetMaKHSX);

                if (SPID > 0)
                {
                    var targetsp = dsachSanPhams.FirstOrDefault(sp => sp.SP_SPID.Value?.ToString()?.Trim() == SPID.ToString());

                    if (targetsp != null)
                    {
                        ITemSelecteds[KetQuaGC.KQGCDBName.SPID] = new KeyValuePair<string, string>(targetsp.SP_SPID.Value?.ToString() ?? string.Empty,
                            $"{targetsp.SP_MaSP.Value?.ToString()?.Trim()} ({targetsp.SP_MaSP.Value?.ToString()?.Trim()})");

                        newKetQuaGC.SPID.Value = SPID;
                    }
                    else { ITemSelecteds[KetQuaGC.KQGCDBName.SPID] = null; newKetQuaGC.SPID.Value = null; };
                }



                // Asign target MaquanlyLot
                var targetLot = dsachMaQLyLots.FirstOrDefault(lot => lot.MaQuanLyLot.Value?.ToString()?.Trim() == args.ToString()?.Trim());

                // Asign sluong OK/NG last Result
                KHSX_LOT preRSultLotTargetCD = new();
                KHSX_LOT curRSultLotinTargetCD = new();
                KHSX_LOT nextRSultLotTargetCD = new();

                List<KHSX_LOT> dsanhResultofLotAllCdoan = dsachMaQLyLots.Where(lot => lot.MaQuanLyLot.Value?.ToString()?.Trim() == args.ToString()?.Trim()).ToList();

                curRSultLotinTargetCD = dsanhResultofLotAllCdoan.FirstOrDefault(lot => lot.NCID.Value?.ToString()?.Trim() == newKetQuaGC.NCID.Value?.ToString()?.Trim()) ?? new();

                // SL ok + ng da submit cua curRSultLotinTargetCD
                _ = int.TryParse(curRSultLotinTargetCD.SLOKsubmited.Value?.ToString(), out int curSLOKsubmited) ? curSLOKsubmited : 0;
                _ = int.TryParse(curRSultLotinTargetCD.SLNGsubmited.Value?.ToString(), out int curSLNGsubmited) ? curSLNGsubmited : 0;

                int indexcurrentCD = dsanhResultofLotAllCdoan.IndexOf(curRSultLotinTargetCD);

                preRSultLotTargetCD = Common.GetElementOrNew(dsanhResultofLotAllCdoan, indexcurrentCD - 1);

                // SL ok + ng da submit cua preRSultLotTargetCD
                _ = int.TryParse(preRSultLotTargetCD.SLOKsubmited.Value?.ToString(), out int preSLOKsubmited) ? preSLOKsubmited : 0;
                _ = int.TryParse(preRSultLotTargetCD.SLNGsubmited.Value?.ToString(), out int preSLNGsubmited) ? preSLNGsubmited : 0;

                //nextRSultLotTargetCD = Common.GetElementOrNew(dsanhResultofLotAllCdoan, indexcurrentCD + 1);

                _ = int.TryParse(targetLot?.SLLOT.Value?.ToString(), out int slperlotBase) ? slperlotBase : 0;

                if (!string.IsNullOrEmpty(preRSultLotTargetCD.KHSXLOTID.Value?.ToString()))
                {
                    // New pre != null --> gan slpreok cho sllimit current
                    newKetQuaGC.SLperLOT.Value = preSLOKsubmited - (curSLOKsubmited + curSLNGsubmited); // Tru so luong da submit cua currentlot
                }
                else newKetQuaGC.SLperLOT.Value = slperlotBase - (curSLOKsubmited + curSLNGsubmited); // Tru so luong da submit cua currentlot

                //

                if (targetLot != null)
                {
                    ITemSelecteds[proName] = new KeyValuePair<string, string>(targetLot.KHSXLOTID.Value?.ToString() ?? string.Empty, $"{targetLot.MaQuanLyLot.Value?.ToString()?.Trim()} (số lượng: {targetLot.SLLOT.Value?.ToString()?.Trim()})");

                    //newKetQuaGC.SLperLOT.Value = targetLot.SLLOT.Value;
                    newKetQuaGC.MaQuanLyLot.Value = targetLot.MaQuanLyLot.Value;
                    newKetQuaGC.SLOK.Value = 0; // reset SLOK
                    newKetQuaGC.SLNG.Value = 0; // reset SLNG
                }
                else
                {
                    ITemSelecteds[proName] = null; // reset selected value

                    newKetQuaGC.MaQuanLyLot.Value = null; // reset MaQuanLyLot
                    newKetQuaGC.SLperLOT.Value = null; // reset SLperLOT
                    newKetQuaGC.SLOK.Value = null; // reset SLOK
                    newKetQuaGC.SLNG.Value = 0; // reset SLNG
                }
            }
            else
            {
                dsachMaQLyLots = new();
                KHSXID = 0;
                newKetQuaGC.KHSXID.Value = null;
                newKetQuaGC.MaQuanLyLot.Value = null;
                ITemSelecteds[KetQuaGC.KQGCDBName.SPID] = null;
                newKetQuaGC.SPID.Value = null;

                ITemSelecteds[proName] = null; // reset selected value
                newKetQuaGC.SLperLOT.Value = null; // reset SLperLOT
                newKetQuaGC.SLOK.Value = null; // reset SLOK
                newKetQuaGC.SLNG.Value = null; // reset SLNG
            }


            // Update checking value UI
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLOK);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLNG);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLperLOT);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.MaQuanLyLot);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SPID);
        }
    }

    private async Task OnComboboxDSachKeysSelectedChanged(IEnumerable<KeyValuePair<string, string>> selectedValues, Propertyy propertyy)
    {
        if (propertyy.DBName == KetQuaGC.KQGCDBName.SPID)
        {
            var targetItem = dsachSanPhams.FirstOrDefault(sp => sp.SP_SPID.Value?.ToString()?.Trim() == selectedValues.FirstOrDefault().Key);

            if (targetItem != null)
            {
                ITemSelecteds[propertyy.DBName] = selectedValues.FirstOrDefault();

                newKetQuaGC.SPID.Value = targetItem.SP_SPID.Value;
            }
            else newKetQuaGC.SPID.Value = null;
        }
        else if (propertyy.DBName == KetQuaGC.KQGCDBName.NCID)
        {
            var targetItem = dsachNguyenCongs.FirstOrDefault(sp => sp.NCID.Value?.ToString()?.Trim() == selectedValues.FirstOrDefault().Key);

            if (targetItem != null)
            {
                ITemSelecteds[propertyy.DBName] = selectedValues.FirstOrDefault();

                newKetQuaGC.NCID.Value = targetItem.NCID.Value;
            }
            else newKetQuaGC.NCID.Value = null;
        }
        else if (propertyy.DBName == KetQuaGC.KQGCDBName.MMID)
        {
            var targetItem = dsachMayMocs.FirstOrDefault(sp => sp.MMID.Value?.ToString()?.Trim() == selectedValues.FirstOrDefault().Key);

            if (targetItem != null)
            {
                ITemSelecteds[propertyy.DBName] = selectedValues.FirstOrDefault();

                newKetQuaGC.MMID.Value = targetItem.MMID.Value;
            }
            else newKetQuaGC.MMID.Value = null;
        }
        else if (propertyy.DBName == KetQuaGC.KQGCDBName.MaQuanLyLot)
        {
            await Task.Delay(100);

            var targetItem = dsachMaQLyLots.FirstOrDefault(lot => lot.KHSXLOTID.Value?.ToString()?.Trim() == selectedValues.FirstOrDefault().Key);

            //Asign sluong OK/NG last Result
            KHSX_LOT preRSultLotTargetCD = new();
            KHSX_LOT curRSultLotinTargetCD = new();

            List<KHSX_LOT> dsanhResultofLotAllCdoan = dsachMaQLyLots.Where(lot => lot.MaQuanLyLot.Value?.ToString()?.Trim() == targetItem?.MaQuanLyLot.Value?.ToString()?.Trim()).ToList();

            curRSultLotinTargetCD = dsanhResultofLotAllCdoan.FirstOrDefault(lot => lot.NCID.Value?.ToString()?.Trim() == newKetQuaGC.NCID.Value?.ToString()?.Trim()) ?? new();

            // SL ok + ng da submit cua curRSultLotinTargetCD
            _ = int.TryParse(curRSultLotinTargetCD.SLOKsubmited.Value?.ToString(), out int curSLOKsubmited) ? curSLOKsubmited : 0;
            _ = int.TryParse(curRSultLotinTargetCD.SLNGsubmited.Value?.ToString(), out int curSLNGsubmited) ? curSLNGsubmited : 0;

            int indexcurrentCD = dsanhResultofLotAllCdoan.IndexOf(curRSultLotinTargetCD);

            preRSultLotTargetCD = Common.GetElementOrNew(dsanhResultofLotAllCdoan, indexcurrentCD - 1);

            // SL ok + ng da submit cua preRSultLotTargetCD
            _ = int.TryParse(preRSultLotTargetCD.SLOKsubmited.Value?.ToString(), out int preSLOKsubmited) ? preSLOKsubmited : 0;
            _ = int.TryParse(preRSultLotTargetCD.SLNGsubmited.Value?.ToString(), out int preSLNGsubmited) ? preSLNGsubmited : 0;
            _ = int.TryParse(targetItem?.SLLOT.Value?.ToString(), out int slperlotBase) ? slperlotBase : 0;

            if (!string.IsNullOrEmpty(preRSultLotTargetCD.KHSXLOTID.Value?.ToString()))
            {
                // New pre != null --> gan slpreok cho sllimit current
                newKetQuaGC.SLperLOT.Value = preSLOKsubmited - (curSLOKsubmited + curSLNGsubmited); // Tru so luong da submit cua currentlot
            }
            else newKetQuaGC.SLperLOT.Value = slperlotBase - (curSLOKsubmited + curSLNGsubmited); // Tru so luong da submit cua currentlot

            //

            if (targetItem != null)
            {
                // Asign selected value
                ITemSelecteds[propertyy.DBName] = selectedValues.FirstOrDefault();
                // Asign slperlot
                //newKetQuaGC.SLperLOT.Value = targetItem.SLLOT.Value;
                newKetQuaGC.MaQuanLyLot.Value = targetItem.MaQuanLyLot.Value;
            }
            else
            {
                newKetQuaGC.MaQuanLyLot.Value = null;
                newKetQuaGC.SLperLOT.Value = null;
                newKetQuaGC.SLOK.Value = null;
                newKetQuaGC.SLNG.Value = null;
            }

            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLOK);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLNG);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.SLperLOT);
            await DefaultThongTinKetQuaGC_ValueIsOK(newKetQuaGC.MaQuanLyLot);
        }
        else if (propertyy.DBName == KetQuaGC.KQGCDBName.NVIDs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selectedNvids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = dsachNhanViens.Where(nv =>
                {
                    var nvid = nv.NVID.Value?.ToString() ?? string.Empty;
                    return selectedNvids.Contains(nvid);
                });

                if (targetItems.Any())
                {
                    NhanviensSelected = selectedValues.ToList();

                    newKetQuaGC.DSNhanVien.AddRange(targetItems);

                    newKetQuaGC.NVIDs.Value = string.Join(",", targetItems
                                            .Select(nv => nv.NVID.Value?.ToString()?.Trim() ?? string.Empty)
                                            .Where(id => !string.IsNullOrEmpty(id)));
                }
                else newKetQuaGC.NVIDs.Value = null;
            }
            else
            {
                NhanviensSelected = null;

                newKetQuaGC.DSNhanVien = new();
                newKetQuaGC.NVIDs.Value = null;
            }
        }
        else if (propertyy.DBName == KetQuaGC.KQGCDBName.NGIDs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selectedNGTypeids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = dsachNGTypes.Where(ng =>
                {
                    var ngid = ng.NGID.Value?.ToString() ?? string.Empty;
                    return selectedNGTypeids.Contains(ngid);
                });

                if (targetItems.Any())
                {
                    NGTypesSelected = selectedValues.ToList();

                    newKetQuaGC.DSNGType.AddRange(targetItems);

                    newKetQuaGC.NGIDs.Value = string.Join(",", targetItems
                                            .Select(ng => ng.NGID.Value?.ToString()?.Trim() ?? string.Empty)
                                            .Where(id => !string.IsNullOrEmpty(id)));
                }
                else newKetQuaGC.NGIDs.Value = null;
            }
            else
            {
                NGTypesSelected = null;

                newKetQuaGC.DSNGType = new();
                newKetQuaGC.NGIDs.Value = null;
            }
        }

        await DefaultThongTinKetQuaGC_ValueIsOK(propertyy);
    }

    #endregion

    // Kiem tra thong tin mac dinh
    private async Task DefaultThongTinKetQuaGC_ValueIsOK(Propertyy propertyy)
    {
        await Task.Run(() =>
        {
            string value = propertyy.Value?.ToString() ?? string.Empty;
            string? dbname = propertyy.DBName ?? string.Empty;
            string? displayName = propertyy.DisplayName ?? string.Empty;

            propertyy.IsCheckValueOK = true;
            propertyy.NotifyMess = $"Giá trị hợp lệ";

            foreach (var erorrtype in propertyy.CheckErrors)
            {
                if (erorrtype == Propertyy.ErrType.NotEmptyValue)
                {
                    if (string.IsNullOrEmpty(value.Trim()))
                    {
                        propertyy.IsCheckValueOK = false;
                        propertyy.NotifyMess = $"{displayName} không được để trống";
                        return;
                    }
                }
                else if (erorrtype == Propertyy.ErrType.NotAllowEqualsZero)
                {
                    if (propertyy.Type == typeof(int))
                    {
                        if ((int.TryParse(value, out int sl) ? sl : -1) <= 0)
                        {
                            propertyy.IsCheckValueOK = false;
                            propertyy.NotifyMess = $"{displayName} phải lớn hơn 0";
                            return;
                        }
                    }
                    else if (propertyy.Type == typeof(double))
                    {
                        if ((double.TryParse(value, out double sl) ? sl : -1) <= 0)
                        {
                            propertyy.IsCheckValueOK = false;
                            propertyy.NotifyMess = $"{displayName} phải lớn hơn 0";
                            return;
                        }
                    }
                }
            }

        });
    }


    // Insert new KetQuaGC to database
    private async Task OnAddNewKetQuaGC()
    {
        bool? confirm = await DialogService.Confirm($"Xác nhận thêm kết quả gia công này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "Đồng ý", CancelButtonText = "Hủy" });

        if (confirm.Value)
        {
            // Kiem tra new KetQuaGC is existing

            // Get target LOTKHSX
            Dictionary<string, object?> pars = new();

            pars.Add($"{KHSX_LOT.DBName.KHSXID}", newKetQuaGC.KHSXID.Value);

            pars.Add($"{KHSX_LOT.DBName.NCID}", newKetQuaGC.NCID.Value);

            pars.Add($"{KHSX_LOT.DBName.MaQuanLyLot}", newKetQuaGC.MaQuanLyLot.Value);

            (List<KHSX_LOT> lotKHSXs, string error) = SQLServerServices.GetListLOT_khsx(pars, false);

            var targetlotKHSX = lotKHSXs.FirstOrDefault();


            if (targetlotKHSX != null)
            {
                _ = int.TryParse(newKetQuaGC.SLOK.Value?.ToString(), out int slOKsubmit);
                _ = int.TryParse(newKetQuaGC.SLNG.Value?.ToString(), out int slNGsubmit);

                _ = int.TryParse(targetlotKHSX.SLOKsubmited.Value?.ToString(), out int sumOKsubmited);
                _ = int.TryParse(targetlotKHSX.SLNGsubmited.Value?.ToString(), out int sumNGsubmited);
                _ = int.TryParse(targetlotKHSX.SLLOT.Value?.ToString(), out int lotTotal);

                bool isallowsubmit = false;

                if ((sumOKsubmited + sumNGsubmited) + (slOKsubmit + slNGsubmit) <= lotTotal)
                {
                    isallowsubmit = true;
                }

                if (isallowsubmit)
                {
                    // Gan tong cua Lot hien tai truoc khi submit
                    newKetQuaGC.SLperLOT.Value = slOKsubmit + slNGsubmit;
                    // Insert new KetQuaGC
                    (int newkqgcID, string errorMess) = SQLServerServices.InsertKetQuaGC(newKetQuaGC);

                    if (newkqgcID > 0)
                    {
                        if (newkqgcID < 0)
                        {
                            await DialogService.Alert($"{errorMess}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                        }
                        else
                        {
                            targetlotKHSX.IsDone.Value = ((sumOKsubmited + slOKsubmit + sumNGsubmited + slNGsubmit) == lotTotal) ? 1 : 0;
                            targetlotKHSX.SLOKsubmited.Value = sumOKsubmited + slOKsubmit;
                            targetlotKHSX.SLNGsubmited.Value = sumNGsubmited + slNGsubmit;

                            // Update sluong
                            (int updatereturn, string updateerror) = SQLServerServices.UpdateLOT_khsx(targetlotKHSX);

                            if (updatereturn > 0)
                            {
                                ShowNotification("Success!", NotificationSeverity.Success, 3000);

                                bool? success = await DialogService.Alert($"Đã thêm kết quả gia công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "Thoát", ShowClose = true });

                                if (success.Value)
                                {
                                    DialogService.Close(newkqgcID);
                                }
                            }
                            else await DialogService.Alert($"{updateerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                        }
                    }
                    else
                    {
                        await DialogService.Alert($"{errorMess}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                    }
                }
                else
                {
                    await DialogService.Alert($"Không thể nộp kết quả gia công!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
            else
            {
                await DialogService.Alert($"Mã quản lý lot không tồn tại!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    // Check trang thai gia tri cua tat ca truong thong tin isOK
    private bool IsAllValueThongTinOK(List<Propertyy> propertyys)
    {
        bool isOK = true;

        foreach (var property in propertyys.Where(pro => pro.IsDisable == false))
        {
            if (property.IsCheckValueOK == false)
            {
                isOK = false;
            }
        }

        // Check total of NG and OK is more than 0
        _ = int.TryParse(newKetQuaGC.SLOK.Value?.ToString(), out int slok) ? slok : 0;
        _ = int.TryParse(newKetQuaGC.SLNG.Value?.ToString(), out int slng) ? slng : 0;

        if ((slok + slng == 0))
        {
            isOK = false;
        }

        return isOK;
    }

    // Cancel add new
    private void OnCancelAddnewKetQuaGC()
    {
        DialogService.Close(null);
    }


    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
