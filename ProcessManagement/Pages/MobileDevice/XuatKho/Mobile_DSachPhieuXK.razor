@page "/mobiledsphieuxk"
@attribute [Authorize(Roles = "User")]

@using ProcessManagement.Models.KHO_NVL.XuatKho
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject SQLServerServices SQLServerServices

<style>
    .pxkho_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }
</style>

<RadzenStack Gap="0px" Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
    <RadzenStack Gap="10px" Style="width: 100%; padding: 0; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenText Text="Danh sách phiếu xuất kho" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
        <RadzenText Text="@($"( {DSPhieuXKs.Count} phiếu )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
    </RadzenStack>
    <RadzenDataList Style="height: contain; width: 100%;" PagerPosition="PagerPosition.Top" PageSize="5" WrapItems="true" AllowPaging="true" Data="@DSPhieuXKs" TItem="PhieuXuatKho">
        <Template Context="pxk">
            <RadzenCard Style="width: 100%; height: contain; padding: 0" Variant="Variant.Flat">
                <RadzenCard class="@(IsPXKhoSelected(pxk))" Style="width: 100%; height: contain;" Variant="Variant.Filled">
                    <RadzenStack onclick="@(() => OnPhieuXuatKhoClick(pxk))" Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenCard Variant="@((pxk.PXKID.Value?.Equals(SelectedPXK.PXKID.Value)?? false)? Variant.Flat : Variant.Outlined)" Style="height: 100%; width: 100%; padding: 10px;">
                            <RadzenStack Style="width: 100%; height: 100%;" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenStack Gap="0" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenText Text="@((DSPhieuXKs.IndexOf(pxk) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="height: contain; width: contain; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        @if (pxk.IsPXKDoneXuatKho)
                                        {
                                            <RadzenButton Click="@(() => OpenDSNVLofPhieuXuatKho(pxk))" Text="Xem" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Flat"
                                                          Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: contain; cursor: default; font-weight: 600" />

                                            <RadzenButton Text="Done" Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                          Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: contain; cursor: default; background-color: rgb(229,245,233); font-weight: 600" />
                                        }
                                        else
                                        {
                                            <RadzenButton Click="@(() => OpenDSNVLofPhieuXuatKho(pxk))" Text="Xem" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Flat"
                                                          Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: contain; cursor: default; font-weight: 600" />

                                            <RadzenButton Text="Not done" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                          Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: contain; cursor: default; background-color: rgb(254,243,220); font-weight: 600" />
                                        }
                                    </RadzenStack>
                                </RadzenStack>
                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Mã phiếu: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                        <RadzenText Text="@($"{pxk.MaPhieuXK.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px"></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Người lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                        <RadzenText Text="@($"{pxk.NguoiLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Ngày lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                        <RadzenText Text="@($"{pxk.NgayLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenStack>
                </RadzenCard>
            </RadzenCard>
        </Template>
    </RadzenDataList>
    <RadzenStack Visible="@(DSPhieuXKs.Count == 0)" Gap="10px" Style="height: contain; width: 100%; padding: 10px; padding-left: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenText Text="Chưa có phiếu xuất kho nào" Style="color: red; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
    </RadzenStack>
</RadzenStack>

@code {
    private List<PhieuXuatKho> DSPhieuXKs = new();
    private PhieuXuatKho SelectedPXK = new();
    private bool isSearching = false;
    private static object? selectedpxkid;

    protected override async Task OnInitializedAsync()
    {
        await LoadDSachPhieuXuatKho();

        ReSelectPhieuXuatKho();

        await base.OnInitializedAsync();
    }

    private async Task LoadDSachPhieuXuatKho()
    {
        await Task.Run(() =>
        {
            DSPhieuXKs = SQLServerServices.GetListPhieuXuatKho();
            DSPhieuXKs.Reverse();
        });
    }

    private void ReSelectPhieuXuatKho()
    {
        if (selectedpxkid != null)
        {
            SelectedPXK = DSPhieuXKs.FirstOrDefault(pxkid => pxkid.PXKID.Value?.ToString() == selectedpxkid.ToString()) ?? new();
        }
        else
        {
            SelectedPXK = DSPhieuXKs.FirstOrDefault() ?? new();
        }
    }

    private string IsPXKhoSelected(PhieuXuatKho selectPXK)
    {
        if (SelectedPXK.PXKID.Value != null && SelectedPXK.PXKID.Value.Equals(selectPXK.PXKID.Value))
        {
            return "pxkho_IsSelected";
        }
        else return string.Empty;
    }

    private void OnPhieuXuatKhoClick(PhieuXuatKho selectPXK)
    {
        SelectedPXK = selectPXK;

        selectedpxkid = SelectedPXK.PXKID.Value;

        StateHasChanged();
    }

    private void OpenDSNVLofPhieuXuatKho(PhieuXuatKho selectPXK)
    {
        if (selectPXK.PXKID.Value != null)
        {
            NavigationManager.NavigateTo($"/mobile_dsachnvlofpxk?pxkid={selectPXK.PXKID.Value}");
        }
    }
}
