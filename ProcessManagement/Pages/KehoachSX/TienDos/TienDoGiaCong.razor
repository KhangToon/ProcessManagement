@page "/tiendogiacong"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ParamountBed_Warehouse.Services.SocketService
@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.MAYMOC
@using ProcessManagement.Models.NHANVIEN
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Models.TienDoGCs
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Pages.KehoachSX.TienDos.Dialogs
@using ProcessManagement.Services.Excels
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 100%; width: 100%; padding: 0px; padding-bottom: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
    <!--Header-->
    <RadzenStack Gap="10px" Style="height: contain; width: 100%; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenText Text="@($"THEO DÕI TIẾN ĐỘ KẾ HOẠCH SẢN XUẤT")" Style="color: black; font-weight: 600; font-size: 20px;"></RadzenText>
        <RadzenText Text="@($"Sản phẩm:")" Style="color: gray; font-weight: 600; font-size: 18px; padding-left: 30px"></RadzenText>
        <RadzenText Text="@($"{TargetTienDoGC.MaSanPham}")" Style="color: black; font-weight: 600; font-size: 20px; padding-left: 10px"></RadzenText>
        <RadzenText Text="@($"Công đoạn:")" Style="color: gray; font-weight: 600; font-size: 18px; padding-left: 40px"></RadzenText>
        <RadzenText Text="@($"{TargetTienDoGC.TenCongDoan.ToUpper()}")" Style="color: black; font-weight: 600; font-size: 20px; padding-left: 10px"></RadzenText>
    </RadzenStack>
    <RadzenCard Style="width: 100%; height: contain; padding-top: 5px; padding-bottom: 5px" Variant="Variant.Outlined">
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 10px; overflow: auto" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenRow Style="width: contain; height: contain;">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <!--Ngay lap-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày lập")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayLap.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                Value="@selectday"
                                TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    TargetTienDoGC.NgayLap.Value = value;
                                                                } else{TargetTienDoGC.NgayLap.Value = string.Empty;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayLap.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay xuat hang-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày xuất hàng")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayXuatHang.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                Value="@selectday"
                                TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    TargetTienDoGC.NgayXuatHang.Value = value;
                                                                } else{TargetTienDoGC.NgayXuatHang.Value = string.Empty;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayXuatHang.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>

                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay bat dau-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày bắt đầu")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                Value="@selectday"
                                TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                Max="@daylimitUp"
                                Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    daylimitLow = value.AddDays(-1);
                                                                    TargetTienDoGC.NgayBatDau.Value = value;
                                                                } else{TargetTienDoGC.NgayBatDau.Value = string.Empty; daylimitLow = DateTime.MinValue;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayBatDau.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay ket thuc-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày kết thúc")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime selectday)) { }

                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                Value="@selectday"
                                TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                Min="@daylimitLow"
                                Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    daylimitUp = value;
                                                                    TargetTienDoGC.NgayKetThuc.Value = value;
                                                                } else{TargetTienDoGC.NgayKetThuc.Value = string.Empty; daylimitUp = DateTime.MaxValue;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayKetThuc.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>

                        <!--Nang luc may-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Năng lực máy")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.NangLucMay.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.NangLucMay.Value = args; })"
                                Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Nhan cong-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Nhân công")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.NhanCong.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.NhanCong.Value = args; })"
                                Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <!--Ton dau (TP)-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Tồn đầu (TP)")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.TonDau.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.TonDau.Value = args; })"
                                Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Don hang-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Đơn hàng")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.DonHang.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.DonHang.Value = args; })"
                                Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Xuat NVL-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Xuất NVL")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.XuatNVL.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.XuatNVL.Value = args; })"
                                Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Thoi gian hanh chinh-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Thời gian hành chính")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="double" Value="@double.Parse(TargetTienDoGC.ThoiGianHanhChinh.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.ThoiGianHanhChinh.Value = args; })"
                                Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Thoi gian tang ca-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Thời gian tăng ca")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="double" Value="@double.Parse(TargetTienDoGC.ThoiGianTangCa.Value?.ToString()?? "0")" Min="0" Max="999999"
                                ValueChanged="@((args) => { TargetTienDoGC.ThoiGianTangCa.Value = args; })"
                                Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                    </RadzenStack>
                </RadzenColumn>

            </RadzenRow>
            <!--Reset tiendo-->
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 0px; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value == null && !isEditing)" Style="width: contain; color: darkgreen; font-weight: 600; font-size: 16px" Text="Tạo kế hoạch theo dõi" Click="@(() => isEditing = true)" Icon="add" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && !isEditing)" Style="width: contain; color: red" Text="Xóa kế hoạch theo dõi" Click="@(() => OnDeleteTienDoGC(TargetTienDoGC))" Icon="remove" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>

                <!--Button them tiendogcrow-->
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value == null && isEditing)" Click="OnSaveNewTienDoGC" Icon="check" Text="Lưu kế hoạch" Size="ButtonSize.Small"
                ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Dark" Style="min-width: 100px; font-size: 14px; border-radius: 20px;" />

                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && !isEditing)" Style="width: contain; color: black" Text="Chỉnh sửa thông tin" Click="@(() => isEditing = true)" Icon="edit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && isEditing)" Style="width: contain;" Text="Lưu thay đổi" Click="@(() => OnEditTienDoGC(TargetTienDoGC))" Icon="check" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Dark"></RadzenButton>
                <RadzenButton Visible="@(isEditing)" Style="width: contain;" Text="Hủy" Click="@(() => OnCancelUpdateTienDoGC())" Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <!--Body-->
    <RadzenRow Gap="10px" Style="width: 100%;">
        <!--Theo doi tien do gia cong-->
        <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%;">
            <RadzenStack Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                @{
                    int numTDRow = TargetTienDoGC.DSachTienDoRows.Count;
                }
                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="height: contain; width: 100%;">
                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: contain; width: contain;">

                        <RadzenButton Text="@("Cập nhật từ PTDGC")" Style="border-radius: 20px; min-width: 100px; font-size: 15px; font-weight: 600;" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                        Click="@(async() => { await ButtonAutoCreateTiendoGCRows(); })" Shade="Shade.Lighter" Variant="Variant.Flat"
                        IsBusy="@autoCreating" BusyText=" Creating..." Icon="docs_add_on" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                        <!--Button Reload-->
                        <RadzenButton Text="Reload" Style="border-radius: 20px; min-width: 100px;" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                        Click="@(async() => { keyFilterExtraColumns = new(); keyFilterMainColumns = new(); await ReLoadTienDoGCPage(null, NCID, TargetKHSX.KHSXID.Value); })"
                        IsBusy="@isLoading" BusyText=" Loading..." Icon="autorenew" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                        <RadzenButton Visible=@(numTDRow >0) Text="Xóa tất cả" Style="border-radius: 20px; min-width: 100px; font-size: 15px; font-weight: 600;" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                        Click="@(async() => { await DeleteAllTienDoRow(); })" Shade="Shade.Lighter" Variant="Variant.Flat"
                        Icon="delete" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                        <RadzenButton Visible=@(numTDRow >0) Text="Xóa dòng không dùng" Style="border-radius: 20px; min-width: 100px; font-size: 15px; font-weight: 600;" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                        Click="@(async() => { await DeleteNotUseAllTienDoRow(); })" Shade="Shade.Lighter" Variant="Variant.Flat"
                        Icon="delete" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                        <!--Button them le tiendogcrow-->
                        <RadzenButton Disabled="@(TargetKHSX.isDonePXK == false || TargetKHSX.isReturnedNVL || TargetTienDoGC.TDGCID.Value == null)" Click="OnThemMoiTienDoGCRow" Icon="add" Text="Thêm lẻ từng dòng" Size="ButtonSize.Small"
                        ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Variant="Variant.Flat"
                        Style="min-width: 100px; font-size: 15px; font-weight: 600; border-radius: 20px;" />

                        <RadzenButton Visible=@(numTDRow >0) Click="OnPrintPhieuTheoDoiGiaCong" Icon="print" Text="In phiếu theo dõi" Size="ButtonSize.Small"
                        ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Variant="Variant.Flat"
                        Style="min-width: 100px; font-size: 15px; font-weight: 600; border-radius: 20px;" />
                    </RadzenStack>

                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <!--Button Enable Filter-->
                        <RadzenButton Icon="@(filterActive ? "filter_alt" : "filter_alt_off")" Text="Bộ lọc nâng cao" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="@(filterActive ? Shade.Darker : Shade.Lighter)"
                        Style="height: contain; width: contain; font-size: 15px; font-weight: 600;"
                        Click="@( async () =>
                                                                {
                                                                    if (filterActive)
                                                                    {
                                                                        await ReLoadTienDoGCPage(TargetTienDoGC.TDGCID.Value, NCID, TargetKHSX.KHSXID.Value);
                                                                    }
                                                                    filterActive = !filterActive;
                                                                })" />
                        <!--Button Reset Filter-->
                        <RadzenButton Click="@(async () => { keyFilterExtraColumns = new(); keyFilterMainColumns = new(); await ReLoadTienDoGCPage(TargetTienDoGC.TDGCID.Value, NCID, TargetKHSX.KHSXID.Value);})"
                        Icon="reset_settings" Text="Reset bộ lọc" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                        Style="height: contain; width: contain; font-size: 15px; font-weight: 600;" />
                    </RadzenStack>
                </RadzenStack>
                <!--Datagrid-->
                <RadzenStack Style="height: contain; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                    <RadzenDataGrid class="rz-grid-table" Data="@(TargetTienDoGC.DSachTienDoRows)" TItem="TienDoGCRow" IsLoading="@isLoading"
                    EmptyText="Danh sách theo dõi tiến độ gia công trống." Style="overflow: scroll; max-width: 100%; max-height: 600px"
                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true" AllowVirtualization="true"
                    AllowFiltering="@filterActive" FilterMode="FilterMode.Simple" AllowColumnResize="true"
                    AllowPaging="false" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                    GridLines="DataGridGridLines.Both" Density="Density.Default" ColumnWidth="150px"
                    HeaderCellRender="@(args => {args.Attributes.Add("style", $"background-color: rgba(58, 71, 77); padding-left: 10px; padding-right: 10px"); args.Attributes.Add("colspan", 1);})"
                    CellRender="@OnCellRender" FooterCellRender="@HeaderFooterCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">

                        <HeaderTemplate>
                            <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <!--Select ngay lam viec-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"Chọn ngày")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenDropDown AllowClear="true" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                                            Style="width: contain; min-width: 50px; max-width: 200px; height: 35px; font-size: 14px; border-width: 1px; background-color: white"
                                            AllowVirtualization="true"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowSelectAll="true" Multiple="true"
                                            TValue="IEnumerable<KeyValuePair<string, string>>"
                                            Data="@(ComboboxTDGC_DSachKeys(TienDoGC.DBName.Ngays))"
                                            SelectedItem="TemTienDoGC.NgaysSelected"
                                            Value="TemTienDoGC.NgaysSelected"
                                            ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxTDGC_DSachKeysSelectedChanged(args, TienDoGC.DBName.Ngays))">
                                                <!--Custom style off dropdownbox items-->
                                                <Template Context="item">
                                                    <span style="font-size: 14px; font-weight: 500">
                                                        @item.Value
                                                    </span>
                                                </Template>

                                                <!--Custom style off dropdownbox selected value items-->
                                                <ValueTemplate>
                                                    <span style="font-size: 14px; font-weight: 500; font-style: normal;">
                                                        @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                    </span>
                                                </ValueTemplate>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select may-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        @{
                                            string colName = TemTienDoGC.MMIDs.DBName ?? string.Empty;
                                        }
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"Chọn máy")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenDropDown AllowClear="true" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                                            Style="width: contain; min-width: 50px; max-width: 200px; height: 35px; font-size: 14px; border-width: 1px; background-color: white"
                                            AllowVirtualization="true"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowSelectAll="true" Multiple="true"
                                            TValue="IEnumerable<KeyValuePair<string, string>>"
                                            Data="@(ComboboxTDGC_DSachKeys(colName))"
                                            SelectedItem="TemTienDoGC.MayMocsSelected"
                                            Value="TemTienDoGC.MayMocsSelected"
                                            ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxTDGC_DSachKeysSelectedChanged(args, colName))">
                                                <!--Custom style off dropdownbox items-->
                                                <Template Context="item">
                                                    <span style="font-size: 14px; font-weight: 500">
                                                        @item.Value
                                                    </span>
                                                </Template>

                                                <!--Custom style off dropdownbox selected value items-->
                                                <ValueTemplate>
                                                    <span style="font-size: 14px; font-weight: 500; font-style: normal;">
                                                        @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                    </span>
                                                </ValueTemplate>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select nhan vien-->
                                    <RadzenStack Visible="false" Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        @{
                                            string colName = TemTienDoGC.NVIDs.DBName ?? string.Empty;
                                        }
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"Chọn nhân viên")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenDropDown AllowClear="true" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                                            Style="width: contain; min-width: 50px; max-width: 300px; height: 35px; font-size: 14px; border-width: 1px; background-color: white"
                                            AllowVirtualization="true"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowSelectAll="true" Multiple="true"
                                            TValue="IEnumerable<KeyValuePair<string, string>>"
                                            Data="@(ComboboxTDGC_DSachKeys(colName))"
                                            SelectedItem="TemTienDoGC.NhanviensSelected"
                                            Value="TemTienDoGC.NhanviensSelected"
                                            ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxTDGC_DSachKeysSelectedChanged(args, colName))">
                                                <!--Custom style off dropdownbox items-->
                                                <Template Context="item">
                                                    <span style="font-size: 14px; font-weight: 500">
                                                        @item.Value
                                                    </span>
                                                </Template>

                                                <!--Custom style off dropdownbox selected value items-->
                                                <ValueTemplate>
                                                    <span style="font-size: 14px; font-weight: 500; font-style: normal;">
                                                        @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                    </span>
                                                </ValueTemplate>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select ca lam viec-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        @{
                                            string colName = TemTienDoGC.CaLamViecs.DBName ?? string.Empty;
                                        }
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"Chọn ca làm việc")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenDropDown AllowClear="true" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                                            Style="width: contain; min-width: 50px; height: 35px; font-size: 14px; border-width: 1px; background-color: white"
                                            AllowVirtualization="true"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowSelectAll="true" Multiple="true"
                                            TValue="IEnumerable<KeyValuePair<string, string>>"
                                            Data="@(ComboboxTDGC_DSachKeys(colName))"
                                            SelectedItem="TemTienDoGC.CalamviecsSelected"
                                            Value="TemTienDoGC.CalamviecsSelected"
                                            ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxTDGC_DSachKeysSelectedChanged(args, colName))">
                                                <!--Custom style off dropdownbox items-->
                                                <Template Context="item">
                                                    <span style="font-size: 14px; font-weight: 500">
                                                        @item.Value
                                                    </span>
                                                </Template>

                                                <!--Custom style off dropdownbox selected value items-->
                                                <ValueTemplate>
                                                    <span style="font-size: 14px; font-weight: 500; font-style: normal;">
                                                        @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                    </span>
                                                </ValueTemplate>
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select Ke hoach-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"Kế hoạch")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenNumeric Disabled="@(TargetTienDoGC.TDGCID.Value == null)" class="custom-numeric" TValue="double" Placeholder="0.0" Step="0.5" Style="width: 130px"
                                            Min="0" Max="999999" Value="@((double.TryParse(TemTienDoGC.Kehoach?.ToString(), out double vl)? vl : 0))"
                                            ValueChanged="@(async (args) =>
                                                                               {
                                                                                    TemTienDoGC.Kehoach = args;
                                                                               })" />
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select TGGC-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"TG gia công")" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenNumeric Disabled="@(TargetTienDoGC.TDGCID.Value == null)" class="custom-numeric" TValue="int" Placeholder="0" Step="1" Style="width: 130px"
                                            Min="0" Max="999999" Value="@((int.TryParse(TemTienDoGC.ThoiGianGiaCong?.ToString(), out int vl)? vl : 0))"
                                            ValueChanged="@(async (args) =>
                                                                               {
                                                                                    TemTienDoGC.ThoiGianGiaCong = args;
                                                                               })" />
                                        </RadzenStack>
                                    </RadzenStack>

                                    <!--Select TGLV-->
                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Style="width: 100%; height: 50%">
                                            <RadzenText Text="@($"TG làm việc")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                            <RadzenNumeric Disabled="@(TargetTienDoGC.TDGCID.Value == null)" class="custom-numeric" TValue="double" Placeholder="0.0" Step="0.5" Style="width: 130px"
                                            Min="0" Max="999999" Value="@((double.TryParse(TemTienDoGC.ThoiGianLamViec?.ToString(), out double vl)? vl : 0))"
                                            ValueChanged="@(async (args) =>
                                                                               {
                                                                                    TemTienDoGC.ThoiGianLamViec = args;
                                                                               })" />
                                        </RadzenStack>
                                    </RadzenStack>

                                    <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Style="width: 100%; height: 50%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="Thêm vào danh sách" Style="font-weight: 600; font-size: 15px; font-style: italic; white-space: nowrap; "></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 100%; height: 50%; height: 35px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenButton Disabled="@(TemTienDoGC.NgaysSelected == null || TemTienDoGC.MayMocsSelected == null || TemTienDoGC.CalamviecsSelected == null)" Icon="playlist_add" Text="Thêm" Size="ButtonSize.Small"
                                            Click="@(async() => await OnButtonThemAutoPress())"
                                            ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Variant="Variant.Flat"
                                            Style="min-width: 100px; font-size: 15px; font-weight: 600; border-radius: 20px;" />
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                                <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 0px; padding-top: 10px; border-top: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenLabel Style="font-size: 16px; color: black; font-weight: 600" Text="Bảng danh sách theo dõi tiến độ gia công"></RadzenLabel>

                                    <RadzenStack Gap="20px" Style="padding-left: 100px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="Total results" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                            <RadzenText Text="@($"{TargetTienDoGC.DSachTienDoRows.Count}")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="Kế hoạch" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                            <RadzenText Text="@($"{TargetTienDoGC.FooterSumKeHoach}")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="Thực tế" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                            <RadzenText Text="@($"{TargetTienDoGC.FooterSumThucTe}")" Style="color: darkgreen; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="NG" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                            <RadzenText Text="@($"{TargetTienDoGC.FooterSumNG}")" Style="color: darkred; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        </HeaderTemplate>
                        <Columns>
                            @{
                                int countdstdgcrows = TargetTienDoGC.DSachTienDoRows.Count;

                                List<Propertyy> columns = TienDoGCRow.GetClassProperties() ?? new();

                                <!--STT-->
                                <RadzenDataGridColumn Width="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="true"
                                TItem="TienDoGCRow" Title="#"
                                Property="STT" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                    </HeaderTemplate>
                                    <FilterTemplate>
                                        <RadzenButton Icon="filter_alt" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Darker"
                                        Style="height: contain; width: contain; font-size: 14px;" />
                                    </FilterTemplate>
                                    <Template Context="tdgcrow">
                                        <span style="font-weight: bold;">@($"{TargetTienDoGC.DSachTienDoRows.IndexOf(tdgcrow) + 1}/{countdstdgcrows}")</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                {
                                    string colName = column.DBName ?? string.Empty;
                                    string displayName = column.DisplayName ?? string.Empty;
                                    Type? columnType = column.Type;

                                    <RadzenDataGridColumn TItem="TienDoGCRow" Title="@displayName"
                                    Property="@colName" TextAlign="TextAlign.Center">
                                        <HeaderTemplate>
                                            @if (filterActive)
                                            {
                                                <RadzenText Text="@(displayName)" Style="font-size: 15px; color: white; font-weight: 600; min-width: 120px"></RadzenText>
                                            }
                                            else
                                            {
                                                <span style="font-weight: 600; font-size: 15px; color: white;">@displayName</span>
                                            }
                                        </HeaderTemplate>
                                        <FilterTemplate>
                                            <RadzenDropDown AllowClear="true"
                                            Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; background-color: white"
                                            AllowVirtualization="true"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.Contains"
                                            AllowSelectAll="true"
                                            TValue="IEnumerable<string>"
                                            Data="@(GetMainColumnKeysSearch(colName))"
                                            Multiple="true"
                                            SelectedItem="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                            Value="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                            ValueChanged="@((IEnumerable<string> args) => OnComboboxMainColumnSelectedChanged(args, colName))">
                                            </RadzenDropDown>
                                        </FilterTemplate>
                                        <Template Context="tdgcrow">
                                            @{
                                                if (columnType != null && columnType == typeof(DateTime))
                                                {
                                                    bool ishaveValueOfday = DateTime.TryParse(tdgcrow.GetPropertyValue(colName)?.ToString(), out DateTime vldate);

                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString(Common.FormatNoTime_ddMMyyyy)" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                }
                                                else
                                                {
                                                    string colValue = tdgcrow.GetPropertyValue(colName)?.ToString() ?? string.Empty;

                                                    if (colName == TienDoGCRow.DBName.TienDo)
                                                    {
                                                        int.TryParse(colValue?.ToString(), out int tiendo);

                                                        <RadzenText Visible="@(tiendo < 0)" Text="@($"({Math.Abs(tiendo)})")" Style="color: red; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                        <RadzenText Visible="@(tiendo >= 0)" Text="@($"{tiendo}")" Style="color: darkgreen; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.SLNG)
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="color: red; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.ThoiGianGiaCong)
                                                    {
                                                        <RadzenText Text="@($"{(string.IsNullOrEmpty(colValue)? colValue : $"{colValue}s")}")" Style="font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.KeHoach || colName == TienDoGCRow.DBName.ThucTe)
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.SPID || colName == TienDoGCRow.DBName.MMID || colName == TienDoGCRow.DBName.NCID || colName == TienDoGCRow.DBName.NVIDs)
                                                    {
                                                        <RadzenText Text="@(GetColumnValueByID(colValue, colName))" Style="font-size: 15px; height: contain; font-weight: 500;"></RadzenText>
                                                    }
                                                    else
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                    }
                                                }
                                            }
                                        </Template>
                                        <FooterTemplate>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.MMID)" Text="TỔNG CỘNG" Style="color: black; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.KeHoach)" Text="@($"{TargetTienDoGC.FooterSumKeHoach}")" Style="color: black; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.ThucTe)" Text="@($"{TargetTienDoGC.FooterSumThucTe}")" Style="color: black; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.SLNG)" Text="@($"{TargetTienDoGC.FooterSumNG}")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TienDo && TargetTienDoGC.FooterSumTienDo >= 0)" Text="@($"{TargetTienDoGC.FooterSumTienDo}")" Style="color: darkgreen; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TienDo && TargetTienDoGC.FooterSumTienDo < 0)" Text="@($"({Math.Abs(TargetTienDoGC.FooterSumTienDo)})")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TiLeNG_CD)" Text="@($"{TargetTienDoGC.TiLeNGCD} %")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TiLeNG_TT)" Text="@($"{TargetTienDoGC.TiLeNGTT} %")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                        </FooterTemplate>
                                    </RadzenDataGridColumn>
                                }

                                <RadzenDataGridColumn Filterable=false TItem="TienDoGCRow" Title="Delete" Frozen="true" FrozenPosition="FrozenColumnPosition.Right"
                                Property="delete" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white;"></span>
                                    </HeaderTemplate>
                                    <Template Context="tdgcrow">
                                        <RadzenStack Gap="10px" Style="width: contain" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenButton Click="@(() => OpenEditTienDoGCRow(tdgcrow))" Icon="edit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Light"></RadzenButton>
                                            <RadzenButton Click="@(() => OnDeleteTienDoGCRow(tdgcrow))" Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Flat" Shade="Shade.Darker"></RadzenButton>
                                        </RadzenStack>
                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>

            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "spid")]
    public object? SPID { get; set; }
    private object? spid_previous;

    [Parameter]
    [SupplyParameterFromQuery(Name = "ncid")]
    public object? NCID { get; set; }
    private object? ncid_previous;

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private bool iscreatenew;

    private bool isEditing = false;

    private TienDoGC TargetTienDoGC = new();
    private IList<TienDoGCRow>? DatagridSeleted;
    private TienDoGCRow SelectedTDGCRow = new();
    private bool isLoading = false;
    private bool autoCreating = false;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

    private DateTime daylimitLow = DateTime.MinValue; // for minday of NgayKetThuc

    private DateTime daylimitUp = DateTime.MaxValue;  // for maxday of NgayBatDau

    private List<TienDoGCRow> DSachTienDoGCRowsBase = new();

    private Dictionary<string, List<string>> keyFilterMainColumns = new();
    private Dictionary<string, List<string>> keyFilterExtraColumns = new();
    private bool filterActive = false;

    ////
    // MMIDs/MMIDs
    private List<MayMoc> dsachMayMocs = new();
    private List<NhanVien> dsachNhanViens = new();

    protected async override Task OnInitializedAsync()
    {
        spid_previous = SPID; ncid_previous = NCID;

        dsachMayMocs = SQLServerServices.GetDanhSachMayMoc();

        dsachNhanViens = SQLServerServices.GetDanhSachNhanVien();

        // Load tien do gia cong by khsxid/ncid/spid
        await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);

        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        if (NCID != ncid_previous)
        {
            spid_previous = SPID; ncid_previous = NCID;

            DSachTienDoGCRowsBase = new();

            keyFilterMainColumns = new();

            keyFilterExtraColumns = new();

            TargetTienDoGC = new(); TemTienDoGC = new(); DatagridSeleted = null; SelectedTDGCRow = new();

            // Load tien do gia cong by khsxid/ncid/spid
            await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
        }

        await InvokeAsync(StateHasChanged);
    }

    #region Auto Generate TienDoGCRow - V2

    private TienDoGC TemTienDoGC = new();

    // Get list Keys
    private IEnumerable<KeyValuePair<string, string>> ComboboxTDGC_DSachKeys(string? colName)
    {
        IEnumerable<KeyValuePair<string, string>> results = new List<KeyValuePair<string, string>>();

        if (colName == TienDoGC.DBName.MMIDs)
        {
            results = dsachMayMocs
                    .Where(item => item.MMID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.MMID.Value?.ToString() ?? string.Empty,
                        $"{item.MaMay.Value?.ToString()?.Trim()}"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == TienDoGC.DBName.NVIDs)
        {
            results = dsachNhanViens
                    .Where(item => item.NVID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.NVID.Value?.ToString() ?? string.Empty,
                        $"{item.MaNhanVien.Value?.ToString()?.Trim()} ({item.GetThongTinNhanVienByName("Tên nhân viên").GiaTri.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == TienDoGC.DBName.CaLamViecs)
        {
            results = Common.ListCaLamViecs
                    .Where(item => !string.IsNullOrEmpty(item))
                    .Select(item => new KeyValuePair<string, string>(item, item))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == TienDoGC.DBName.Ngays)
        {
            bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
            bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

            // GenerateList Day
            List<string> rangedates = new();

            for (DateTime date = ngaybatdau; date <= ngayketthuc; date = date.AddDays(1))
            {
                rangedates.Add(date.ToString());
            }

            results = rangedates
                    .Where(item => !string.IsNullOrEmpty(item))
                    .Select(item => new KeyValuePair<string, string>(item, DateTime.Parse(item.ToString()).ToString(Common.FormatNoTime_ddMMyyyy)))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        return results;
    }

    // Select Keys changed
    private async Task OnComboboxTDGC_DSachKeysSelectedChanged(IEnumerable<KeyValuePair<string, string>> selectedValues, string propertyName)
    {
        if (propertyName == TienDoGC.DBName.MMIDs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selectedMMids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = dsachMayMocs.Where(mm =>
                {
                    var nvid = mm.MMID.Value?.ToString()?.Trim() ?? string.Empty;
                    return selectedMMids.Contains(nvid);
                });

                if (targetItems.Any())
                {
                    TemTienDoGC.MayMocsSelected = selectedValues.ToList();

                    // TemTienDoGC.SelectedMayMocs.AddRange(targetItems);

                    TemTienDoGC.MMIDs.Value = string.Join(",", targetItems
                                            .Select(nv => nv.MMID.Value?.ToString()?.Trim() ?? string.Empty)
                                            .Where(id => !string.IsNullOrEmpty(id)));
                }
                else TemTienDoGC.MMIDs.Value = null;
            }
            else
            {
                TemTienDoGC.MayMocsSelected = null;

                // TemTienDoGC.SelectedMayMocs = new();

                TemTienDoGC.MMIDs.Value = null;
            }
        }
        else if (propertyName == TienDoGC.DBName.NVIDs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selectedNvids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = dsachNhanViens.Where(nv =>
                {
                    var nvid = nv.NVID.Value?.ToString()?.Trim() ?? string.Empty;
                    return selectedNvids.Contains(nvid);
                });

                if (targetItems.Any())
                {
                    TemTienDoGC.NhanviensSelected = selectedValues.ToList();

                    // TemTienDoGC.SelectedNhanViens.AddRange(targetItems);

                    TemTienDoGC.NVIDs.Value = string.Join(",", targetItems
                                            .Select(nv => nv.NVID.Value?.ToString()?.Trim() ?? string.Empty)
                                            .Where(id => !string.IsNullOrEmpty(id)));
                }
                else TemTienDoGC.NVIDs.Value = null;
            }
            else
            {
                TemTienDoGC.NhanviensSelected = null;

                // TemTienDoGC.SelectedNhanViens = new();

                TemTienDoGC.NVIDs.Value = null;
            }
        }
        else if (propertyName == TienDoGC.DBName.CaLamViecs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selected_ids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = Common.ListCaLamViecs.Where(ca =>
                {
                    return selected_ids.Contains(ca);
                });

                if (targetItems.Any())
                {
                    TemTienDoGC.CalamviecsSelected = selectedValues.ToList();

                    // TemTienDoGC.SelectedCaLamViecs.AddRange(targetItems);

                    TemTienDoGC.CaLamViecs.Value = string.Join(",", targetItems
                                            .Select(ca => ca ?? string.Empty)
                                            .Where(ca => !string.IsNullOrEmpty(ca)));
                }
                else TemTienDoGC.CaLamViecs.Value = null;
            }
            else
            {
                TemTienDoGC.CalamviecsSelected = null;

                // TemTienDoGC.SelectedCaLamViecs = new();

                TemTienDoGC.CaLamViecs.Value = null;
            }
        }
        else if (propertyName == TienDoGC.DBName.Ngays)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
                bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

                // GenerateList Day
                List<string> rangedates = new();

                for (DateTime date = ngaybatdau; date <= ngayketthuc; date = date.AddDays(1))
                {
                    rangedates.Add(date.ToString(Common.FormatNoTime_ddMMyyyy));
                }

                var selected_days = selectedValues.Select(vl => vl.Value).ToHashSet();

                var targetItems = rangedates.Where(ngay =>
                {
                    return selected_days.Contains(ngay);
                });

                if (targetItems.Any())
                {
                    TemTienDoGC.NgaysSelected = selectedValues.ToList();
                }
            }
            else
            {
                TemTienDoGC.NgaysSelected = null;
            }
        }
        await Task.Delay(1);
    }

    // Extract from List [',']
    private IEnumerable<KeyValuePair<string, string>> GetKeyValuePairsForPropertyValue(Propertyy propertyy)
    {
        IEnumerable<KeyValuePair<string, string>> results = new List<KeyValuePair<string, string>>();

        string colName = propertyy.DBName ?? string.Empty;

        if (colName == TienDoGC.DBName.MMIDs)
        {
            var mmids = propertyy.Value?.ToString()?.Trim().Split(",");

            if (mmids != null)
            {
                results = dsachMayMocs
                    .Where(item => item.MMID.Value != null && mmids.Contains(item.MMID.Value?.ToString()?.Trim()))
                    .Select(item => new KeyValuePair<string, string>(
                        item.MMID.Value?.ToString() ?? string.Empty,
                        $"{item.MaMay.Value?.ToString()?.Trim()}"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
            }
        }
        else if (colName == TienDoGC.DBName.NVIDs)
        {
            var nvids = propertyy.Value?.ToString()?.Trim().Split(",");

            if (nvids != null)
            {
                results = dsachNhanViens
                        .Where(item => item.NVID.Value != null && nvids.Contains(item.NVID.Value?.ToString()?.Trim()))
                        .Select(item => new KeyValuePair<string, string>(
                            item.NVID.Value?.ToString() ?? string.Empty,
                            $"{item.MaNhanVien.Value?.ToString()?.Trim()} ({item.GetThongTinNhanVienByName("Tên nhân viên").GiaTri.Value?.ToString()?.Trim()})"
                        ))
                        .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                        .Distinct();
            }
        }
        else if (colName == TienDoGC.DBName.CaLamViecs)
        {
            var calamviecs = propertyy.Value?.ToString()?.Trim().Split(",");

            if (calamviecs != null)
            {
                results = Common.ListCaLamViecs
                        .Where(item => !string.IsNullOrEmpty(item) && calamviecs.Contains(item.Trim()))
                        .Select(item => new KeyValuePair<string, string>(item, item))
                        .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                        .Distinct();
            }
        }

        return results;
    }

    // Save TienDoGC - and generate TienDoGCRow - auto
    private async Task OnSaveNewTienDoGC()
    {
        bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
        bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

        if (startdayok == false || enddayok == false)
        {
            await DialogService.Alert($"Hãy nhập ngày bắt đầu/ngày kết thúc", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        bool? confirm = await DialogService.Confirm("Lưu kế hoạch theo dõi tiến độ?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Check required fields of TienDoGC

            // Insert into DB
            (int tdgcid, string error) = SQLServerServices.InsertTienDoGC(TargetTienDoGC);

            if (tdgcid > 0)
            {
                isEditing = false;

                TargetTienDoGC.TDGCID.Value = tdgcid;

                ShowNotification("Success!", NotificationSeverity.Success, 2000);

                await ReLoadTienDoGCPage(tdgcid, NCID, TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task OnButtonThemAutoPress()
    {
        TemTienDoGC.TDGCID.Value = TargetTienDoGC.TDGCID.Value;
        TemTienDoGC.NCID.Value = TargetTienDoGC.NCID.Value;
        TemTienDoGC.SPID.Value = TargetTienDoGC.SPID.Value;

        int totaladdcount = (TemTienDoGC.NgaysSelected?.Count() * TemTienDoGC.MayMocsSelected?.Count() * TemTienDoGC.CalamviecsSelected?.Count()) ?? 0;

        if (totaladdcount < 300)
        {
            await HandleAutoCreateTiendoGCRows_V2(TemTienDoGC);
        }
        else
        {
            await DialogService.Alert($"Số lượng thêm ({totaladdcount}) không được quá 300 dòng!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    private async Task HandleAutoCreateTiendoGCRows_V2(TienDoGC tienDoGC)
    {
        List<TienDoGCRow> tienDoGCRows = new();

        tienDoGCRows =
          (from day in tienDoGC.NgaysSelected?.Select(n => n.Key).ToList() ?? new()
           from may in tienDoGC.MMIDs.Value?.ToString()?.Trim().Split(",").ToList() ?? new()
               // from nhanvien in tienDoGC.NVIDs.Value?.ToString()?.Trim().Split(",").ToList() ?? new()
           from ca in tienDoGC.CaLamViecs.Value?.ToString()?.Trim().Split(",").ToList() ?? new()
           select new TienDoGCRow
               {
                   TDGCID = { Value = tienDoGC.TDGCID.Value },
                   NgayGC = { Value = day },
                   CaLamViec = { Value = ca },
                   MMID = { Value = may },
                   NCID = { Value = tienDoGC.NCID.Value },
               // NVIDs = { Value = nhanvien },
                   SPID = { Value = tienDoGC.SPID.Value },
                   KeHoach = { Value = tienDoGC.Kehoach },
                   ThoiGianGiaCong = { Value = tienDoGC.ThoiGianGiaCong },
                   ThoiGianLamViec = { Value = tienDoGC.ThoiGianLamViec },
                   GhiChu = { Value = DBNull.Value }
               }).ToList();

        // Insert newTDGCRow for tienDoGC into DB
        foreach (var tiendorow in tienDoGCRows)
        {
            if (int.TryParse(tiendorow.TDGCID.Value?.ToString(), out int _tdgcid))
            {
                if (_tdgcid > 0)
                {
                    // Check existing TienDGCRow

                    Dictionary<string, object?> pars = new();
                    pars.Add(TienDoGCRow.DBName.TDGCID, tiendorow.TDGCID.Value);
                    pars.Add(TienDoGCRow.DBName.NCID, tiendorow.NCID.Value);
                    pars.Add(TienDoGCRow.DBName.NgayGC, tiendorow.NgayGC.Value);
                    pars.Add(TienDoGCRow.DBName.MMID, tiendorow.MMID.Value);
                    pars.Add(TienDoGCRow.DBName.NVIDs, tiendorow.NVIDs.Value);
                    pars.Add(TienDoGCRow.DBName.CaLamViec, tiendorow.CaLamViec.Value);

                    List<TienDoGCRow> tdgcrows = SQLServerServices.GetListTienDoGCRow(pars).Item1;

                    if (tdgcrows.Any() == false)
                    {
                        (int newtdgcrowID, string error) = SQLServerServices.InsertSingleTienDoGCRow(_tdgcid, tiendorow);

                        if (newtdgcrowID > 0)
                        {

                        }
                        else
                        {
                            break;
                        }
                    }
                    else
                    {

                    }
                }
            }
        }

        await ReLoadTienDoGCPage(tienDoGC.TDGCID.Value, NCID, TargetKHSX.KHSXID.Value);

        ShowNotification("Thêm thành công!", NotificationSeverity.Success, 1000);
    }


    #endregion

    // Lay danh sach key search Main column
    private List<string> GetMainColumnKeysSearch(string? targetColumn)
    {
        List<string> keys = new();

        if (string.IsNullOrEmpty(targetColumn?.Trim()))
        {
            return keys;
        }

        if (targetColumn == TienDoGCRow.DBName.SPID || targetColumn == TienDoGCRow.DBName.MMID || targetColumn == TienDoGCRow.DBName.NCID || targetColumn == TienDoGCRow.DBName.NVIDs)
        {
            // Convert ID to stringValue
            keys = DSachTienDoGCRowsBase
            .Select(nv => GetColumnValueByID(nv.GetPropertyValue(targetColumn), targetColumn) ?? string.Empty)
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();
        }
        else if (targetColumn == TienDoGCRow.DBName.NgayGC)
        {
            keys = DSachTienDoGCRowsBase
            .Select(nv => nv.GetPropertyValue(targetColumn)?.ToString() ?? string.Empty)
            .Select(rs => (DateTime.TryParse(rs, out DateTime smd) ? smd.ToString(Common.FormatNoTime_ddMMyyyy) : string.Empty))
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();
        }
        else
        {
            keys = DSachTienDoGCRowsBase
            .Select(nv => nv.GetPropertyValue(targetColumn)?.ToString() ?? string.Empty)
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();
        }

        return keys;
    }

    // Update selected Main column key
    private async Task OnComboboxMainColumnSelectedChanged(IEnumerable<string> values, string targetColumn)
    {
        if (values != null)
        {
            keyFilterMainColumns[targetColumn] = values.ToList();
        }
        else
        {
            keyFilterMainColumns[targetColumn] = new();
        }

        await FilterDSachTienDoGCRowProcessing();
    }

    // Filtering processing
    private async Task FilterDSachTienDoGCRowProcessing()
    {
        await Task.Run(() =>
        {
            isLoading = true;

            TargetTienDoGC.DSachTienDoRows = DSachTienDoGCRowsBase;

            // Main column filtering
            foreach (var column in keyFilterMainColumns)
            {
                List<string> selectedkeys = column.Value;

                if (selectedkeys != null && selectedkeys.Count > 0)
                {
                    if (column.Key == TienDoGCRow.DBName.SPID || column.Key == TienDoGCRow.DBName.MMID || column.Key == TienDoGCRow.DBName.NCID || column.Key == TienDoGCRow.DBName.NVIDs)
                    {
                        // Convert ID to stringValue
                        TargetTienDoGC.DSachTienDoRows = TargetTienDoGC.DSachTienDoRows
                    .Where(nv =>
                    {
                        var value = nv.GetPropertyValue(column.Key);
                        var valueString = GetColumnValueByID(value, column.Key);
                        return valueString != null && selectedkeys.Contains(valueString);
                    }).ToList();
                    }
                    else if (column.Key == TienDoGCRow.DBName.NgayGC)
                    {
                        TargetTienDoGC.DSachTienDoRows = TargetTienDoGC.DSachTienDoRows
                    .Where(nv =>
                    {
                        var value = nv.GetPropertyValue(column.Key);
                        string valueString = (DateTime.TryParse(value?.ToString(), out DateTime ngaygc) ? ngaygc.ToString(Common.FormatNoTime_ddMMyyyy) : string.Empty);
                        return valueString != null && selectedkeys.Contains(valueString);
                    }).ToList();
                    }
                    else
                    {
                        TargetTienDoGC.DSachTienDoRows = TargetTienDoGC.DSachTienDoRows
                    .Where(nv =>
                    {
                        var value = nv.GetPropertyValue(column.Key);
                        var valueString = value?.ToString();
                        return valueString != null && selectedkeys.Contains(valueString);
                    }).ToList();
                    }
                }
            }

            if (filterActive)
            {
                CalculaFooterSummary();
            }

            isLoading = false;
        });
    }

    private void CalculaFooterSummary()
    {
        // Calculate all results
        TargetTienDoGC.FooterSumKeHoach = 0;
        TargetTienDoGC.FooterSumThucTe = 0;
        TargetTienDoGC.FooterSumNG = 0;
        TargetTienDoGC.FooterSumTienDo = 0;

        foreach (var tiendorow in TargetTienDoGC.DSachTienDoRows)
        {

            Dictionary<string, object?> parameters = new();

            parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", TargetTienDoGC.KHSXID.Value);

            parameters.Add($"{KetQuaGC.KQGCDBName.NCID}", TargetTienDoGC.NCID.Value);

            parameters.Add($"{KetQuaGC.KQGCDBName.MMID}", tiendorow.MMID.Value);

            parameters.Add($"{KetQuaGC.KQGCDBName.CaLamViec}", tiendorow.CaLamViec.Value);

            parameters.Add($"{KetQuaGC.KQGCDBName.NVIDs}", tiendorow.NVIDs.Value?.ToString()?.Trim());

            (List<KetQuaGC> ketquaGCs, string getError) = SQLServerServices.GetListKetQuaGC(parameters, false);

            List<KetQuaGC> temptlistketquagcs = new();

            // Filter by date

            if (DateTime.TryParse(tiendorow.NgayGC.Value?.ToString(), out DateTime rowNgayGC))
            {
                foreach (var kqgc in ketquaGCs)
                {
                    if (DateTime.TryParse(kqgc.SubMitDay.Value?.ToString(), out DateTime submitday))
                    {
                        if (!DateTime.Equals(submitday.Date, rowNgayGC.Date))
                        {
                            temptlistketquagcs.Add(kqgc);
                        }
                    }
                }
            }

            if (temptlistketquagcs.Any())
            {
                foreach (var item in temptlistketquagcs)
                {
                    if (ketquaGCs.Contains(item))
                    {
                        ketquaGCs.Remove(item);
                    }
                }
            }

            // Calculate tong so luong OK thuc te
            int sumthucte = ketquaGCs.Sum(kqgc =>
            {
                if (int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok))
                {
                    return slok;
                }
                else return 0;
            });
            tiendorow.ThucTe.Value = sumthucte;

            // Calculate tong so luong NG
            int sumNG = ketquaGCs.Sum(kqgc =>
            {
                if (int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng))
                {
                    return slng;
                }
                else return 0;
            });
            tiendorow.SLNG.Value = sumNG;

            // Calculate tong tien do
            int sumtiendo = sumthucte - (int.TryParse(tiendorow.KeHoach.Value?.ToString(), out int slkehoach) ? slkehoach : 0);
            tiendorow.TienDo.Value = sumtiendo;

            // Calculate all results
            TargetTienDoGC.FooterSumKeHoach += slkehoach;
            TargetTienDoGC.FooterSumThucTe += sumthucte;
            TargetTienDoGC.FooterSumNG += sumNG;
            TargetTienDoGC.FooterSumTienDo += sumtiendo;
        }

        // Calculate tile NG
        if (TargetTienDoGC.FooterSumKeHoach > 0)
        {
            TargetTienDoGC.TiLeNGTT = (double)TargetTienDoGC.FooterSumNG / TargetTienDoGC.FooterSumKeHoach * 100;

            TargetTienDoGC.TiLeNGTT = Math.Ceiling(TargetTienDoGC.TiLeNGTT * 100) / 100;
        }
    }

    // Convert ID to stringValue
    private string GetColumnValueByID(object? id, string colName)
    {
        string value = string.Empty;

        if (colName == TienDoGCRow.DBName.SPID)
        {
            value = SQLServerServices.GetMaSanphamByID(id);
        }
        else if (colName == TienDoGCRow.DBName.NCID)
        {
            value = SQLServerServices.GetNguyenCongByID(id);
        }
        else if (colName == TienDoGCRow.DBName.MMID)
        {
            value = SQLServerServices.GetMaMayMocbyID(id);
        }
        else if (colName == TienDoGCRow.DBName.NVIDs)
        {
            string ids = id?.ToString()?.Trim() ?? string.Empty;

            if (!string.IsNullOrEmpty(ids))
            {
                List<string> nvids = ids.Split(",").ToList();

                value = string.Join(", ", nvids
                        .Select(nvid => (SQLServerServices.GetNhanVienbyID(nvid).GetThongTinNhanVienByName("Tên nhân viên")).GiaTri.Value?.ToString() ?? string.Empty)
                        .Where(name => !string.IsNullOrEmpty(name)))
                        .Trim(',');
            }
        }

        return value;
    }


    private async Task OnThemMoiTienDoGCRow()
    {
        _ = int.TryParse(TargetTienDoGC.TDGCID.Value?.ToString(), out int tdgcid);
        _ = int.TryParse(TargetTienDoGC.NCID.Value?.ToString(), out int ncid);
        _ = int.TryParse(TargetTienDoGC.SPID.Value?.ToString(), out int spid);

        bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
        bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

        if (startdayok == true && enddayok == true && ncid > 0 && spid > 0)
        {
            TienDoGCRow newTDGCRow = await DialogService.OpenAsync<DialogAddNewTienDoGCRow>(null, new Dictionary<string, object>() { { "TDGCID", tdgcid }, { "SPID", spid }, { "NCID", ncid }, { "DayStart", ngaybatdau }, { "DayEnd", ngayketthuc } },
            new DialogOptions() { ShowTitle = true, Width = "50%", Height = "95%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

            if (newTDGCRow != null)
            {
                // Insert newTDGCRow for TargetTienDoGC into DB
                (int newtdgcrowID, string error) = SQLServerServices.InsertSingleTienDoGCRow(tdgcid, newTDGCRow);

                if (newtdgcrowID > 0)
                {
                    await ReLoadTienDoGCPage(tdgcid, ncid, TargetKHSX.KHSXID.Value);
                }
                else
                {
                    await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
        }
        else
        {
            await DialogService.Alert($"Hãy nhập ngày bắt đầu/ngày kết thúc", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    private async Task OnPrintPhieuTheoDoiGiaCong()
    {
        var file = await ExcelService.GenerateExcelData_TienDoGC(TargetTienDoGC);

        if (file != null)
        {
            await JSRuntime.InvokeVoidAsync("saveAsFile", file.FileDownloadName, Convert.ToBase64String(file.FileContents));
        }
        else ShowNotification("Print error!", NotificationSeverity.Error, 2000);
    }

    private async Task OnSaveNewTienDoGCForAllCongDoan()
    {
        bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
        bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

        if (startdayok == false || enddayok == false)
        {
            await DialogService.Alert($"Hãy nhập ngày bắt đầu/ngày kết thúc", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        bool? confirm = await DialogService.Confirm("Lưu kế hoạch theo dõi tiến độ?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Check required fields of TienDoGC

            // Insert into DB
            (int tdgcid, string error) = SQLServerServices.InsertTienDoGC(TargetTienDoGC);

            if (tdgcid > 0)
            {
                isEditing = false;

                TargetTienDoGC.TDGCID.Value = tdgcid;

                // Auto generate TiendoGCRow
                await HandleAutoCreateTiendoGCRows(TargetTienDoGC);

                // Auto add TDGC for another CongDoan

                var listproperties = TargetTienDoGC.GetPropertiesValues().Where(prop => prop.Value != null && prop.AlowDatabase && prop.DBName != TienDoGC.DBName.NCID).ToList();

                foreach (var congdoan in TargetKHSX.DSachCongDoans)
                {
                    var tdgc_ofcdoans = SQLServerServices.GetListTienDoGC(new() { { TienDoGC.DBName.NCID, congdoan.NCID.Value }, { TienDoGC.DBName.KHSXID, TargetKHSX.KHSXID.Value } }).Item1;

                    if (!tdgc_ofcdoans.Any())
                    {
                        TienDoGC anotherTDGC = new();

                        foreach (var item in listproperties)
                        {
                            if (!string.IsNullOrEmpty(item.DBName) && item.Value != null)
                            {
                                anotherTDGC.SetPropertyValue(item.DBName, item.Value);
                            }
                        }

                        anotherTDGC.NCID.Value = congdoan.NCID.Value;

                        (int newtdgcid, error) = SQLServerServices.InsertTienDoGC(anotherTDGC);

                        if (newtdgcid > 0)
                        {
                            anotherTDGC.TDGCID.Value = newtdgcid;

                            // Auto generate TiendoGCRow for another CongDoan
                            await HandleAutoCreateTiendoGCRows(anotherTDGC);
                        }
                    }
                }

                ShowNotification("Success!", NotificationSeverity.Success, 2000);

                await ReLoadTienDoGCPage(tdgcid, NCID, TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task ReLoadTienDoGCPage(object? tdgcID = null, object? ncid = null, object? khsxid = null, int delaytime = 10)
    {
        await Task.Run(async () =>
        {
            if (isLoading == false)
            {
                isLoading = true;

                List<TienDoGC> tienDoGCs = new();

                (tienDoGCs, string error) = SQLServerServices.GetListTienDoGC(tdgcID, ncid, khsxid);

                if (tienDoGCs.Any())
                {
                    iscreatenew = false;

                    var firtResult = tienDoGCs.FirstOrDefault();
                    if (firtResult != null)
                    {
                        TargetTienDoGC = firtResult;

                        TargetTienDoGC.NhanviensSelected = GetKeyValuePairsForPropertyValue(TargetTienDoGC.NVIDs);
                        TargetTienDoGC.MayMocsSelected = GetKeyValuePairsForPropertyValue(TargetTienDoGC.MMIDs);
                        TargetTienDoGC.CalamviecsSelected = GetKeyValuePairsForPropertyValue(TargetTienDoGC.CaLamViecs);

                        if (TargetTienDoGC.DSachTienDoRows.Any())
                        {
                            foreach (var tiendorow in TargetTienDoGC.DSachTienDoRows)
                            {

                                Dictionary<string, object?> parameters = new();



                                parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", TargetTienDoGC.KHSXID.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.NCID}", TargetTienDoGC.NCID.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.MMID}", tiendorow.MMID.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.CaLamViec}", tiendorow.CaLamViec.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.NVIDs}", tiendorow.NVIDs.Value?.ToString()?.Trim());

                                (List<KetQuaGC> ketquaGCs, string getError) = SQLServerServices.GetListKetQuaGC(parameters, false);

                                List<KetQuaGC> temptlistketquagcs = new();

                                // Filter by date

                                if (DateTime.TryParse(tiendorow.NgayGC.Value?.ToString(), out DateTime rowNgayGC))
                                {
                                    foreach (var kqgc in ketquaGCs)
                                    {
                                        if (DateTime.TryParse(kqgc.SubMitDay.Value?.ToString(), out DateTime submitday))
                                        {
                                            if (!DateTime.Equals(submitday.Date, rowNgayGC.Date))
                                            {
                                                temptlistketquagcs.Add(kqgc);
                                            }
                                        }
                                    }
                                }

                                if (temptlistketquagcs.Any())
                                {
                                    foreach (var item in temptlistketquagcs)
                                    {
                                        if (ketquaGCs.Contains(item))
                                        {
                                            ketquaGCs.Remove(item);
                                        }
                                    }
                                }

                                // Calculate tong so luong OK thuc te
                                int sumthucte = ketquaGCs.Sum(kqgc =>
                        {
                            if (int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok))
                            {
                                return slok;
                            }
                            else return 0;
                        });
                                tiendorow.ThucTe.Value = sumthucte;

                                // Calculate tong so luong NG
                                int sumNG = ketquaGCs.Sum(kqgc =>
                        {
                            if (int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng))
                            {
                                return slng;
                            }
                            else return 0;
                        });
                                tiendorow.SLNG.Value = sumNG;

                                // Calculate tong tien do
                                int sumtiendo = sumthucte - (int.TryParse(tiendorow.KeHoach.Value?.ToString(), out int slkehoach) ? slkehoach : 0);
                                tiendorow.TienDo.Value = sumtiendo;

                                // Calculate all results
                                TargetTienDoGC.FooterSumKeHoach += slkehoach;
                                TargetTienDoGC.FooterSumThucTe += sumthucte;
                                TargetTienDoGC.FooterSumNG += sumNG;
                                TargetTienDoGC.FooterSumTienDo += sumtiendo;
                            }

                            // Calculate tile NG
                            if (TargetTienDoGC.FooterSumKeHoach > 0)
                            {
                                TargetTienDoGC.TiLeNGTT = (double)TargetTienDoGC.FooterSumNG / TargetTienDoGC.FooterSumKeHoach * 100;

                                TargetTienDoGC.TiLeNGTT = Math.Ceiling(TargetTienDoGC.TiLeNGTT * 100) / 100;
                            }
                        }
                    }
                }
                else
                {
                    TargetTienDoGC = new() { KHSXID = { Value = TargetKHSX.KHSXID.Value }, NCID = { Value = NCID }, SPID = { Value = SPID } };

                    iscreatenew = true;
                    // Check allow load when in CreateNew mode
                    // await DialogService.Alert($"{(string.IsNullOrEmpty(error) ? "Danh sách trống!" : error)}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }

                if (TargetTienDoGC.TDGCID.Value == null)
                {
                    // Load ma san pham
                    TargetTienDoGC.MaSanPham = SQLServerServices.GetMaSanphamByID(SPID);
                    // Load cong doan
                    TargetTienDoGC.TenCongDoan = SQLServerServices.GetNguyenCongByID(NCID);
                }

                DSachTienDoGCRowsBase = TargetTienDoGC.DSachTienDoRows;

                await Task.Delay(delaytime);

                isLoading = false;

            }
        });

    }

    private async Task OnDeleteTienDoGCRow(TienDoGCRow removeTienDoGCRow)
    {
        bool? confirm = await DialogService.Confirm($"Xóa hàng này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            (bool isOK, string error) = SQLServerServices.DeleteTienDoGCRow(removeTienDoGCRow.TDGCRowID.Value);

            if (isOK)
            {
                ShowNotification("Xóa thành công!", NotificationSeverity.Success, 2000);

                await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task OpenEditTienDoGCRow(TienDoGCRow editTDGCrow)
    {
        var result = await DialogService.OpenAsync<DialogEditTienDoGCRow>(null, new Dictionary<string, object>() { { "TargetTDGCRow", editTDGCrow } },
        new DialogOptions() { ShowTitle = true, Width = "50%", Height = "95%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        if (result != null)
        {
            ShowNotification("Saved!", NotificationSeverity.Success, 2000);

            await ReLoadTienDoGCPage(editTDGCrow.TDGCID.Value, editTDGCrow.NCID.Value, TargetKHSX.KHSXID.Value);
        }
    }

    private async Task OnDeleteTienDoGC(TienDoGC removeTienDoGC)
    {
        bool? confirm = await DialogService.Confirm($"Xóa (đặt lại) trang tiến độ gia công (<strong>{TargetTienDoGC.TenCongDoan}</strong>) này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            if (TargetTienDoGC.TDGCID.Value != null)
            {
                (bool isOK, string error) = SQLServerServices.DeleteTienDoGC(removeTienDoGC.TDGCID.Value);

                if (isOK)
                {
                    await DialogService.Alert($"Xóa thành công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                    await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
                }
                else
                {
                    await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
            else
            {
                isEditing = true;
            }
        }
    }

    private async Task OnCancelUpdateTienDoGC()
    {
        isEditing = false;

        await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
    }

    private async Task OnEditTienDoGC(TienDoGC editTienDoGC)
    {
        bool? confirm = await DialogService.Confirm("Cập nhật thông tin kế hoạch theo dõi?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Insert into DB
            (int result, string error) = SQLServerServices.UpdateTienDoGC(editTienDoGC);

            if (result > 0)
            {
                ShowNotification("Update success!", NotificationSeverity.Success, 2000);

                await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }

        isEditing = false;
    }

    private async Task ButtonAutoCreateTiendoGCRows()
    {
        bool? confirm = await DialogService.Confirm("Cập nhật từ PTDGC?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            await HandleAutoCreateTiendoGCRows(TargetTienDoGC, false);

            await ReLoadTienDoGCPage(null, NCID, TargetKHSX.KHSXID.Value);

            ShowNotification("Done!", NotificationSeverity.Success, 2000);
        }
    }

    private async Task HandleAutoCreateTiendoGCRows(TienDoGC tienDoGC, bool deleteAll = true)
    {
        if (deleteAll)
        {
            // Delete old tdgcrows
            foreach (var tdrow in tienDoGC.DSachTienDoRows)
            {
                SQLServerServices.DeleteTienDoGCRow(tdrow.TDGCRowID.Value);
            }
        }

        (var dsKQGCs, string resultMess) = SQLServerServices.GetListKetQuaGC(new() { { KetQuaGC.KQGCDBName.KHSXID, TargetKHSX.KHSXID.Value }, { KetQuaGC.KQGCDBName.NCID, tienDoGC.NCID.Value } }, false);

        var groupedKQGC = dsKQGCs
        .GroupBy(k =>
        {
            return new
            {
                NgayGC = DateTime.TryParse(k.SubMitDay.Value?.ToString(), out DateTime submitday) ? submitday.Date.ToShortDateString() : string.Empty,
                Ca = k.CaLamViec.Value,
                MMID = k.MMID.Value,
                NCID = k.NCID.Value,
                NVIDs = k.NVIDs.Value
            };
        })
        .Select(g => new
        {
            Key = g.Key,
            Items = g.ToList()
        });


        List<TienDoGCRow> tienDoGCRows = new();

        foreach (var item in groupedKQGC)
        {
            TienDoGCRow newTDGCRow = new()
                {
                    TDGCID = { Value = tienDoGC.TDGCID.Value },
                    NgayGC = { Value = item.Key.NgayGC },
                    CaLamViec = { Value = item.Key.Ca },
                    MMID = { Value = item.Key.MMID },
                    NCID = { Value = item.Key.NCID },
                    NVIDs = { Value = item.Key.NVIDs },
                    SPID = { Value = item.Items.FirstOrDefault()?.SPID.Value },
                    KeHoach = { Value = item.Items.Sum(kqgc => (int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok) ? slok : 0) + (int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng) ? slng : 0)) },
                    ThoiGianGiaCong = { Value = item.Items.LastOrDefault()?.ThoiGianGC.Value },
                    ThoiGianLamViec = { Value = item.Items.LastOrDefault()?.ThoiGianLamViec.Value },
                    GhiChu = { Value = item.Items.LastOrDefault()?.GhiChu.Value }
                };

            tienDoGCRows.Add(newTDGCRow);
        }

        foreach (var tiendorow in tienDoGCRows)
        {
            if (int.TryParse(tiendorow.TDGCID.Value?.ToString(), out int tdgcid))
            {
                if (tdgcid > 0)
                {
                    var isExistingTDGCRows = TargetTienDoGC.DSachTienDoRows.Where(tdgcr =>
                        (DateTime.TryParse(tdgcr.NgayGC.Value?.ToString(), out DateTime submitday) ? submitday.Date.ToShortDateString() : string.Empty) == tiendorow.NgayGC.Value?.ToString()?.Trim()
                        && tdgcr.NCID.Value?.ToString()?.Trim() == tiendorow.NCID.Value?.ToString()?.Trim()
                        && tdgcr.MMID.Value?.ToString()?.Trim() == tiendorow.MMID.Value?.ToString()?.Trim()
                        && tdgcr.NVIDs.Value?.ToString()?.Trim() == tiendorow.NVIDs.Value?.ToString()?.Trim()
                        && tdgcr.CaLamViec.Value?.ToString()?.Trim() == tiendorow.CaLamViec.Value?.ToString()?.Trim()
                    ).ToList();

                    if (isExistingTDGCRows.Count == 0)
                    {
                        // Insert newTDGCRow for tienDoGC into DB
                        (int newtdgcrowID, string error) = SQLServerServices.InsertSingleTienDoGCRow(tdgcid, tiendorow);

                        if (newtdgcrowID > 0)
                        {

                        }
                        else
                        {
                            break;
                        }
                    }
                    else
                    {
                        var updateTDGCRows = isExistingTDGCRows.Where(x => x.NVIDs.Value == null).ToList();

                        foreach (var row in updateTDGCRows)
                        {
                            row.NVIDs.Value = tiendorow.NVIDs.Value;
                            row.KeHoach.Value = tiendorow.KeHoach.Value;
                            row.ThoiGianGiaCong.Value = tiendorow.ThoiGianGiaCong.Value;
                            row.ThoiGianLamViec.Value = tiendorow.ThoiGianLamViec.Value;
                            row.GhiChu.Value = tiendorow.GhiChu.Value;

                            (int udreturn, string error) = SQLServerServices.UpdateTienDoGCRow(row);
                        }
                    }

                }
            }
        }

        await Task.Delay(1);
    }

    private async Task DeleteAllTienDoRow()
    {
        bool? confirm = await DialogService.Confirm("Xóa tất cả?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            foreach (var tdrow in TargetTienDoGC.DSachTienDoRows)
            {
                SQLServerServices.DeleteTienDoGCRow(tdrow.TDGCRowID.Value);
            }

            await ReLoadTienDoGCPage(null, NCID, TargetKHSX.KHSXID.Value);

            ShowNotification("Deleted!", NotificationSeverity.Success, 2000);
        }
    }

    private async Task DeleteNotUseAllTienDoRow()
    {
        bool? confirm = await DialogService.Confirm("Xóa tất cả những dòng không dùng tới?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            int deletedcount = 0;

            foreach (var tdrow in TargetTienDoGC.DSachTienDoRows)
            {
                if (int.TryParse(tdrow.ThucTe.Value?.ToString(), out int sltt))
                {
                    if (sltt == 0)
                    {
                        SQLServerServices.DeleteTienDoGCRow(tdrow.TDGCRowID.Value);

                        deletedcount++;
                    }
                    else
                    {
                        if (int.TryParse(tdrow.KeHoach.Value?.ToString(), out int kehoach) && kehoach == 0)
                        {
                            tdrow.KeHoach.Value = tdrow.ThucTe.Value;

                            SQLServerServices.UpdateTienDoGCRow(tdrow);
                        }
                    }
                }
            }

            await ReLoadTienDoGCPage(null, NCID, TargetKHSX.KHSXID.Value);

            ShowNotification($"Đã xóa {deletedcount} dòng!", NotificationSeverity.Success, 2000);
        }
    }



    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<TienDoGCRow> selected)
    {
        DatagridSeleted = selected;

        var fistItemSelected = DatagridSeleted.FirstOrDefault();

        if (fistItemSelected != null)
        {
            SelectedTDGCRow = fistItemSelected;
        }
    }

    // Datagrid cellrender
    private void OnCellRender(DataGridCellRenderEventArgs<TienDoGCRow> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }

    void HeaderFooterCellRender(DataGridCellRenderEventArgs<TienDoGCRow> args)
    {
        if (args.Column.Property == TienDoGCRow.DBName.MMID)
        {
            args.Attributes.Add("colspan", 3);
        }
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, CloseTooltipOnDocumentClick = true, Delay = delay, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }
}
