@page "/tiendogiacong"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ParamountBed_Warehouse.Services.SocketService
@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Models.TienDoGCs
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Pages.KehoachSX.TienDos.Dialogs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService TooltipService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject NavigationManager NavigationManager

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 100%; width: 100%; padding: 0px; padding-bottom: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
    <!--Header-->
    <RadzenStack Gap="30px" Style="height: contain; width: 100%; background-color: var(--rz-success-lighter); padding: 10px; padding-top: 15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenText Text="@($"THEO DÕI TIẾN ĐỘ KẾ HOẠCH SẢN XUẤT {TargetTienDoGC.MaSanPham}")" Style="color: green; font-weight: 600; font-size: 20px"></RadzenText>
        <RadzenText Text="@($"Công đoạn:")" Style="color: green; font-weight: 600; font-size: 20px"></RadzenText>
        <RadzenText Text="@($"{TargetTienDoGC.TenCongDoan.ToUpper()}")" Style="color: black; font-weight: 600; font-size: 22px"></RadzenText>
    </RadzenStack>
    <RadzenCard Style="width: 100%; height: contain" Variant="Variant.Outlined">
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 10px; overflow: auto" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenRow Style="width: contain; height: contain;">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <!--Ngay lap-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày lập")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayLap.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                                  Value="@selectday"
                                                  TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                                  Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    TargetTienDoGC.NgayLap.Value = value;
                                                                } else{TargetTienDoGC.NgayLap.Value = string.Empty;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayLap.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay xuat hang-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày xuất hàng")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayXuatHang.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                                  Value="@selectday"
                                                  TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                                  Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    TargetTienDoGC.NgayXuatHang.Value = value;
                                                                } else{TargetTienDoGC.NgayXuatHang.Value = string.Empty;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayXuatHang.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>

                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay bat dau-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày bắt đầu")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime selectday)) { }
                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                                  Value="@selectday"
                                                  TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                                  Max="@daylimitUp"
                                                  Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    daylimitLow = value.AddDays(-1);
                                                                    TargetTienDoGC.NgayBatDau.Value = value;
                                                                } else{TargetTienDoGC.NgayBatDau.Value = string.Empty; daylimitLow = DateTime.MinValue;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayBatDau.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>

                        <!--Ngay ket thuc-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Ngày kết thúc")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                @if (DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime selectday)) { }

                                <RadzenDatePicker Disabled="@(!isEditing)" class="custom-datepicker" ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" ParseInput="@Common.ParseDate_MMddyyyy" AllowInput="true"
                                                  Value="@selectday"
                                                  TValue="DateTime" AllowClear="true" Style="width: 200px; height: 35px; font-size: 16px"
                                                  Min="@daylimitLow"
                                                  Change="@((args) => { if (args != null)
                                                                {
                                                                    DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                    daylimitUp = value;
                                                                    TargetTienDoGC.NgayKetThuc.Value = value;
                                                                } else{TargetTienDoGC.NgayKetThuc.Value = string.Empty; daylimitUp = DateTime.MaxValue;}})">
                                    <FooterTemplate>
                                        <RadzenButton Click=@(args => TargetTienDoGC.NgayKetThuc.Value = DateTime.Now) Text="Today" Style="width: 100%;" class="rz-my-4" />
                                    </FooterTemplate>
                                </RadzenDatePicker>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <!--Ton dau (TP)-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Tồn đầu (TP)")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.TonDau.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.TonDau.Value = args; })"
                                               Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Don hang-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Đơn hàng")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.DonHang.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.DonHang.Value = args; })"
                                               Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Xuat NVL-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Xuất NVL")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.XuatNVL.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.XuatNVL.Value = args; })"
                                               Style="font-size: 15px; height: 35px; border-width: 1px; width: 200px" />
                                <RadzenText Visible=@(!iscreatenew) Text="@(TargetTienDoGC.XuatNVL.Value?.ToString())" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <!--Nang luc may-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Năng lực máy")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.NangLucMay.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.NangLucMay.Value = args; })"
                                               Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Nhan cong-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Nhân công")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="int" Value="@int.Parse(TargetTienDoGC.NhanCong.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.NhanCong.Value = args; })"
                                               Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Thoi gian hanh chinh-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Thời gian hành chính")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="double" Value="@double.Parse(TargetTienDoGC.ThoiGianHanhChinh.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.ThoiGianHanhChinh.Value = args; })"
                                               Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>

                        <!--Thoi gian tang ca-->
                        <RadzenStack Gap="5px" Style="height: 100%; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="width: 100%;">
                                <RadzenText Text="@($"Thời gian tăng ca")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="width: 100%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                <RadzenNumeric Disabled="@(!isEditing)" ShowUpDown="false" TValue="double" Value="@double.Parse(TargetTienDoGC.ThoiGianTangCa.Value?.ToString()?? "0")" Min="0" Max="999999"
                                               ValueChanged="@((args) => { TargetTienDoGC.ThoiGianTangCa.Value = args; })"
                                               Style="font-size: 16px; height: 35px; border-width: 1px; width: 200px" />
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
            <!--Reset tiendo-->
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 0px; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value == null && !isEditing)" Style="width: contain;" Text="Tạo kế hoạch theo dõi" Click="@(() => isEditing = true)" Icon="add" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && !isEditing)" Style="width: contain;" Text="Xóa kế hoạch theo dõi" Click="@(() => OnDeleteTienDoGC(TargetTienDoGC))" Icon="reply" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>

                <!--Button them tiendogcrow-->
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value == null && isEditing)" Click="OnSaveNewTienDoGC" Icon="check" Text="Lưu kế hoạch" Size="ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Dark" Style="min-width: 100px; font-size: 14px; border-radius: 20px;" />

                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && !isEditing)" Style="width: contain;" Text="Chỉnh sửa thông tin" Click="@(() => isEditing = true)" Icon="edit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                <RadzenButton Visible="@(TargetTienDoGC.TDGCID.Value != null && isEditing)" Style="width: contain;" Text="Lưu thay đổi" Click="@(() => OnEditTienDoGC(TargetTienDoGC))" Icon="check" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Dark"></RadzenButton>
                <RadzenButton Visible="@(isEditing)" Style="width: contain;" Text="Hủy" Click="@(() => OnCancelUpdateTienDoGC())" Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Base" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>

    <!--Body-->
    <RadzenRow Gap="10px" Style=" width: 100%; border-top: var(--rz-grid-cell-border); padding: 10px;">
        <!--Theo doi tien do gia cong-->
        <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%;">
            <RadzenStack Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                <!--Datagrid-->
                <RadzenStack Style="height: contain; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                    <RadzenDataGrid class="rz-grid-table" Data="@(TargetTienDoGC.DSachTienDoRows)" TItem="TienDoGCRow" IsLoading="@isLoading"
                                    EmptyText="Danh sách theo dõi tiến độ gia công trống." Style="overflow: scroll; min-width: 100%; height: 100%"
                                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true" AllowVirtualization="true"
                                    AllowFiltering="false" FilterMode="FilterMode.Simple" AllowColumnResize="true"
                                    AllowPaging="false" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                    GridLines="DataGridGridLines.Both" Density="Density.Default" ColumnWidth="150px"
                                    HeaderCellRender="@(args => {args.Attributes.Add("style", $"background-color: rgba(58, 71, 77); padding-left: 10px; padding-right: 10px"); args.Attributes.Add("colspan", 1);})"
                                    CellRender="@OnCellRender" FooterCellRender="@HeaderFooterCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">

                        <HeaderTemplate>
                            <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <!--Button them tiendogcrow-->
                                <RadzenButton Disabled="@(TargetKHSX.isDonePXK == false || TargetKHSX.isReturnedNVL || TargetTienDoGC.TDGCID.Value == null)" Click="OnThemMoiTienDoGCRow" Icon="add" Text="Thêm nội dung theo dõi" Size="ButtonSize.Small"
                                              ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat"
                                              Style="min-width: 100px; font-size: 14px; border-radius: 20px;" />

                                <!--Button Reload-->
                                <RadzenButton Text="Reload" Style="border-radius: 20px; min-width: 100px;" Disabled="@(TargetTienDoGC.TDGCID.Value == null)"
                                              Click="@(async() => { await ReLoadTienDoGCPage(null, NCID, TargetKHSX.KHSXID.Value); })"
                                              IsBusy="@isLoading" BusyText=" Loading..." Icon="autorenew" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                            </RadzenStack>
                        </HeaderTemplate>
                        <Columns>
                            @if (TargetTienDoGC.DSachTienDoRows?.Count > 0)
                            {
                                List<Propertyy> columns = TienDoGCRow.GetClassProperties() ?? new();

                                <!--STT-->
                                <RadzenDataGridColumn Width="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                      TItem="TienDoGCRow" Title="#"
                                                      Property="STT" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                    </HeaderTemplate>
                                    <Template Context="tdgcrow">
                                        <span style="font-weight: bold;">@(TargetTienDoGC.DSachTienDoRows.IndexOf(tdgcrow) + 1)</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                {
                                    string colName = column.DBName ?? string.Empty;
                                    string displayName = column.DisplayName ?? string.Empty;
                                    Type? columnType = column.Type;

                                    <RadzenDataGridColumn TItem="TienDoGCRow" Title="@displayName"
                                                          Property="@colName" TextAlign="TextAlign.Center">
                                        <HeaderTemplate>
                                            <span style="font-weight: 600; font-size: 15px; color: white;">@displayName</span>
                                        </HeaderTemplate>
                                        <Template Context="tdgcrow">
                                            @{
                                                if (columnType != null && columnType == typeof(DateTime))
                                                {
                                                    bool ishaveValueOfday = DateTime.TryParse(tdgcrow.GetPropertyValue(colName)?.ToString(), out DateTime vldate);

                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString(Common.FormatNoTime_ddMMyyyy)" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                }
                                                else
                                                {
                                                    string colValue = tdgcrow.GetPropertyValue(colName)?.ToString() ?? "_";

                                                    if (colName == TienDoGCRow.DBName.TienDo)
                                                    {
                                                        int.TryParse(colValue?.ToString(), out int tiendo);

                                                        <RadzenText Visible="@(tiendo < 0)" Text="@($"({Math.Abs(tiendo)})")" Style="color: red; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                        <RadzenText Visible="@(tiendo >= 0)" Text="@($"{tiendo}")" Style="color: darkgreen; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.SLNG)
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="color: red; font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.ThoiGianGiaCong)
                                                    {
                                                        <RadzenText Text="@($"{colValue} s")" Style="font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.KeHoach || colName == TienDoGCRow.DBName.ThucTe)
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                    }
                                                    else if (colName == TienDoGCRow.DBName.SPID || colName == TienDoGCRow.DBName.MMID || colName == TienDoGCRow.DBName.NCID || colName == TienDoGCRow.DBName.NVIDs)
                                                    {
                                                        <RadzenText Text="@(GetColumnValueByID(colValue, colName))" Style="font-size: 15px; height: contain; font-weight: 500;"></RadzenText>
                                                    }
                                                    else
                                                    {
                                                        <RadzenText Text="@($"{colValue}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                    }
                                                }
                                            }
                                        </Template>
                                        <FooterTemplate>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.NgayGC)" Text="TỔNG CỘNG" Style="color: black; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.KeHoach)" Text="@($"{TargetTienDoGC.FooterSumKeHoach}")" Style="color: black; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.ThucTe)" Text="@($"{TargetTienDoGC.FooterSumThucTe}")" Style="color: black; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.SLNG)" Text="@($"{TargetTienDoGC.FooterSumNG}")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TienDo && TargetTienDoGC.FooterSumTienDo >= 0)" Text="@($"{TargetTienDoGC.FooterSumTienDo}")" Style="color: darkgreen; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TienDo && TargetTienDoGC.FooterSumTienDo < 0)" Text="@($"({Math.Abs(TargetTienDoGC.FooterSumTienDo)})")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TiLeNG_CD)" Text="@($"{TargetTienDoGC.TiLeNGCD} %")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600"></RadzenText>
                                            <RadzenText Visible="@(colName == TienDoGCRow.DBName.TiLeNG_TT)" Text="@($"{TargetTienDoGC.TiLeNGTT} %")" Style="color: darkred; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                        </FooterTemplate>
                                    </RadzenDataGridColumn>
                                }

                                <RadzenDataGridColumn TItem="TienDoGCRow" Title="Delete"
                                                      Property="delete" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white;"></span>
                                    </HeaderTemplate>
                                    <Template Context="tdgcrow">
                                        <RadzenButton Click="@(() => OnDeleteTienDoGCRow(tdgcrow))" Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Light"></RadzenButton>
                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>

            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "spid")]
    public object? SPID { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ncid")]
    public object? NCID { get; set; }

    // [Parameter]
    // [SupplyParameterFromQuery(Name = "khsxid")]
    // public object? KHSXID { get; set; }

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private bool iscreatenew;

    private bool isEditing = false;

    private TienDoGC TargetTienDoGC = new();
    private IList<TienDoGCRow>? DatagridSeleted;
    private TienDoGCRow SelectedTDGCRow = new();
    private bool isLoading = false;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

    private DateTime daylimitLow = DateTime.MinValue; // for minday of NgayKetThuc

    private DateTime daylimitUp = DateTime.MaxValue;  // for maxday of NgayBatDau

    protected async override Task OnInitializedAsync()
    {
        // Load tien do gia cong by khsxid/ncid/spid
        await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);

        await base.OnInitializedAsync();
    }

    // Convert ID to stringValue
    private string GetColumnValueByID(object? id, string colName)
    {
        string value = string.Empty;

        if (colName == TienDoGCRow.DBName.SPID)
        {
            value = SQLServerServices.GetMaSanphamByID(id);
        }
        else if (colName == TienDoGCRow.DBName.NCID)
        {
            value = SQLServerServices.GetNguyenCongByID(id);
        }
        else if (colName == TienDoGCRow.DBName.MMID)
        {
            value = SQLServerServices.GetMaMayMocbyID(id);
        }
        else if (colName == TienDoGCRow.DBName.NVIDs)
        {
            string ids = id?.ToString()?.Trim() ?? string.Empty;

            if (!string.IsNullOrEmpty(ids))
            {
                List<string> nvids = ids.Split(",").ToList();

                value = string.Join(", ", nvids
                        .Select(nvid => (SQLServerServices.GetNhanVienbyID(nvid).GetThongTinNhanVienByName("Tên nhân viên")).GiaTri.Value?.ToString() ?? string.Empty)
                        .Where(name => !string.IsNullOrEmpty(name)))
                        .Trim(',');
            }
        }

        return value;
    }


    private async Task OnThemMoiTienDoGCRow()
    {
        _ = int.TryParse(TargetTienDoGC.TDGCID.Value?.ToString(), out int tdgcid);
        _ = int.TryParse(TargetTienDoGC.NCID.Value?.ToString(), out int ncid);
        _ = int.TryParse(TargetTienDoGC.SPID.Value?.ToString(), out int spid);

        bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
        bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

        if (startdayok == true && enddayok == true && ncid > 0 && spid > 0)
        {
            TienDoGCRow newTDGCRow = await DialogService.OpenAsync<DialogAddNewTienDoGCRow>(null, new Dictionary<string, object>() { { "TDGCID", tdgcid }, { "SPID", spid }, { "NCID", ncid }, { "DayStart", ngaybatdau }, { "DayEnd", ngayketthuc } },
            new DialogOptions() { ShowTitle = true, Width = "50%", Height = "95%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

            if (newTDGCRow != null)
            {
                // Insert newTDGCRow for TargetTienDoGC into DB
                (int newtdgcrowID, string error) = SQLServerServices.InsertSingleTienDoGCRow(tdgcid, newTDGCRow);

                if (newtdgcrowID > 0)
                {
                    await ReLoadTienDoGCPage(tdgcid, ncid, TargetKHSX.KHSXID.Value);
                }
                else
                {
                    ShowNotification("Erorr add new!", NotificationSeverity.Error, 3000);
                }
            }
        }
        else
        {
            await DialogService.Alert($"Hãy nhập ngày bắt đầu/ngày kết thúc", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    private async Task OnSaveNewTienDoGC()
    {
        bool startdayok = DateTime.TryParse(TargetTienDoGC.NgayBatDau.Value?.ToString(), out DateTime ngaybatdau);
        bool enddayok = DateTime.TryParse(TargetTienDoGC.NgayKetThuc.Value?.ToString(), out DateTime ngayketthuc);

        if (startdayok == false || enddayok == false)
        {
            await DialogService.Alert($"Hãy nhập ngày bắt đầu/ngày kết thúc", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        bool? confirm = await DialogService.Confirm("Lưu kế hoạch theo dõi tiến độ?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Check required fields of TienDoGC

            // Insert into DB
            (int tdgcid, string error) = SQLServerServices.InsertTienDoGC(TargetTienDoGC);

            if (tdgcid > 0)
            {
                isEditing = false;

                ShowNotification("Save success!", NotificationSeverity.Success, 2000);
                await ReLoadTienDoGCPage(tdgcid, NCID, TargetKHSX.KHSXID.Value);
                // Navigate to reload page
                // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task ReLoadTienDoGCPage(object? tdgcID = null, object? ncid = null, object? khsxid = null, int delaytime = 10)
    {
        await Task.Run(async() =>
        {
            if (isLoading == false)
            {
                isLoading = true;

                List<TienDoGC> tienDoGCs = new();

                (tienDoGCs, string error) = SQLServerServices.GetListTienDoGC(tdgcID, ncid, khsxid);

                if (tienDoGCs.Any())
                {
                    iscreatenew = false;

                    var firtResult = tienDoGCs.FirstOrDefault();
                    if (firtResult != null)
                    {
                        TargetTienDoGC = firtResult;

                        if (TargetTienDoGC.DSachTienDoRows.Any())
                        {
                            foreach (var tiendorow in TargetTienDoGC.DSachTienDoRows)
                            {
                                Dictionary<string, object?> parameters = new();

                                parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", TargetTienDoGC.KHSXID.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.MMID}", tiendorow.MMID.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.CaLamViec}", tiendorow.CaLamViec.Value);

                                parameters.Add($"{KetQuaGC.KQGCDBName.NVIDs}", tiendorow.NVIDs.Value?.ToString()?.Trim());

                                (List<KetQuaGC> ketquaGCs, string getError) = SQLServerServices.GetListKetQuaGC(parameters, false);

                                List<KetQuaGC> temptlistketquagcs = new();

                                if (DateTime.TryParse(tiendorow.NgayGC.Value?.ToString(), out DateTime rowNgayGC))
                                {
                                    foreach (var kqgc in ketquaGCs)
                                    {
                                        if (DateTime.TryParse(kqgc.SubMitDay.Value?.ToString(), out DateTime submitday))
                                        {
                                            if (!DateTime.Equals(submitday.Date, rowNgayGC.Date))
                                            {
                                                temptlistketquagcs.Add(kqgc);
                                            }
                                        }
                                    }
                                }

                                if (temptlistketquagcs.Any())
                                {
                                    foreach (var item in temptlistketquagcs)
                                    {
                                        if (ketquaGCs.Contains(item))
                                        {
                                            ketquaGCs.Remove(item);
                                        }
                                    }
                                }

                                // Calculate tong so luong OK thuc te
                                int sumthucte = ketquaGCs.Sum(kqgc =>
                            {
                                if (int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok))
                                {
                                    return slok;
                                }
                                else return 0;
                            });
                                tiendorow.ThucTe.Value = sumthucte;

                                // Calculate tong so luong NG
                                int sumNG = ketquaGCs.Sum(kqgc =>
                            {
                                if (int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng))
                                {
                                    return slng;
                                }
                                else return 0;
                            });
                                tiendorow.SLNG.Value = sumNG;

                                // Calculate tong tien do
                                int sumtiendo = sumthucte - (int.TryParse(tiendorow.KeHoach.Value?.ToString(), out int slkehoach) ? slkehoach : 0);
                                tiendorow.TienDo.Value = sumtiendo;

                                // Calculate all results
                                TargetTienDoGC.FooterSumKeHoach += slkehoach;
                                TargetTienDoGC.FooterSumThucTe += sumthucte;
                                TargetTienDoGC.FooterSumNG += sumNG;
                                TargetTienDoGC.FooterSumTienDo += sumtiendo;
                            }

                            // Calculate tile NG
                            if (TargetTienDoGC.FooterSumKeHoach > 0)
                            {
                                TargetTienDoGC.TiLeNGTT = (double)TargetTienDoGC.FooterSumNG / TargetTienDoGC.FooterSumKeHoach * 100;

                                TargetTienDoGC.TiLeNGTT = Math.Ceiling(TargetTienDoGC.TiLeNGTT * 100) / 100;
                            }
                        }
                    }
                }
                else
                {
                    TargetTienDoGC = new() { KHSXID = { Value = TargetKHSX.KHSXID.Value }, NCID = { Value = NCID }, SPID = { Value = SPID } };

                    iscreatenew = true;
                    // Check allow load when in CreateNew mode
                    // await DialogService.Alert($"{(string.IsNullOrEmpty(error) ? "Danh sách trống!" : error)}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }

                if (TargetTienDoGC.TDGCID.Value == null)
                {
                    // Load ma san pham
                    TargetTienDoGC.MaSanPham = SQLServerServices.GetMaSanphamByID(SPID);
                    // Load cong doan
                    TargetTienDoGC.TenCongDoan = SQLServerServices.GetNguyenCongByID(NCID);
                }

                await Task.Delay(delaytime);

                isLoading = false;

            }
        });

    }

    private async Task OnDeleteTienDoGCRow(TienDoGCRow removeTienDoGCRow)
    {
        bool? confirm = await DialogService.Confirm($"Xóa hàng này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            (bool isOK, string error) = SQLServerServices.DeleteTienDoGCRow(removeTienDoGCRow.TDGCRowID.Value);

            if (isOK)
            {
                await DialogService.Alert($"Xóa thành công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task OnDeleteTienDoGC(TienDoGC removeTienDoGC)
    {
        bool? confirm = await DialogService.Confirm($"Xóa (đặt lại) trang tiến độ gia công này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            if (TargetTienDoGC.TDGCID.Value != null)
            {
                (bool isOK, string error) = SQLServerServices.DeleteTienDoGC(removeTienDoGC.TDGCID.Value);

                if (isOK)
                {
                    await DialogService.Alert($"Xóa thành công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                    await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
                }
                else
                {
                    await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
            else
            {
                isEditing = true;
            }
        }
    }

    private async Task OnCancelUpdateTienDoGC()
    {
        isEditing = false;

        await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
    }

    private async Task OnEditTienDoGC(TienDoGC editTienDoGC)
    {
        bool? confirm = await DialogService.Confirm("Cập nhật thông tin kế hoạch theo dõi?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Insert into DB
            (int result, string error) = SQLServerServices.UpdateTienDoGC(editTienDoGC);

            if (result > 0)
            {
                ShowNotification("Update success!", NotificationSeverity.Success, 2000);

                await ReLoadTienDoGCPage(ncid: NCID, khsxid: TargetKHSX.KHSXID.Value);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }

        isEditing = false;
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<TienDoGCRow> selected)
    {
        DatagridSeleted = selected;

        var fistItemSelected = DatagridSeleted.FirstOrDefault();

        if (fistItemSelected != null)
        {
            SelectedTDGCRow = fistItemSelected;
        }
    }

    // Datagrid cellrender
    private void OnCellRender(DataGridCellRenderEventArgs<TienDoGCRow> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }

    void HeaderFooterCellRender(DataGridCellRenderEventArgs<TienDoGCRow> args)
    {
        if (args.Column.Property == TienDoGCRow.DBName.NgayGC)
        {
            args.Attributes.Add("colspan", 8);
        }
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, CloseTooltipOnDocumentClick = true, Delay = delay, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }
}
