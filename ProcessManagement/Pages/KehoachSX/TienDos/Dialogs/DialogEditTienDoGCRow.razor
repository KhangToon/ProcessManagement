@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.MAYMOC
@using ProcessManagement.Models.NHANVIEN
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models.TienDoGCs

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 14px;
        font-weight: 600;
        font-style: italic;
    }

    /* Style for dropdown placeholder (auto apply)*/
    .rz-dropdown:not(.rz-state-filled) .rz-inputtext {
        color: #888888 !important;
        font-size: 14px !important;
        font-weight: 600 !important;
        font-style: italic !important;
    }

    .rz-numeric.custom-numeric input {
        font-size: 14px !important;
        font-weight: 600 !important;
    }

    .rz-datepicker.custom-datepicker input {
        font-size: 14px !important;
        font-weight: 600 !important;
    }

    .custom-datepicker input[type="text"]::placeholder {
        font-size: 14px;
        font-style: italic;
    }
</style>

<RadzenCard Style="height: 100%; width: 100%; padding: 5px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0; padding: 0; padding-bottom: 10px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 10px; background-color: var(--rz-primary-darker);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenText Text="CHỈNH SỬA THÔNG TIN THEO DÕI TIẾN ĐỘ GIA CÔNG" Style="color: white; font-weight: 500; font-size: 18px"></RadzenText>
        </RadzenStack>

        @{
            List<Propertyy> properties = updatedTDGCRow.GetPropertiesValues().Where(pro => pro.AlowDisplay == true).ToList();

            <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; overflow-y: scroll">
                <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding: 15px; padding-right: 0">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText Text="Nhập thông tin ngày gia công" Style="color: var(--rz-primary-darker); font-size: 18px; font-weight: 600; height: contain; width: contain"></RadzenText>
                    </RadzenStack>
                    <RadzenCard Variant="Variant.Flat" Style="min-height: 300px; width: 100%; padding: 0px; margin-top: 10px; background-color: white">
                        <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="0" Orientation="Orientation.Vertical">
                            @{
                                foreach (var property in properties)
                                {
                                    string displayName = property.DisplayName;

                                    if (property.DBName == TienDoGCRow.DBName.MMID)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenDropDown AllowClear="true"
                                                                        Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; background-color: white"
                                                                        Placeholder="@($" * chọn {displayName}")"
                                                                        AllowVirtualization="true"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        FilterOperator="StringFilterOperator.Contains"
                                                                        AllowSelectAll="true"
                                                                        TValue="KeyValuePair<string, string>"
                                                                        Data="@(ComboboxDSachKeys(property.DBName))" Value="@(GetKeyValuePairsForPropertyValue(property).FirstOrDefault())"
                                                                        ValueChanged="@((KeyValuePair<string, string> args) => OnComboboxDSachKeysSelectedChanged(new List<KeyValuePair<string, string>>{args}, property))">
                                                            <!--Custom style off dropdownbox items-->
                                                            <Template>
                                                                <span style="font-size: 14px; font-weight: 500; font-style: normal; color: black">@($"{context.Value}")</span>
                                                            </Template>

                                                            <!--Custom style off dropdownbox selected value items-->
                                                            <ValueTemplate>
                                                                <span style="font-size: 14px; font-weight: 500; font-style: normal; color: black">@($"{context.Value}")</span>
                                                            </ValueTemplate>
                                                        </RadzenDropDown>
                                                    </RadzenStack>
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenAlert Visible="@(!property.IsCheckValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                        <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                    else if (property.DBName == TienDoGCRow.DBName.NVIDs)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenDropDown AllowClear="true" Disabled="@property.IsDisable"
                                                                        Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; color: black; background-color: white"
                                                                        Placeholder="@($" * chọn {displayName}")"
                                                                        AllowVirtualization="true"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        FilterOperator="StringFilterOperator.Contains"
                                                                        AllowSelectAll="true" Multiple="true"
                                                                        TValue="IEnumerable<KeyValuePair<string, string>>"
                                                                        Data="@(ComboboxDSachKeys(property.DBName))"
                                                                        SelectedItem="NhanviensSelected"
                                                                        Value="NhanviensSelected"
                                                                        ValueChanged="@((IEnumerable<KeyValuePair<string, string>> args) => OnComboboxDSachKeysSelectedChanged(args, property))">

                                                            <!--Custom style off dropdownbox items-->
                                                            <Template Context="item">
                                                                <span style="color: black; font-size: 14px; font-weight: 500">
                                                                    @item.Value
                                                                </span>
                                                            </Template>

                                                            <!--Custom style off dropdownbox selected value items-->
                                                            <ValueTemplate>
                                                                <span style="font-size: 14px; font-weight: 500; font-style: normal; color: black">
                                                                    @($"{string.Join(", ", ((IEnumerable<KeyValuePair<string, string>>)context).Select(item => item.Value))}")
                                                                </span>
                                                            </ValueTemplate>

                                                        </RadzenDropDown>
                                                    </RadzenStack>
                                                    <RadzenStack Visible="@(!property.IsDisable)" Style="width: 50%;">
                                                        <RadzenAlert Visible="@(!property.IsCheckValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                        <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                    else if (property.DBName == TienDoGCRow.DBName.CaLamViec)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenDropDown AllowClear="true"
                                                                        Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; color: black; background-color: white"
                                                                        Placeholder="@($" * chọn {displayName}")"
                                                                        TValue="string" Data="@(Common.ListCaLamViecs)" Value="@(property.Value?.ToString())"
                                                                        ValueChanged="@(async (args) =>{updatedTDGCRow.CaLamViec.Value = args;await DefaultThongTinTienDoGCRow_ValueIsOK(property);})">
                                                            <!--Custom style off dropdownbox items-->
                                                            <Template>
                                                                <span style="font-size: 14px; font-weight: 500; font-style: normal; color: black">@($"{context}")</span>
                                                            </Template>

                                                            <!--Custom style off dropdownbox selected value items-->
                                                            <ValueTemplate>
                                                                <span style="font-size: 14px; font-weight: 500; font-style: normal; color: black">@($"{context}")</span>
                                                            </ValueTemplate>
                                                        </RadzenDropDown>
                                                    </RadzenStack>
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenAlert Visible="@(!property.IsCheckValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                        <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                    else if (property.DBName == TienDoGCRow.DBName.SPID || property.DBName == TienDoGCRow.DBName.NCID)
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; padding-top: 10px; padding-bottom: 10px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenStack Style="width: 50%;">
                                                        <RadzenText Text="@((property.DBName == TienDoGCRow.DBName.SPID) ? updatedTDGCRow.MaSanPham : updatedTDGCRow.TenCongDoan)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                    else
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    @{
                                                        if (property.Type == typeof(string)) // kieu ky tu
                                                        {
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenTextBox class="custom-placeholder" Placeholder="@($" * nhập {displayName}")" Value="@property.Value?.ToString()" Style="font-size: 14px; height: contain; border-width: 1px; color: black; font-weight: 500"
                                                                               @oninput="@(async (args) => { property.Value = args.Value; await DefaultThongTinTienDoGCRow_ValueIsOK(property);})">
                                                                </RadzenTextBox>
                                                            </RadzenStack>
                                                        }
                                                        else if (property.Type == typeof(double)) // Kieu double
                                                        {
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenNumeric class="custom-numeric" TValue="double" Placeholder="0.0" Step="0.5"
                                                                               Min="0" Max="999999" Value="@((double.TryParse(property.Value?.ToString(), out double vl)? vl : 0))"
                                                                               ValueChanged="@(async (args) =>
                                                                               {
                                                                                    property.Value = args;

                                                                                    await DefaultThongTinTienDoGCRow_ValueIsOK(property);
                                                                               })" />
                                                            </RadzenStack>
                                                        }
                                                        else if (property.Type == typeof(int)) // Kieu int
                                                        {
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenNumeric class="custom-numeric" TValue="int" Placeholder="0" Step="1"
                                                                               Min="0" Max="999999" Value="@((int.TryParse(property.Value?.ToString(), out int vl)? vl : 0))"
                                                                               ValueChanged="@(async (args) =>
                                                                               {
                                                                                    property.Value = args;

                                                                                    await DefaultThongTinTienDoGCRow_ValueIsOK(property);
                                                                               })" />
                                                            </RadzenStack>
                                                        }
                                                        else if (property.Type == typeof(DateTime)) // kieu ngay thang
                                                        {
                                                            bool ishaveValueOfday = DateTime.TryParse(property.Value?.ToString(), out DateTime selectday);
                                                            if (ishaveValueOfday)
                                                            {
                                                                selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);
                                                            }
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenDatePicker class="custom-datepicker custom-datepicker" Placeholder="@($"* nhập {displayName}")"
                                                                                  ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_ddMMyyyy" AllowInput="true"
                                                                                  TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                  Change="@(async (args) =>
                                                                                    {
                                                                                        if (args != null)
                                                                                        {
                                                                                            DateTime value = args.Value.Date;
                                                                                            property.Value = value;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            property.Value = string.Empty;
                                                                                        }
                                                                                        await DefaultThongTinTienDoGCRow_ValueIsOK(property);
                                                                                    })"
                                                                                  Style="height: contain;">
                                                                </RadzenDatePicker>
                                                            </RadzenStack>
                                                        }

                                                        <RadzenStack Style="width: 50%;">
                                                            <RadzenAlert Visible="@(!property.IsCheckValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                            <RadzenAlert Visible="@(property.IsCheckValueOK)" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                        </RadzenStack>
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                }
                            }
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenButton Disabled="@(!IsAllValueThongTinOK(properties))" Click="@(() => OnSaveTargetTienDoGCRow())" Style="width: contain; height: 80%;" Icon="check" Text="Lưu thay đổi" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Size="ButtonSize.Small" Variant="Variant.Filled" />
                <RadzenButton Style="width: contain; height: 80%;" Icon="close" Text="Hủy" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" Click="@(() => OnCancelAddnewTienDoGCRow())" />
            </RadzenStack>
        }

    </RadzenStack>
</RadzenCard>



@code {
    [Parameter]
    public TienDoGCRow TargetTDGCRow { get; set; } = new();

    private TienDoGCRow updatedTDGCRow = new();
    private List<MayMoc> dsachMayMocs = new();
    private List<NhanVien> dsachNhanViens = new();
    // Selected item changed
    private IEnumerable<KeyValuePair<string, string>>? NhanviensSelected;

    protected async override Task OnInitializedAsync()
    {
        dsachNhanViens = SQLServerServices.GetDanhSachNhanVien(); dsachMayMocs = SQLServerServices.GetDanhSachMayMoc();

        updatedTDGCRow = new();

        var targetProperties = TargetTDGCRow.GetPropertiesValues();

        foreach (var pro in targetProperties)
        {
            if (!string.IsNullOrEmpty(pro.DBName) && pro.Value != null)
            {
                updatedTDGCRow.SetPropertyValue(pro.DBName, pro.Value);
            }
        }

        // Load target ma san pham
        updatedTDGCRow.MaSanPham = SQLServerServices.GetMaSanphamByID(updatedTDGCRow.SPID.Value);
        updatedTDGCRow.SPID.IsCheckValueOK = true;
        updatedTDGCRow.SPID.NotifyMess = $"Giá trị hợp lệ";

        // Load target cong doan
        updatedTDGCRow.TenCongDoan = SQLServerServices.GetNguyenCongByID(updatedTDGCRow.NCID.Value);
        updatedTDGCRow.NCID.IsCheckValueOK = true;
        updatedTDGCRow.NCID.NotifyMess = $"Giá trị hợp lệ";

        NhanviensSelected = GetKeyValuePairsForPropertyValue(updatedTDGCRow.NVIDs);

        // Allow empty NVIDs
        updatedTDGCRow.NVIDs.IsCheckValueOK = true;
        updatedTDGCRow.NVIDs.NotifyMess = $"Giá trị hợp lệ";

        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.NgayGC);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.MMID);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.CaLamViec);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.ThoiGianGiaCong);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.ThoiGianLamViec);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.NVIDs);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.KeHoach);
        await DefaultThongTinTienDoGCRow_ValueIsOK(updatedTDGCRow.GhiChu);

        await base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    #region Combobox

    // Count element of dynamic data
    private int CountElements(dynamic data)
    {
        if (data is string str)
        {
            return str.Length; // Count characters in a string
        }
        else if (data is ICollection<NhanVien>
    collection)
        {
            return collection.Count; // Count elements in a collection
        }
        else
        {
            return 0;
        }
    }

    // Get list Keys
    private IEnumerable<KeyValuePair<string, string>> ComboboxDSachKeys(string? colName)
    {
        IEnumerable<KeyValuePair<string, string>> results = new List<KeyValuePair<string, string>>();

        if (colName == TienDoGCRow.DBName.MMID)
        {
            results = dsachMayMocs
                    .Where(item => item.MMID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.MMID.Value?.ToString() ?? string.Empty,
                        $"{item.MaMay.Value?.ToString()?.Trim()} ({item.TenMay.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == TienDoGCRow.DBName.NVIDs)
        {
            results = dsachNhanViens
                    .Where(item => item.NVID.Value != null)
                    .Select(item => new KeyValuePair<string, string>(
                        item.NVID.Value?.ToString() ?? string.Empty,
                        $"{item.MaNhanVien.Value?.ToString()?.Trim()} ({item.GetThongTinNhanVienByName("Tên nhân viên").GiaTri.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        return results;
    }

    private IEnumerable<KeyValuePair<string, string>> GetKeyValuePairsForPropertyValue(Propertyy propertyy)
    {
        IEnumerable<KeyValuePair<string, string>> results = new List<KeyValuePair<string, string>>();

        string colName = propertyy.DBName ?? string.Empty;

        if (colName == TienDoGCRow.DBName.MMID)
        {
            results = dsachMayMocs
                    .Where(item => item.MMID.Value != null && item.MMID.Value?.ToString()?.Trim() == propertyy.Value?.ToString()?.Trim())
                    .Select(item => new KeyValuePair<string, string>(
                        item.MMID.Value?.ToString() ?? string.Empty,
                        $"{item.MaMay.Value?.ToString()?.Trim()} ({item.TenMay.Value?.ToString()?.Trim()})"
                    ))
                    .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                    .Distinct();
        }
        else if (colName == TienDoGCRow.DBName.NVIDs)
        {
            var nvids = propertyy.Value?.ToString()?.Trim().Split(",");

            if (nvids != null)
            {
                results = dsachNhanViens
                        .Where(item => item.NVID.Value != null && nvids.Contains(item.NVID.Value?.ToString()?.Trim()))
                        .Select(item => new KeyValuePair<string, string>(
                            item.NVID.Value?.ToString() ?? string.Empty,
                            $"{item.MaNhanVien.Value?.ToString()?.Trim()} ({item.GetThongTinNhanVienByName("Tên nhân viên").GiaTri.Value?.ToString()?.Trim()})"
                        ))
                        .Where(x => !string.IsNullOrEmpty(x.Value) && !string.IsNullOrEmpty(x.Key))
                        .Distinct();
            }
        }

        return results;
    }

    private async Task OnComboboxDSachKeysSelectedChanged(IEnumerable<KeyValuePair<string, string>> selectedValues, Propertyy propertyy)
    {
        if (propertyy.DBName == TienDoGCRow.DBName.MMID)
        {
            var targetItem = dsachMayMocs.FirstOrDefault(sp => sp.MMID.Value?.ToString()?.Trim() == selectedValues.FirstOrDefault().Key);

            if (targetItem != null)
            {
                updatedTDGCRow.MMID.Value = targetItem.MMID.Value;
            }
            else updatedTDGCRow.MMID.Value = null;
        }
        else if (propertyy.DBName == TienDoGCRow.DBName.NVIDs)
        {
            if (selectedValues != null && selectedValues.Any())
            {
                var selectedNvids = selectedValues.Select(vl => vl.Key).ToHashSet();

                var targetItems = dsachNhanViens.Where(nv =>
                {
                    var nvid = nv.NVID.Value?.ToString()?.Trim() ?? string.Empty;
                    return selectedNvids.Contains(nvid);
                });

                if (targetItems.Any())
                {
                    NhanviensSelected = selectedValues.ToList();

                    updatedTDGCRow.DSNhanVien.AddRange(targetItems);

                    updatedTDGCRow.NVIDs.Value = string.Join(",", targetItems
                                            .Select(nv => nv.NVID.Value?.ToString()?.Trim() ?? string.Empty)
                                            .Where(id => !string.IsNullOrEmpty(id)));
                }
                else updatedTDGCRow.NVIDs.Value = null;
            }
            else
            {
                NhanviensSelected = null;

                updatedTDGCRow.DSNhanVien = new();
                updatedTDGCRow.NVIDs.Value = null;
            }
        }


        await DefaultThongTinTienDoGCRow_ValueIsOK(propertyy);
    }

    #endregion

    // Kiem tra thong tin mac dinh
    private async Task DefaultThongTinTienDoGCRow_ValueIsOK(Propertyy propertyy)
    {
        await Task.Run(() =>
        {
            string value = propertyy.Value?.ToString() ?? string.Empty;
            string? dbname = propertyy.DBName ?? string.Empty;
            string? displayName = propertyy.DisplayName ?? string.Empty;

            propertyy.IsCheckValueOK = true;
            propertyy.NotifyMess = $"Giá trị hợp lệ";

            foreach (var erorrtype in propertyy.CheckErrors)
            {
                if (dbname == TienDoGCRow.DBName.GhiChu || dbname == TienDoGCRow.DBName.ThoiGianGiaCong || dbname == TienDoGCRow.DBName.ThoiGianLamViec || dbname == TienDoGCRow.DBName.NVIDs)
                {
                    return;
                }

                if (erorrtype == Propertyy.ErrType.NotEmptyValue)
                {
                    if (string.IsNullOrEmpty(value.Trim()))
                    {
                        propertyy.IsCheckValueOK = false;
                        propertyy.NotifyMess = $"{displayName} không được để trống";
                        return;
                    }
                }
                else if (erorrtype == Propertyy.ErrType.NotAllowEqualsZero)
                {
                    if (propertyy.Type == typeof(int))
                    {
                        if ((int.TryParse(value, out int sl) ? sl : -1) <= 0)
                        {
                            propertyy.IsCheckValueOK = false;
                            propertyy.NotifyMess = $"{displayName} phải lớn hơn 0";
                            return;
                        }
                    }
                    else if (propertyy.Type == typeof(double))
                    {
                        if ((double.TryParse(value, out double sl) ? sl : -1) <= 0)
                        {
                            propertyy.IsCheckValueOK = false;
                            propertyy.NotifyMess = $"{displayName} phải lớn hơn 0";
                            return;
                        }
                    }
                }
            }

        });
    }

    // Update target TienDoGCRow to database
    private async Task OnSaveTargetTienDoGCRow()
    {
        bool? confirm = await DialogService.Confirm($"Lưu thay đổi?", "Xác nhận", new ConfirmOptions() { OkButtonText = "Đồng ý", CancelButtonText = "Hủy" });

        if (confirm.Value)
        {
            // var targetProperties = updatedTDGCRow.GetPropertiesValues();

            // foreach (var pro in targetProperties)
            // {
            //     if (!string.IsNullOrEmpty(pro.DBName) && pro.Value != null)
            //     {
            //         TargetTDGCRow.SetPropertyValue(pro.DBName, pro.Value);
            //     }
            // }

            // updatedTDGCRow.TDGCRowID.Value = TargetTDGCRow.TDGCRowID.Value;

            (int udsuccess, string uderr) = SQLServerServices.UpdateTienDoGCRow(updatedTDGCRow);

            DialogService.Close(updatedTDGCRow);
        }
    }

    // Check trang thai gia tri cua tat ca truong thong tin isOK
    private bool IsAllValueThongTinOK(List<Propertyy> propertyys)
    {
        bool isOK = true;

        foreach (var property in propertyys.Where(pro => pro.IsDisable == false))
        {
            if (property.IsCheckValueOK == false)
            {
                isOK = false;
            }
        }

        return isOK;
    }

    // Cancel add new
    private void OnCancelAddnewTienDoGCRow()
    {
        DialogService.Close(null);
    }

}
