@page "/pagedskhsanxuats"
@attribute [Authorize(Roles = "Admin")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.TienDoGCs
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Pages.KehoachSX.KQGCs
@using ProcessManagement.Pages.KehoachSX.QLCongDoan
@using ProcessManagement.Pages.KehoachSX.TienDos
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen

@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject IJSRuntime JSRuntime

<style>
    .khsx_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }
</style>

<RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 5px;">
    <RadzenStack Gap="20px" Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenStack Style="height: contain; width: 100%; padding-bottom: 10px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenRow Style="height: 100%; width: 100%;">
                <RadzenColumn SizeMD="3" Size="12">
                    <RadzenStack Style="height: 100%; width: 100%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenText Text="DANH SÁCH KẾ HOẠCH SẢN XUẤT" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeMD="6" Size="12">
                    <RadzenStack Gap="15px" Style="height: 100%; width: 100%; padding-left: 70px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenTextBox @oninput="@((args) => SearchingKHSX(args?.Value))" Placeholder="Nhập mã kế hoạch sản xuất, mã quản lý lot hoặc mã thùng để truy xuất" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 70% "></RadzenTextBox>
                        <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                        <RadzenButton Style="border-radius: 20px;" BusyText="Searching..." IsBusy="@reloadpage" Click="@(async () => await ButtonReloadPress())" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeMD="3" Size="12">
                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: 100%; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <!--Tai danh sach KHSX-->
                        <RadzenButton Click="@(async () => await LoadDanhSachKHSX())" Icon="list" Text="Quản lý KHSX" Size="ButtonSize.Small" Variant="Variant.Filled"
                                      Style="height: contain; width: 50%; font-size: 14px; background-color: Highlight " />
                        <!--Tao moi ke hoach san xuat-->
                        <RadzenButton Click="@(() => AddNewKehoachSX())" Icon="add" Text="Thêm KHSX" Size="ButtonSize.Small" Variant="Variant.Filled"
                                      Style="height: contain; width: 50%; font-size: 14px; background-color: Highlight " />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>

        <RadzenStack Visible="@(reloadpage == false)" Orientation="Orientation.Vertical" Gap="20px" Style="height: contain; width: 100%; padding: 0px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            @foreach (var khsx in DSKHSXs)
            {
                <RadzenCard class="rz-shadow-5" Variant="Variant.Filled" Style="width: 100%; height: contain; padding: 2px;">
                    <RadzenPanel AllowCollapse="true" Style="width: 100%; padding-bottom: 10px;" Collapsed="@khsx.IsCollapsed" Collapse="@(() => {khsx.IsCollapsed = true;})">
                        <HeaderTemplate>
                            <RadzenStack Style="width: 100%; cursor: pointer; padding-right: 10px" @onclick=@(() => {khsx.IsCollapsed = !khsx.IsCollapsed;}) Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenStack Style="width: contain; cursor: pointer" Gap="10px" Orientation="Orientation.Horizontal">
                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                        <RadzenIcon Icon="account_box" class="rz-me-1" />
                                    </RadzenText>
                                    <RadzenText Text="Kế hoạch sản xuất: " Style="font-size: 18px; color: black"></RadzenText>
                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                        <b>@khsx.MaLSX.Value?.ToString()</b>
                                    </RadzenText>
                                    <RadzenText Text="Mã sản phẩm: " Style="font-size: 18px; color: black; margin-left: 30px"></RadzenText>
                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                        <b>@khsx.TargetSanPham?.SP_MaSP.Value?.ToString()</b>
                                    </RadzenText>
                                </RadzenStack>
                                <RadzenButton Text="@($"{(khsx.IsCollapsed? "Mở rộng" : "Thu gọn")}")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Style="font-weight: 500; font-size: 14px; padding-left: 15px; padding-right: 15px; cursor: default"></RadzenButton>
                            </RadzenStack>
                        </HeaderTemplate>
                        <ChildContent>
                            <RadzenTabs Visible="@(khsxwaitloading == false)" Style="width: 100%; min-height: 100% !important; margin-top: 15px" SelectedIndex="@selectedTabIndex">
                                <Tabs>
                                    <RadzenTabsItem>
                                        <Template>
                                            <RadzenText Text="@($"THÔNG TIN KHSX - {khsx.MaLSX.Value?.ToString()}")" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                        </Template>
                                        <ChildContent>
                                            <DialogDetailKHSX TargetMQLLot="@TargetMQLLot" SelectKHSX="@khsx" IsNotDialog="true"></DialogDetailKHSX>
                                        </ChildContent>
                                    </RadzenTabsItem>
                                    <RadzenTabsItem>
                                        <Template>
                                            <RadzenText Text="DANH SÁCH LOT NVL" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                        </Template>
                                        <ChildContent>
                                            <DanhSachLotNVL TargetKHSX="@khsx"></DanhSachLotNVL>
                                        </ChildContent>
                                    </RadzenTabsItem>

                                    <RadzenTabsItem>
                                        <Template>
                                            <RadzenText Text="THEO DÕI SẢN XUẤT" Style="color: darkred; font-weight: 500; font-size: 15px;"></RadzenText>
                                        </Template>
                                        <ChildContent>
                                            <TheoDoiSanXuat TargetKHSX="@khsx"></TheoDoiSanXuat>
                                        </ChildContent>
                                    </RadzenTabsItem>

                                    <RadzenTabsItem>
                                        <Template>
                                            <RadzenText Text="QUẢN LÝ CÔNG ĐOẠN" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                        </Template>
                                        <ChildContent>
                                            <QLCongDoanPage TargetMQLLot="@TargetMQLLot" TargetKHSX="@khsx"></QLCongDoanPage>
                                        </ChildContent>
                                    </RadzenTabsItem>
                                </Tabs>
                            </RadzenTabs>
                        </ChildContent>
                        <SummaryTemplate>
                            <!--LSX infor-->
                            <RadzenStack Style="width: 100%; height: contain; padding: 20px; padding-top: 10px;" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenCard @onclick=@(() => {khsx.IsCollapsed = false;}) Visible=@(khsx.KHSXID.Value != null) Variant="Variant.Flat" Style="cursor: pointer; width: 100%; height: contain; padding: 0px; border-radius: 10px; border-width: 2px">
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="0" Style="height: 100%; width: 100%; padding: 10px; padding-top: 0; padding-bottom: 0" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" Style="height: 100%; width: 100%; padding: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Mã KHSX" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.MaLSX.Value != null)" Text="@khsx?.MaLSX.Value?.ToString()" Style="font-size: 16px; font-weight: bold; color: red"></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Nguyên vật liệu" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.DSachNVLofKHSXs.Count > 0)" Text="@(khsx?.DSachNVLofKHSXs is { Count: > 0 } ? string.Join(", ", khsx.DSachNVLofKHSXs.Select(nvl => nvl.TenNVL)) : string.Empty)"
                                                            Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="@Common.SP_TenSanPham" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.TargetSanPham != null)" Text="@(khsx?.TargetSanPham?.SP_TenSanPham.Value?.ToString())" Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="@Common.SP_MaSP" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.TargetSanPham != null)" Text="@(khsx?.TargetSanPham?.SP_MaSP.Value?.ToString())" Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Số lượng PO" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.SLSanPhamPO.Value != null)" Text="@($"{khsx?.SLSanPhamPO.Value?.ToString()?? "0"}")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Tỉ lệ lỗi cho phép" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                @{
                                                    int slloichophep = (int.TryParse(khsx.SLSanPhamSX.Value?.ToString(), out int slsx) ? slsx : 0) - (int.TryParse(khsx.SLSanPhamPO.Value?.ToString(), out int slpo) ? slpo : 0);
                                                }
                                                <RadzenText Text="@($"{khsx?.TileLoi.Value?.ToString()?? "0"} (%) ({slloichophep} pcs)")" Style="font-size: 16px; font-weight: bold; color: darkred "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Số lượng NVL" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx?.DinhMuc.Value != null)" Text="@($"{khsx?.DinhMuc.Value?.ToString()?? "0"} (pcs)")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Số lượng LOT" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                <RadzenText Visible="@(khsx.DSLOT_KHSXs.Count > 0)" Text="@($"{khsx.DSLOT_KHSXs.Count} (lot)")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="Mã quản lý LOT" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                @{
                                                    NguyenCongofKHSX? fistCongdoan = khsx?.DSachCongDoans.FirstOrDefault();
                                                }
                                                <RadzenText Visible="@(fistCongdoan!= null)" Text="@($"{fistCongdoan?.DSachNVLCongDoans.FirstOrDefault()?.MaQuanLy.Value?.ToString()?? "_"} --> {fistCongdoan?.DSachNVLCongDoans.LastOrDefault()?.MaQuanLy.Value?? "_"}")"
                                                            Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                            </RadzenStack>

                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="@Common.NgayTao" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                @if (khsx?.NgayTao.Value != null)
                                                {
                                                    DateTime ngaytao = Convert.ToDateTime(khsx?.NgayTao.Value?.ToString());
                                                    <RadzenText Text="@ngaytao.ToString(Common.FormatNoTime_yyyMMdd)" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                }
                                                else
                                                {
                                                    <RadzenText Text="----" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                }
                                            </RadzenStack>
                                        </RadzenStack>
                                        <RadzenStack Visible="false" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%; padding: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            @{
                                                <RadzenText Text="Xem chi tiết KHSX" @onclick="@(() => OnOpenChitietKHSX(khsx))" TextAlign="TextAlign.Center" Style="font-size: 16px; font-weight: 500; color: Highlight; cursor: pointer "></RadzenText>
                                            }
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenStack>

                            <!--Tien do gia cong-->
                            <RadzenStack Style="width: 100%; height: contain; padding: 20px; padding-top: 0px; padding-bottom: 0; overflow-x: scroll" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                @foreach (var (index, cdoan) in khsx.DSachCongDoans.Select((item, idx) => (idx, item)))
                                {
                                    (int sumok, int sumng, int totalokng) = GetResultsKQGCperCDoanAllLots(cdoan.NCID.Value, khsx.KHSXID.Value);

                                    _ = int.TryParse(khsx.DinhMuc.Value?.ToString(), out int dinhmuc) ? dinhmuc : 0;

                                    if (index == 0)
                                    {
                                        cdoan.SLlimit = dinhmuc;
                                    }
                                    else
                                    {
                                        NguyenCongofKHSX precdoan = Common.GetElementOrNew(khsx.DSachCongDoans, index - 1);
                                        (int pre_sumok, int pre_sumng, int pre_totalokng) = GetResultsKQGCperCDoanAllLots(precdoan.NCID.Value, khsx.KHSXID.Value);
                                        cdoan.SLlimit = precdoan.SLlimit - pre_sumng;
                                    }

                                    <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style="height: contain; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenButton Text="@($"{cdoan.TenCongDoan.Value?.ToString()}")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Variant="Variant.Flat" Size="ButtonSize.Small" Style="font-weight: 600; width: 100%; font-size: 16px; cursor: default; border-radius: 3px"></RadzenButton>
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenButton Text="@($"{totalokng}/{cdoan.SLlimit}")" ButtonStyle="@((totalokng == cdoan.SLlimit)? ButtonStyle.Success : ButtonStyle.Primary)" Shade="Shade.Darker" Size="ButtonSize.Small" Style="font-weight: 600; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"Tiến độ", 100))"></RadzenButton>
                                            <RadzenButton Text="@($"{sumok}")" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: darkgreen; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $" OK", 100))"></RadzenButton>
                                            <RadzenButton Text="@($"{sumng}")" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: darkred; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"NG", 100))"></RadzenButton>
                                        </RadzenStack>
                                    </RadzenStack>
                                }
                            </RadzenStack>
                        </SummaryTemplate>
                    </RadzenPanel>
                </RadzenCard>
            }
        </RadzenStack>
    </RadzenStack>
</RadzenCard>


@code {
    private List<KHSX> DSKHSXs = new();
    private KHSX SelectedKHSX = new();
    private static int selectedTabIndex = 0;
    private static object? selectKHSXID;
    private bool reloadpage = false;

    private List<KHSX> DSKHSXs_base = new();

    private KHSX_LOT? TargetMQLLot;

    protected override async Task OnInitializedAsync()
    {   
        await ButtonReloadPress();

        await base.OnInitializedAsync();
    }

    private (int, int, int) GetResultsKQGCperCDoanAllLots(object? cdid, object? khsxid)
    {
        int sumok = 0; int sumng = 0;

        Dictionary<string, object?> parameters = new();

        parameters.Add($"{KetQuaGC.KQGCDBName.NCID}", cdid);

        parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", khsxid);

        (List<KetQuaGC> DSachKetQuaGCsBase, string resultMess) = SQLServerServices.GetListKetQuaGC(parameters, false);

        sumok = DSachKetQuaGCsBase.Sum(kqgc => int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok) ? slok : 0);
        sumng = DSachKetQuaGCsBase.Sum(kqgc => int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng) ? slng : 0);

        return (sumok, sumng, (sumok + sumng));
    }

    private async Task OnGetListKHSXs_old()
    {
        DSKHSXs = new();

        DSKHSXs = await Task.Run(() =>
        {
            var results = SQLServerServices.GetListKHSXs();

            if (results.Any())
            {
                results.Reverse();
            }
            return results;
        });

        if (DSKHSXs.Any())
        {
            if (selectKHSXID != null)
            {
                SelectedKHSX = DSKHSXs.FirstOrDefault(x => object.Equals(x.KHSXID.Value, selectKHSXID)) ?? new();
            }
            else SelectedKHSX = DSKHSXs.FirstOrDefault() ?? new();

            DSKHSXs_base = DSKHSXs;
        }
    }


    private async Task OnGetListKHSXs()
    {
        DSKHSXs = new List<KHSX>();
        var listkhsxids = SQLServerServices.GetlistKHSXid();
        var tasks = new List<Task>();
        var semaphore = new SemaphoreSlim(10); // Limit to 5 concurrent tasks

        foreach (var khsxid in listkhsxids)
        {
            await semaphore.WaitAsync(); // Wait for an available slot
            tasks.Add(Task.Run(async () =>
            {
                try
                {
                    KHSX kHSX = await GetKHSX(khsxid);

                    if (kHSX != null && kHSX.KHSXID.Value != null)
                    {
                        DSKHSXs.Add(kHSX);
                    }
                }
                catch (Exception)
                {
                    // Log or handle the exception
                }
                finally
                {
                    semaphore.Release(); // Release the slot
                }
            }));
        }

        await Task.WhenAll(tasks);

        if (DSKHSXs.Any())
        {
            DSKHSXs = DSKHSXs.OrderByDescending(khsx => int.TryParse(khsx.MaLSX.Value?.ToString()?.Trim()?.Substring(1), out int index) ? index : 0).ToList();

            SelectedKHSX = selectKHSXID != null
                ? DSKHSXs.FirstOrDefault(x => object.Equals(x.KHSXID.Value, selectKHSXID)) ?? new KHSX()
                : DSKHSXs.FirstOrDefault() ?? new KHSX();

            DSKHSXs_base = DSKHSXs;
        }
    }

    private async Task<KHSX> GetKHSX(object? khsxid)
    {
        return await Task.Run(() =>
        {
            return SQLServerServices.GetKHSXbyID(khsxid);
        });
    }

    private string IsKHSXSelected(KHSX selectKHSX)
    {
        if (SelectedKHSX.KHSXID.Value != null && SelectedKHSX.KHSXID.Value.Equals(selectKHSX.KHSXID.Value))
        {
            return "khsx_IsSelected";
        }
        else return string.Empty;
    }

    private bool khsxwaitloading = false;
    private async Task OnKHSXClick(KHSX selectKHSX)
    {
        SelectedKHSX = selectKHSX;

        selectKHSXID = selectKHSX.KHSXID.Value;

        //Common.CurrentKHSXid = SelectedKHSX.KHSXID.Value;


        khsxwaitloading = true;
        StateHasChanged();
        await Task.Delay(50);
        khsxwaitloading = false;
        StateHasChanged();
    }

    // Open dialog chi tiet KHSX
    private async Task OnOpenChitietKHSX(KHSX seletedkhsx)
    {
        await DialogService.OpenAsync<DialogDetailKHSX>(null, new Dictionary<string, object>() { { "SelectKHSX", seletedkhsx } },
        new DialogOptions() { Width = "80%", Height = "contain", Resizable = false, Draggable = true, ShowTitle = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });
    }

    // Load danh sach ke hoach san xuat
    private async Task LoadDanhSachKHSX()
    {
        KHSX selectKHSX = await DialogService.OpenAsync<DialogDSachKHSX>(null, null,
        new DialogOptions() { Width = "90%", Height = "90%", Resizable = true, Draggable = true, ShowTitle = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        await OnGetListKHSXs();

        reloadpage = true;
        StateHasChanged();
        await Task.Delay(10);
        reloadpage = false;
        StateHasChanged();
    }

    // Searching
    private async Task SearchingKHSX(object? args)
    {
        await Task.Run(async () =>
        {
            if (reloadpage == false)
            {
                TargetMQLLot = null; DSKHSXs = new();

                reloadpage = true;

                string keysearch = args?.ToString()?.Trim() ?? string.Empty;

                if (!string.IsNullOrEmpty(keysearch))
                {
                    // Search by ma KHSX
                    var results = DSKHSXs_base.FindAll(nv => nv.MaLSX.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);

                    if (!results.Any())
                    {
                        // Search by ma QLLot
                        results = DSKHSXs_base.FindAll(khsx => khsx.DSLOT_KHSXs.Any(lot => lot.MaQuanLyLot.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0));

                        if (results.Any())
                        {
                            TargetMQLLot = results.FirstOrDefault()?.DSLOT_KHSXs.FirstOrDefault(lot => lot.MaQuanLyLot.Value?.ToString()?.Trim() == keysearch);
                        }
                        else
                        {
                            // Search by ma ThungTP
                            var resutThungEx = await LoadDSachThungTPhams(keysearch);

                            if (resutThungEx != null && resutThungEx.Any())
                            {
                                var targetThung = resutThungEx.FirstOrDefault()?.ThungTPhams.FirstOrDefault();

                                var khsxid = targetThung?.KHSXID.Value;

                                results = DSKHSXs_base.Where(khsx => khsx.KHSXID.Value?.ToString() == khsxid?.ToString()).ToList();

                                if (targetThung != null)
                                {
                                    TargetMQLLot = results.FirstOrDefault()?.DSLOT_KHSXs.FirstOrDefault(lot => lot.MaQuanLyLot.Value?.ToString() == targetThung.MaQuanLyLot.Value?.ToString());
                                }
                            }
                        }
                    }

                    DSKHSXs = results;
                }
                else
                {
                    TargetMQLLot = null;

                    await OnGetListKHSXs();
                }

                await Task.Delay(200);

                reloadpage = false;

            }
        });

        //await InvokeAsync(StateHasChanged);
    }

    // Button Reload
    private async Task ButtonReloadPress()
    {
        await Task.Run(async () =>
        {
            if (reloadpage == false)
            {
                reloadpage = true;

                await OnGetListKHSXs();

                //await Task.Delay(100);

                reloadpage = false;
            }
        });
    }

    private async Task<List<ThungTPhamExtend>?> LoadDSachThungTPhams(object? maquanlythung)
    {
        return await Task.Run(() =>
        {
            List<ThungTPhamExtend>? thungTPhamExtends = null;

            List<ThungTPham> thungTPhams = SQLServerServices.GetListThungTPhams(new Dictionary<string, object?>() { { ThungTPham.DBName.MaQuanLyThung, maquanlythung } }).thungTPhams;

            // Group the ThungTPham objects by IDThung
            var groupedResults = thungTPhams.Where(ttp => ttp.IDThung.Value != null)
                                            .GroupBy(ttp => ttp.IDThung.Value)
                                            .Select(group => new ThungTPhamExtend
                                                {
                                                    IDThung = group.Key,
                                                    ThungTPhams = group.ToList(),
                                                    Total = group.ToList().Sum(ttp => int.TryParse(ttp.SoLuong.Value?.ToString(), out int sl) ? sl : 0),
                                                    MaSanPham = SQLServerServices.GetMaSanphamByID(group.ToList().FirstOrDefault()?.SPID.Value),
                                                }).ToList();
            if (groupedResults != null)
            {
                foreach (var thung in groupedResults)
                {
                    foreach (var ttp in thung.ThungTPhams)
                    {
                        if (int.TryParse(ttp.VTofTPID.Value?.ToString(), out int vtid))
                        {
                            thung.DaNhapKho = vtid > 0;
                        }
                    }
                }

                thungTPhamExtends = groupedResults;
            }

            return thungTPhamExtends;
        });
    }

    // Them ke hoach san xuat
    private async Task AddNewKehoachSX()
    {
        KHSX newKHSX = await DialogService.OpenAsync<DialogGenerateKHSX_V3>(null, null,
        new DialogOptions() { Width = "100%", Height = "contain", Resizable = false, Draggable = true, ShowTitle = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        if (newKHSX != null)
        {
            await OnGetListKHSXs();

            if (DSKHSXs.Any())
            {
                if (selectKHSXID != null)
                {
                    SelectedKHSX = DSKHSXs.FirstOrDefault(x => object.Equals(x.KHSXID.Value, selectKHSXID)) ?? new();
                }
                else SelectedKHSX = DSKHSXs.FirstOrDefault() ?? new();
            }
        }

        reloadpage = true;
        StateHasChanged();
        await Task.Delay(10);
        reloadpage = false;
        StateHasChanged();
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { CloseTooltipOnDocumentClick = true, Position = position, Delay = delay, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }
}
