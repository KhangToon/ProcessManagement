@page "/pagedskhsanxuats"
@attribute [Authorize(Roles = "Admin")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.TienDoGCs
@using ProcessManagement.Pages.KehoachSX.BieuDo
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Pages.KehoachSX.KQGCs
@using ProcessManagement.Pages.KehoachSX.QLCongDoan
@using ProcessManagement.Pages.KehoachSX.TienDos
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using System.Collections.Concurrent
@using System.Diagnostics

@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject IJSRuntime JSRuntime

<style>
    .khsx_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }
</style>

<RadzenCard Variant="Variant.Filled" Style="height: 100%; width: 100%; padding: 5px;">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenRow Style="height: 100%; width: 100%;">
                <RadzenColumn SizeMD="4" Size="12">
                    <RadzenRow Style="height: 100%; width: 100%;">
                        <RadzenColumn SizeMD="7" Size="12">
                            <RadzenStack Style="height: 100%; width: 100%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="DANH SÁCH KẾ HOẠCH SẢN XUẤT" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn SizeMD="5" Size="12">
                            <RadzenStack Gap="15px" Style="height: 100%; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenMenu Style="height: contain; width: contain; padding: 0; margin: 0; border-radius: 10px;">
                                    <RadzenMenuItem Style="height: 100%; width: 100%;" Text="@($" {DSachModeSearchKHSX[modeSearchKHSX]}")" Icon="filter_alt">
                                        <RadzenMenuItem Text="@DSachModeSearchKHSX[0]" Click="@(async () => { modeSearchKHSX = 0; await ButtonReloadPress(); })" Icon="search"></RadzenMenuItem>
                                        <RadzenMenuItem Text="@DSachModeSearchKHSX[1]" Click="@(async () => { modeSearchKHSX = 1; await ButtonReloadPress(); })" Icon="search"></RadzenMenuItem>
                                        <RadzenMenuItem Text="@DSachModeSearchKHSX[2]" Click="@(async () => { modeSearchKHSX = 2; await ButtonReloadPress(); })" Icon="search"></RadzenMenuItem>
                                        <RadzenMenuItem Text="@DSachModeSearchKHSX[3]" Click="@(async () => { modeSearchKHSX = 3; await ButtonReloadPress(); })" Icon="search"></RadzenMenuItem>
                                        <RadzenMenuItem Text="@DSachModeSearchKHSX[4]" Click="@(async () => { modeSearchKHSX = 4; await ButtonReloadPress(); })" Icon="search"></RadzenMenuItem>
                                    </RadzenMenuItem>
                                </RadzenMenu>
                                <RadzenText Text="@($"{loadinngtime} ms")" Style="font-weight: 600; font-size: 12px"></RadzenText>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenColumn>
                <RadzenColumn SizeMD="5" Size="12">
                    <RadzenStack Gap="15px" Style="height: 100%; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenText Text="@($"{DSKHSXs.Count}")" Style="font-weight: 600; font-size: 12px"></RadzenText>
                        <RadzenButton Style="border-radius: 20px;" IsBusy="@reloadpage" Click="@(async () => await ButtonReloadPress())" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
                        <RadzenTextBox @oninput="@((args) => SearchingKHSX(args?.Value))" Placeholder="Nhập mã kế hoạch sản xuất, mã quản lý lot hoặc mã thùng để truy xuất" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 80% "></RadzenTextBox>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn SizeMD="3" Size="12">
                    <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: 100%; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <!--Tai danh sach KHSX-->
                        <RadzenButton Click="@(async () => await LoadDanhSachKHSX())" Icon="list" Text="Quản lý KHSX" Size="ButtonSize.Small" Variant="Variant.Filled"
                                      Style="height: contain; width: 50%; font-size: 14px; background-color: Highlight " />
                        <!--Tao moi ke hoach san xuat-->
                        <RadzenButton Click="@(() => AddNewKehoachSX())" Icon="add" Text="Thêm KHSX" Size="ButtonSize.Small" Variant="Variant.Filled"
                                      Style="height: contain; width: 50%; font-size: 14px; background-color: Highlight " />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
        <RadzenCard Variant="Variant.Flat" Style="height: 95%; width: 100%; padding: 10px; overflow-y: scroll">
            <RadzenStack Orientation="Orientation.Vertical" Gap="20px" Style="height: contain; width: 100%; padding: 0px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                @{
                    var khsxcount = DSKHSXs.Count;

                    var takeDSKHSXs = DSKHSXs.Take(NumberOfDisplayKHSXs).ToList();

                    var takeDSKHSXcount = takeDSKHSXs.Count;

                    foreach (var khsx in takeDSKHSXs)
                    {
                        <RadzenCard class="rz-shadow-5" Variant="Variant.Filled" Style="width: 100%; height: contain; padding: 2px;">
                            <RadzenPanel AllowCollapse="true" Style="width: 100%; padding-bottom: 0px;" Collapsed="@(khsx.isCollapsed == true)" Collapse="@(() => { khsx.isCollapsed = true; })">
                                <HeaderTemplate>
                                    <RadzenRow Gap="0" Style="width: 100%; padding-right: 10px">
                                        <RadzenColumn @onclick="() => { khsx.isCollapsed = !khsx.isCollapsed; OnCollapsedKHSXDetails(khsx); }">
                                            <RadzenStack Style="cursor: pointer; width: 100%;" Gap="0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="width: contain; padding-left: 5px; padding-right: 5px" Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="@($"{takeDSKHSXs.IndexOf(khsx) + 1}/{((takeDSKHSXcount < khsxcount) ? takeDSKHSXcount : khsxcount)}")" Style="font-size: 14px;"></RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                                        <RadzenIcon Icon="edit_note" class="rz-me-1" />
                                                    </RadzenText>
                                                    <RadzenText Text="Kế hoạch sản xuất: " Style="font-size: 18px; color: black"></RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                                        <b>@khsx.MaLSX.Value?.ToString()</b>
                                                    </RadzenText>

                                                    <RadzenStack Style="width: contain; margin-left: 40px" Gap="0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                        <RadzenButton Visible="@(object.Equals(khsx.IsDoneKHSX.Value, 1))" Icon="check" Text="Đã hoàn thành" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: darkgreen; font-size: 16px; cursor: default;"></RadzenButton>
                                                        <RadzenButton Visible="@(object.Equals(khsx.IsDoneKHSX.Value, 0))" Text="Đang sản xuất" ButtonStyle="ButtonStyle.Warning" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: goldenrod; font-size: 16px; cursor: default;"></RadzenButton>
                                                    </RadzenStack>
                                                </RadzenStack>

                                                <RadzenStack Style="width: contain; padding-left: 5px; padding-right: 5px" Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Mã sản phẩm: " Style="font-size: 18px; color: black; margin-left: 30px"></RadzenText>
                                                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                                                        <b>@khsx.TargetSanPham?.SP_MaSP.Value?.ToString()</b>
                                                    </RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenColumn>
                                        <RadzenColumn Size="3" @onclick="() => { khsx.isCollapsed = !khsx.isCollapsed; OnCollapsedKHSXDetails(khsx); }" Style="cursor: pointer;">

                                        </RadzenColumn>
                                        <RadzenColumn Size="2">
                                            <RadzenStack Style="width: 100%;" Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                @{
                                                    _ = int.TryParse(khsx.IsAllowDisplay.Value?.ToString(), out int allowdisplay) ? allowdisplay : 0;
                                                }
                                                <RadzenCheckBox TValue="bool" Value="@(allowdisplay == 1)" Change="@(async (args) => await OnAllowHienThiKHSXChanged(khsx, args))" Name="@($"isallowdisplayproperty_{khsx.KHSXID.Value}")" />
                                                <RadzenLabel Visible="@(allowdisplay == 1)" Text="Hiển thị" Style="color: darkgreen; font-size: 14px; font-weight: 500; cursor: pointer" Component="@($"isallowdisplayproperty_{khsx.KHSXID.Value}")" />
                                                <RadzenLabel Visible="@(allowdisplay == 0)" Text="Hiển thị" Style="color: red; font-size: 14px; font-weight: 500; cursor: pointer" Component="@($"isallowdisplayproperty_{khsx.KHSXID.Value}")" />
                                                <RadzenButton Click="@(() => { khsx.isCollapsed = !khsx.isCollapsed; OnCollapsedKHSXDetails(khsx); })" Text="@($"{(khsx.isCollapsed ? "Mở rộng" : "Thu gọn")}")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Style="font-weight: 500; font-size: 14px; padding-left: 15px; padding-right: 15px; cursor: default"></RadzenButton>
                                            </RadzenStack>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </HeaderTemplate>
                                <ChildContent>
                                    <RadzenTabs Style="width: 100%; min-height: 100% !important; margin-top: 15px" SelectedIndex="@selectedTabIndex">
                                        <Tabs>
                                            <RadzenTabsItem>
                                                <Template>
                                                    <RadzenText Text="@("BIỂU ĐỒ TIẾN ĐỘ")" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                                </Template>
                                                <ChildContent>
                                                    <RadzenStack Visible="@(khsx.isCollapsed == false)">
                                                        @*<BootstrapChart TargetKHSX="@khsx"></BootstrapChart>*@                                                
                                                                                                                                                                                                                                                <ChartTracking TargetKHSX="@khsx"></ChartTracking>
                                                    </RadzenStack>
                                                </ChildContent>
                                            </RadzenTabsItem>

                                            <RadzenTabsItem>
                                                <Template>
                                                    <RadzenText Text="@($"THÔNG TIN KHSX - {khsx.MaLSX.Value?.ToString()}")" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                                </Template>
                                                <ChildContent>
                                                    <RadzenStack Visible="@(khsx.isCollapsed == false)">
                                                        <DialogDetailKHSX TargetMQLLot="@TargetMQLLot" SelectKHSX="@khsx" IsNotDialog="true"></DialogDetailKHSX>
                                                    </RadzenStack>
                                                </ChildContent>
                                            </RadzenTabsItem>

                                            <RadzenTabsItem>
                                                <Template>
                                                    <RadzenText Text="@("DANH SÁCH LOT NVL")" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                                </Template>
                                                <ChildContent>
                                                    <RadzenStack Visible="@(khsx.isCollapsed == false)">
                                                        <DanhSachLotNVL TargetKHSX="@khsx"></DanhSachLotNVL>
                                                    </RadzenStack>
                                                </ChildContent>
                                            </RadzenTabsItem>

                                            <RadzenTabsItem>
                                                <Template>
                                                    <RadzenText Text="@("THEO DÕI SẢN XUẤT")" Style="color: darkred; font-weight: 500; font-size: 15px;"></RadzenText>
                                                </Template>
                                                <ChildContent>
                                                    <RadzenStack Visible="@(khsx.isCollapsed == false)">
                                                        <TheoDoiSanXuat TargetKHSX="@khsx"></TheoDoiSanXuat>
                                                    </RadzenStack>
                                                </ChildContent>
                                            </RadzenTabsItem>

                                            <RadzenTabsItem>
                                                <Template>
                                                    <RadzenText Text="@("QUẢN LÝ CÔNG ĐOẠN")" Style="color: darkred; font-weight: 500; font-size: 15px"></RadzenText>
                                                </Template>
                                                <ChildContent>
                                                    <RadzenStack Visible="@(khsx.isCollapsed == false)">
                                                        <QLCongDoanPage TargetMQLLot="@TargetMQLLot" TargetKHSX="@khsx"></QLCongDoanPage>
                                                    </RadzenStack>
                                                </ChildContent>
                                            </RadzenTabsItem>
                                        </Tabs>
                                    </RadzenTabs>
                                </ChildContent>
                                <SummaryTemplate>
                                    <!--LSX infor-->
                                    <!--Tien do gia cong-->
                                    <RadzenRow Gap="0" Style="width: 100%; height: contain;">
                                        <RadzenColumn Size="12" SizeMD="12">
                                            <RadzenStack Style="width: 100%; height: contain; padding: 20px; padding-top: 10px; padding-bottom: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenCard @onclick="() => { khsx.isCollapsed = false; }" Visible=@(khsx.KHSXID.Value != null) Variant="Variant.Outlined" Style="cursor: pointer; width: 100%; height: contain; padding: 0px; border-radius: 10px; border-width: 2px">
                                                    <RadzenStack Orientation="Orientation.Vertical" Gap="0" Style="height: 100%; width: 100%; padding: 10px; padding-top: 0; padding-bottom: 0" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                        <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" Style="height: 100%; width: 100%; padding: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Mã KHSX" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                <RadzenText Visible="@(khsx?.MaLSX.Value != null)" Text="@khsx?.MaLSX.Value?.ToString()" Style="font-size: 16px; font-weight: bold; color: red"></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="@Common.SP_MaSP" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                <RadzenText Visible="@(khsx?.TargetSanPham != null)" Text="@(khsx?.TargetSanPham?.SP_MaSP.Value?.ToString())" Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="@Common.SP_TenSanPham" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                <RadzenText Visible="@(khsx?.TargetSanPham != null)" Text="@(khsx?.TargetSanPham?.SP_TenSanPham.Value?.ToString())" Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Nguyên vật liệu" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                <RadzenText Visible="@(khsx?.DSachNVLofKHSXs.Count > 0)" Text="@(khsx?.DSachNVLofKHSXs is { Count: > 0 } ? string.Join(", ", khsx.DSachNVLofKHSXs.Select(nvl => nvl.TenNVL)) : string.Empty)"
                                                                            Style="font-size: 16px; font-weight: bold; color: darkblue "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Số lượng PO" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                @{
                                                                    int.TryParse(khsx?.SLSanPhamPO.Value?.ToString(), out int slsp);
                                                                }
                                                                <RadzenText Visible="@(khsx?.SLSanPhamPO.Value != null)" Text="@($"{slsp + khsx?.SoluongBoSung}")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Tỉ lệ lỗi cho phép" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                @{
                                                                    int slloichophep = (int.TryParse(khsx.SLSanPhamSX.Value?.ToString(), out int slsx) ? slsx : 0) - (int.TryParse(khsx.SLSanPhamPO.Value?.ToString(), out int slpo) ? slpo : 0);
                                                                }
                                                                <RadzenText Text="@($"{khsx?.TileLoi.Value?.ToString() ?? "0"} (%) ({slloichophep} pcs)")" Style="font-size: 16px; font-weight: bold; color: darkred "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Số lượng NVL" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>

                                                                @{
                                                                    int.TryParse(khsx?.DinhMuc.Value?.ToString(), out int dm);
                                                                }
                                                                <RadzenText Visible="@(khsx?.DinhMuc.Value != null)" Text="@($"{dm + khsx?.SoluongBoSung} (pcs)")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Số lượng LOT" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                <RadzenText Visible="@(khsx.DSLOT_KHSXs.Count > 0)" Text="@($"{khsx.DSLOT_KHSXs.Count} (lot)")" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Visible="false" Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Mã quản lý LOT" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                @{
                                                                    NguyenCongofKHSX? fistCongdoan = khsx?.DSachCongDoans.FirstOrDefault();
                                                                }
                                                                <RadzenText Visible="@(fistCongdoan != null)" Text="@($"{fistCongdoan?.DSachNVLCongDoans.FirstOrDefault()?.MaQuanLy.Value?.ToString() ?? "_"} --> {fistCongdoan?.DSachNVLCongDoans.LastOrDefault()?.MaQuanLy.Value ?? "_"}")"
                                                                            Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                            </RadzenStack>

                                                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style="height: 50%; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="@Common.NgayTao" Style="font-size: 16px; font-weight: 500; color: darkgray "></RadzenText>
                                                                @if (khsx?.NgayTao.Value != null)
                                                                {
                                                                    DateTime ngaytao = Convert.ToDateTime(khsx?.NgayTao.Value?.ToString());
                                                                    <RadzenText Text="@ngaytao.ToString(Common.FormatNoTime_ddMMyyyy)" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                                }
                                                                else
                                                                {
                                                                    <RadzenText Text="----" Style="font-size: 16px; font-weight: bold; color: black "></RadzenText>
                                                                }
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                        <RadzenStack Visible="false" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%; padding: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                            @{
                                                                <RadzenText Text="Xem chi tiết KHSX" @onclick="@(() => OnOpenChitietKHSX(khsx))" TextAlign="TextAlign.Center" Style="font-size: 16px; font-weight: 500; color: Highlight; cursor: pointer "></RadzenText>
                                                            }
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                </RadzenCard>
                                            </RadzenStack>
                                        </RadzenColumn>

                                        <RadzenColumn Size="12" SizeMD="12">
                                            <RadzenStack Gap="10px" Style="width: 100%; padding: 20px; padding-top: 0px; padding-bottom: 10px; overflow-x: scroll" Orientation=Orientation.Horizontal AlignItems="AlignItems.End" JustifyContent="JustifyContent.Start">
                                                @foreach (var (index, cdoan) in khsx.DSachCongDoans.Select((item, idx) => (idx, item)))
                                                {
                                                    <RadzenCard class="rz-shadow-5" Variant="Variant.Flat" Style="height: contain; padding: 2px;">
                                                        <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style="height: contain; width: contain; min-width: 160px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                            <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                <RadzenButton Text="@($"{index + 1}.  {cdoan.TenCongDoan.Value?.ToString()}")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Variant="Variant.Flat" Size="ButtonSize.Small"
                                                                              Style="font-weight: 600; white-space: nowrap; font-size: 16px; cursor: default; border-radius: 3px; padding: 5px 10px; width: 100%"></RadzenButton>
                                                            </RadzenStack>
                                                            <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenButton Text="@($"{cdoan.sumTotalSubmited}/{cdoan.sLlimit}")" ButtonStyle="@((cdoan.sumTotalSubmited == cdoan.sLlimit) ? ButtonStyle.Success : ButtonStyle.Primary)" Shade="@((cdoan.sumTotalSubmited == cdoan.sLlimit) ? Shade.Darker : Shade.Light)" Size="ButtonSize.Small" Style="font-weight: 600; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"Tiến độ", 100))"></RadzenButton>
                                                                <RadzenButton Text="@($"{cdoan.sumOKSubmited}")" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: darkgreen; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $" OK", 100))"></RadzenButton>
                                                                <RadzenButton Visible="@(cdoan.sumNGSubmited > 0)" Text="@($"{cdoan.sumNGSubmited}")" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Small" Style="font-weight: 600; color: darkred; font-size: 16px; cursor: default; border-radius: 3px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"NG", 100))"></RadzenButton>
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenCard>
                                                }
                                            </RadzenStack>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </SummaryTemplate>
                            </RadzenPanel>
                        </RadzenCard>
                    }

                    <RadzenRow Style="height: contain; width: 100%;">
                        <RadzenColumn Size="4" SizeSM="4">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="20px" Style="height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenLabel Style="font-size: 15px; font-weight: 600; padding-left: 20px" Text="@($"Hiển thị {((NumberOfDisplayKHSXs < khsxcount) ? NumberOfDisplayKHSXs : khsxcount)}/{khsxcount} KHSX")"></RadzenLabel>
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="4" SizeSM="4">
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="20px" Style="height: contain; width: 100%; padding: 0px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenButton Visible=@(NumberOfDisplayKHSXs < khsxcount) Click="@(() => NumberOfDisplayKHSXs += 20)" Text="Xem thêm" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                              Style="height: contain; width: contain; font-size: 15px; font-weight: 600;" />
                            </RadzenStack>
                        </RadzenColumn>
                        <RadzenColumn Size="4" SizeSM="4">
                        </RadzenColumn>
                    </RadzenRow>
                }

            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
</RadzenCard>

@code {
    private List<KHSX> DSKHSXs = new();
    private KHSX SelectedKHSX = new();
    private static int selectedTabIndex = 0;
    private static object? selectKHSXID;
    private bool reloadpage = false;

    private List<KHSX> DSKHSXs_base = new();

    private KHSX_LOT? TargetMQLLot;

    private Dictionary<int, string> DSachModeSearchKHSX = new() { { 0, "Tất cả" }, { 1, "Được hiển thị" }, { 2, "Đã ẩn" }, { 3, "Đã hoàn thành" }, { 4, "Chưa hoàn thành" } };
    private static int modeSearchKHSX = 1;

    private int NumberOfDisplayKHSXs = 20;

    private string searchingText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ButtonReloadPress();

        await base.OnInitializedAsync();
    }

    private (int, int, int) GetResultsKQGCperCDoanAllLots(object? cdid, object? khsxid)
    {
        int sumok = 0; int sumng = 0;

        Dictionary<string, object?> parameters = new();

        parameters.Add($"{KetQuaGC.KQGCDBName.NCID}", cdid);

        parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", khsxid);

        (List<KetQuaGC> DSachKetQuaGCsBase, string resultMess) = SQLServerServices.GetListKetQuaGC(parameters, false);

        sumok = DSachKetQuaGCsBase.Sum(kqgc => int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok) ? slok : 0);
        sumng = DSachKetQuaGCsBase.Sum(kqgc => int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng) ? slng : 0);

        return (sumok, sumng, (sumok + sumng));
    }

    long loadinngtime;

    private async Task OnGetListKHSXs()
    {
        var stopwatch = Stopwatch.StartNew(); // Start the timer

        var dskhsxs = new ConcurrentBag<KHSX>(); // using for not missing item in await task
        //var listkhsxids = SQLServerServices.GetlistKHSXid();

        List<KHSX> baseKHSXs = new(); // danh sach KHSX (chi cac truong mac dinh)

        // Apply filtering

        baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters_AsignColumn(new(), new() { Common.KHSXID, Common.IsDoneKHSX, Common.IsAllowDisplay }, true).kHSXes;

        if (modeSearchKHSX == 0) // Tat ca
        {
            //baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters_AsignColumn(new(), new() { Common.KHSXID, Common.IsDoneKHSX, Common.IsAllowDisplay }, true).kHSXes;
        }
        else if (modeSearchKHSX == 1) // Duoc hien thi
        {
            //baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters(new() { { Common.IsAllowDisplay, 1 } }, false).kHSXes;
            baseKHSXs = baseKHSXs.Where(khsx => object.Equals(khsx.IsAllowDisplay.Value, 1)).ToList();
        }
        else if (modeSearchKHSX == 2) // Khong duoc hien thi
        {
            //baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters(new() { { Common.IsAllowDisplay, 0 } }, false).kHSXes;
            baseKHSXs = baseKHSXs.Where(khsx => object.Equals(khsx.IsAllowDisplay.Value, 0)).ToList();
        }
        else if (modeSearchKHSX == 3) // KHSX Done
        {
            //baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters(new() { { Common.IsDoneKHSX, 1 } }, false).kHSXes;
            baseKHSXs = baseKHSXs.Where(khsx => object.Equals(khsx.IsDoneKHSX.Value, 1)).ToList();
        }
        else if (modeSearchKHSX == 4) // KHSX Not Done
        {
            //baseKHSXs = SQLServerServices.GetListKHSXsByAnyParmeters(new() { { Common.IsDoneKHSX, 0 } }, false).kHSXes;
            baseKHSXs = baseKHSXs.Where(khsx => object.Equals(khsx.IsDoneKHSX.Value, 0)).ToList();
        }

        var tasks = new List<Task>();
        var semaphore = new SemaphoreSlim(30); // Increase concurrency limit

        foreach (var emptykhsx in baseKHSXs)
        {
            await semaphore.WaitAsync(); // Wait for an available slot
            tasks.Add(Task.Run(async () =>
            {
                try
                {
                    if (int.TryParse(emptykhsx.KHSXID.Value?.ToString(), out int khsxid))
                    {
                        KHSX kHSX = await GetKHSX(khsxid);

                        if (kHSX.KHSXID.Value != null)
                        {
                            // Get PhieuXuatKho bosung
                            Dictionary<string, object?> pars = new Dictionary<string, object?>() { { Common.KHSXID, kHSX.KHSXID.Value } };

                            pars.Add(Common.IsPhieuBoSungNVL, 1);

                            kHSX.ListPXKBoSung = SQLServerServices.GetListPhieuXuatKhos(pars).phieuxuatkhos;

                            kHSX.SoluongBoSung = kHSX.ListPXKBoSung?.Sum(pxk => pxk.DSNVLofPXKs.Sum(nvl => int.TryParse(nvl.NVLXKSoLuongAll.Value?.ToString(), out int dm) ? dm : 0)) ?? 0;


                            NguyenCongofKHSX preCongDoan = new();

                            _ = int.TryParse(kHSX.DinhMuc.Value?.ToString(), out int dinhmuc) ? dinhmuc : 0;

                            // Them SL bo sung
                            dinhmuc += kHSX.SoluongBoSung;

                            foreach (var congdoan in kHSX.DSachCongDoans)
                            {
                                // Tinh so luong dasubmit moi cong doan cua KHSX
                                (int sumok, int sumng, int totalokng) = GetResultsKQGCperCDoanAllLots(congdoan.NCID.Value, kHSX.KHSXID.Value);

                                congdoan.sumOKSubmited = sumok; congdoan.sumNGSubmited = sumng; congdoan.sumTotalSubmited = totalokng;

                                if (kHSX.DSachCongDoans.IndexOf(congdoan) == 0)
                                {
                                    congdoan.sLlimit = dinhmuc;
                                }
                                else
                                {
                                    congdoan.sLlimit = preCongDoan.sLlimit - preCongDoan.sumNGSubmited;
                                }

                                congdoan.IsDoneCongDoan = congdoan.sumTotalSubmited == congdoan.sLlimit;

                                // // Update congdoan
                                // congdoan.SumOKSubmited.Value = sumok; congdoan.SumNGSubmited.Value = sumng; congdoan.SumTotalSubmited.Value = totalokng;
                                // congdoan.SLlimit.Value = congdoan.sLlimit;

                                // (int updateresult, string error) = SQLServerServices.UpdateNguyenCongofKHSX(congdoan);

                                // if (updateresult == -1)
                                // {

                                // }

                                preCongDoan = congdoan;
                            }

                            // Update IsDoneKHSX if value is null
                            // if (emptykhsx.IsDoneKHSX.Value == null || object.Equals(emptykhsx.IsDoneKHSX.Value, 0))
                            // {
                            //     bool isDoneKHSX = kHSX.DSachCongDoans.All(cd => cd.IsDoneCongDoan);

                            //     (int updateresult, string error) = SQLServerServices.UpdateKHSXProperty(khsxid, Common.IsDoneKHSX, (isDoneKHSX) ? 1 : 0);

                            //     if (updateresult == -1)
                            //     {

                            //     }
                            // }

                            bool isDoneKHSX = kHSX.DSachCongDoans.All(cd => cd.IsDoneCongDoan);

                            (int updateresult, string error) = SQLServerServices.UpdateKHSXProperty(khsxid, Common.IsDoneKHSX, (isDoneKHSX) ? 1 : 0);

                            if (updateresult == -1)
                            {

                            }

                            dskhsxs.Add(kHSX);
                        }
                    }
                }
                catch (Exception)
                {
                    // Log or handle the exception, possibly with ex.Message
                }
                finally
                {
                    semaphore.Release(); // Release the slot
                }
            }));
        }

        await Task.WhenAll(tasks);

        if (dskhsxs.Any())
        {
            DSKHSXs_base = dskhsxs
                .OrderByDescending(khsx => int.TryParse(khsx.KHSXID.Value?.ToString(), out int index) ? index : 0)
                .ToList();

            SelectedKHSX = selectKHSXID != null
                ? DSKHSXs.FirstOrDefault(x => object.Equals(x.KHSXID.Value, selectKHSXID)) ?? new KHSX()
                : DSKHSXs.FirstOrDefault() ?? new KHSX();

            DSKHSXs = DSKHSXs_base;
        }
        else { DSKHSXs = new(); }

        stopwatch.Stop(); // Stop the timer
        loadinngtime = stopwatch.ElapsedMilliseconds; // Get the elapsed time
    }

    private async Task<KHSX> GetKHSX(object? khsxid)
    {
        return await Task.Run(() =>
        {
            return SQLServerServices.GetKHSXbyIDRuduceTime(khsxid);
        });
    }

    private string IsKHSXSelected(KHSX selectKHSX)
    {
        if (SelectedKHSX.KHSXID.Value != null && SelectedKHSX.KHSXID.Value.Equals(selectKHSX.KHSXID.Value))
        {
            return "khsx_IsSelected";
        }
        else return string.Empty;
    }

    // Open dialog chi tiet KHSX
    private async Task OnOpenChitietKHSX(KHSX seletedkhsx)
    {
        await DialogService.OpenAsync<DialogDetailKHSX>(null, new Dictionary<string, object>() { { "SelectKHSX", seletedkhsx } },
        new DialogOptions() { Width = "80%", Height = "contain", Resizable = false, Draggable = true, ShowTitle = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });
    }

    // Load danh sach ke hoach san xuat
    private async Task LoadDanhSachKHSX()
    {
        KHSX selectKHSX = await DialogService.OpenAsync<DialogDSachKHSX>(null, new() { { "DSKHSXs_base", DSKHSXs_base } },
        new DialogOptions() { Width = "90%", Height = "90%", Resizable = true, Draggable = true, ShowTitle = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        await ButtonReloadPress();
    }

    int searchCount = 0;
    // Searching
    private async Task SearchingKHSX(object? args)
    {
        string keysearch = args?.ToString()?.Trim() ?? string.Empty;

        searchingText = keysearch;

        if (reloadpage == false)
        {
            reloadpage = true;

            await HandleSearching(keysearch);

            reloadpage = false;
        }
    }

    private async Task HandleSearching(string? keysearch)
    {
        searchCount++;

        if (!string.IsNullOrEmpty(keysearch))
        {
            TargetMQLLot = null; DSKHSXs = new();

            //var results = DSKHSXs_base.FindAll(nv => nv.MaLSX.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);
            List<KHSX> results = new();

            // Search by ma KHSX
            results = new List<KHSX>() { { SQLServerServices.GetKHSXbyMaKHSXRuduceTime(keysearch) } };

            if (results.All(khsx => khsx.KHSXID.Value == null))
            {
                // Search by ma SanPham
                results = DSKHSXs_base.FindAll(khsx => khsx.TargetSanPham?.SP_MaSP.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);
            }

            if (results.Any(khsx => khsx.KHSXID.Value != null))
            {
                foreach (var kHSX in results)
                {
                    // Get PhieuXuatKho bosung
                    Dictionary<string, object?> pars = new Dictionary<string, object?>() { { Common.KHSXID, kHSX.KHSXID.Value } };

                    pars.Add(Common.IsPhieuBoSungNVL, 1);

                    kHSX.ListPXKBoSung = SQLServerServices.GetListPhieuXuatKhos(pars).phieuxuatkhos;

                    kHSX.SoluongBoSung = kHSX.ListPXKBoSung?.Sum(pxk => pxk.DSNVLofPXKs.Sum(nvl => int.TryParse(nvl.NVLXKSoLuongAll.Value?.ToString(), out int dm) ? dm : 0)) ?? 0;


                    NguyenCongofKHSX preCongDoan = new();

                    _ = int.TryParse(kHSX.DinhMuc.Value?.ToString(), out int dinhmuc) ? dinhmuc : 0;

                    // Them SL bo sung
                    dinhmuc += kHSX.SoluongBoSung;

                    foreach (var congdoan in kHSX.DSachCongDoans)
                    {
                        // Tinh so luong dasubmit moi cong doan cua KHSX
                        (int sumok, int sumng, int totalokng) = GetResultsKQGCperCDoanAllLots(congdoan.NCID.Value, kHSX.KHSXID.Value);

                        congdoan.sumOKSubmited = sumok; congdoan.sumNGSubmited = sumng; congdoan.sumTotalSubmited = totalokng;

                        if (kHSX.DSachCongDoans.IndexOf(congdoan) == 0)
                        {
                            congdoan.sLlimit = dinhmuc;
                        }
                        else
                        {
                            congdoan.sLlimit = preCongDoan.sLlimit - preCongDoan.sumNGSubmited;
                        }

                        congdoan.IsDoneCongDoan = congdoan.sumTotalSubmited == congdoan.sLlimit;

                        preCongDoan = congdoan;
                    }
                }
            }
            else
            {
                // Search by ma QLLot
                results = DSKHSXs_base.FindAll(khsx => khsx.DSLOT_KHSXs.Any(lot => lot.MaQuanLyLot.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0));

                if (results.Any())
                {
                    TargetMQLLot = results.FirstOrDefault()?.DSLOT_KHSXs.FirstOrDefault(lot => lot.MaQuanLyLot.Value?.ToString()?.Trim() == keysearch);
                }
                else
                {
                    // Search by ma ThungTP
                    var resutThungEx = await LoadDSachThungTPhams(keysearch);

                    if (resutThungEx != null && resutThungEx.Any())
                    {
                        var targetThung = resutThungEx.FirstOrDefault()?.ThungTPhams.FirstOrDefault();

                        var khsxid = targetThung?.KHSXID.Value;

                        results = DSKHSXs_base.Where(khsx => khsx.KHSXID.Value?.ToString() == khsxid?.ToString()).ToList();

                        if (targetThung != null)
                        {
                            TargetMQLLot = results.FirstOrDefault()?.DSLOT_KHSXs.FirstOrDefault(lot => lot.MaQuanLyLot.Value?.ToString() == targetThung.MaQuanLyLot.Value?.ToString());
                        }
                    }
                }
            }

            DSKHSXs = results;
        }
        else
        {
            TargetMQLLot = null;

            DSKHSXs = DSKHSXs_base;
        }

        if (searchingText.Trim() != keysearch?.Trim())
        {
            // research
            await HandleSearching(searchingText);
        }

        if (string.IsNullOrEmpty(searchingText))
        {
            searchCount = 0;
        }
    }

    // Button Reload
    private async Task ButtonReloadPress()
    {
        reloadpage = true;
        await Task.Delay(50);
        reloadpage = false;

        await OnGetListKHSXs();

        if (!string.IsNullOrEmpty(searchingText))
        {
            await SearchingKHSX(searchingText);
        }
    }

    private async Task OnAllowHienThiKHSXChanged(KHSX targetkhsx, bool allowhienthi)
    {
        (int udresult, string uderror) = SQLServerServices.UpdateKHSXProperty(targetkhsx.KHSXID.Value, Common.IsAllowDisplay, allowhienthi ? 1 : 0);

        await ButtonReloadPress();
    }

    private void OnCollapsedKHSXDetails(KHSX targetkhsx)
    {
        targetkhsx.IsCollapsed.Value = targetkhsx.isCollapsed ? 1 : 0;

        (int udresult, string uderror) = SQLServerServices.UpdateKHSXProperty(targetkhsx.KHSXID.Value, Common.IsCollapsed, targetkhsx.IsCollapsed.Value);


        // Set stop while load chart KHSX
        if (targetkhsx.isCollapsed)
        {
            (int updatesuccess, string error) = SQLServerServices.UpdateKHSXProperty(targetkhsx.KHSXID.Value, Common.IsChartRunning, 0);
        }
    }

    private async Task<List<ThungTPhamExtend>?> LoadDSachThungTPhams(object? maquanlythung)
    {
        return await Task.Run(() =>
        {
            List<ThungTPhamExtend>? thungTPhamExtends = null;

            List<PartOfThungTPham> thungTPhams = SQLServerServices.GetListPartOfThungTPs(new Dictionary<string, object?>() { { PartOfThungTPham.DBName.MaQuanLyThung, maquanlythung } }).thungTPhams;

            // Group the ThungTPham objects by IDThung
            var groupedResults = thungTPhams.Where(ttp => ttp.IDThung.Value != null)
                                            .GroupBy(ttp => ttp.IDThung.Value)
                                            .Select(group => new ThungTPhamExtend
                                            {
                                                IDThung = group.Key,
                                                ThungTPhams = group.ToList(),
                                                Total = group.ToList().Sum(ttp => int.TryParse(ttp.SoLuong.Value?.ToString(), out int sl) ? sl : 0),
                                                MaSanPham = SQLServerServices.GetMaSanphamByID(group.ToList().FirstOrDefault()?.SPID.Value),
                                            }).ToList();
            if (groupedResults != null)
            {
                foreach (var thung in groupedResults)
                {
                    foreach (var ttp in thung.ThungTPhams)
                    {
                        if (int.TryParse(ttp.VTofTPID.Value?.ToString(), out int vtid))
                        {
                            thung.DaNhapKho = vtid > 0;
                        }
                    }
                }

                thungTPhamExtends = groupedResults;
            }

            return thungTPhamExtends;
        });
    }

    // Them ke hoach san xuat
    private async Task AddNewKehoachSX()
    {
        KHSX newKHSX = await DialogService.OpenAsync<DialogGenerateKHSX_V3>(null, null,
        new DialogOptions() { Width = "100%", Height = "contain", Resizable = false, Draggable = true, ShowTitle = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        if (newKHSX != null)
        {
            await OnGetListKHSXs();

            if (DSKHSXs.Any())
            {
                if (selectKHSXID != null)
                {
                    SelectedKHSX = DSKHSXs.FirstOrDefault(x => object.Equals(x.KHSXID.Value, selectKHSXID)) ?? new();
                }
                else SelectedKHSX = DSKHSXs.FirstOrDefault() ?? new();
            }
        }

        reloadpage = true;
        StateHasChanged();
        await Task.Delay(1);
        reloadpage = false;
        StateHasChanged();
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { CloseTooltipOnDocumentClick = true, Position = position, Delay = delay, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }
}
