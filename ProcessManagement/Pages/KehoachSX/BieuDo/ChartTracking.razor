@page "/charttracking_"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.XuatKho
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.KHSXs.MQL_Template
@using ProcessManagement.Models.QLCDOAN
@using ProcessManagement.Pages.KehoachSX.BieuDo.Models
@using ProcessManagement.Pages.KehoachSX.MQL_Template
@using ProcessManagement.Pages.Manager_NVL.Dialogs
@using ProcessManagement.Pages.Manager_NguyenCong.Dialogs
@using ProcessManagement.Pages.Manager_SanPham.Dialogs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<RadzenStack Gap="0" Style="width: 100%; height: contain; background-color: white" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenRow Style="width: 100%; height: contain;">
        <RadzenColumn Size="12" Style="padding: 10px">
            <RadzenStack Gap="20px" Style="width: 100%; height: contain;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenLabel>
                        <strong>Tiến độ sản xuất</strong>
                        <span>@($"(updated at: {updatedTime})")</span>
                    </RadzenLabel>

                    <RadzenButton Visible=@(!chartIsrunning) Icon="warning" Text="Stopped"
                                  Style="font-size: 15px; border-radius: 5px; width: contain; color: red" Shade="Shade.Light" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small"></RadzenButton>

                    <RadzenButton Visible=@(chartIsrunning) Icon="check_circle" Text="Running"
                                  Style="font-size: 15px; border-radius: 5px; width: contain;" Shade="Shade.Light" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small"></RadzenButton>

                    <RadzenLabel>
                        <span>@($"Mã lệnh sản xuất")</span>
                        <strong>@($"{TargetKHSX.MaLSX.Value}")</strong>
                    </RadzenLabel>
                    <RadzenLabel>
                        <span>@($"Sản phẩm")</span>
                        <strong>@($"{TargetKHSX.TargetSanPham?.SP_MaSP.Value}")</strong>
                    </RadzenLabel>

                    <RadzenButton Visible=@(!IsDisableViewInNewTab) Click="@(async () => { await OpenChartTracking();})" Icon="share" Text="View in new tab"
                                  Style="font-size: 16px; border-radius: 5px; width: contain;" Shade="Shade.Dark" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"></RadzenButton>

                </RadzenStack>
                <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenChart Style="min-height: 500px; width: 100%">
                        <RadzenColumnSeries Fill="green" Data="@OKdatas" CategoryProperty="Property" Title="OK" LineType="LineType.Dashed" ValueProperty="Value">

                            <TooltipTemplate Context="data">
                                <RadzenStack Gap="5px" Style="height: contain" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                                    <RadzenLabel Text="OK" Style="font-weight: 600; color: darkgreen"></RadzenLabel>
                                    <RadzenStack Gap="10px" Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenLabel Text="Công đoạn: "></RadzenLabel>
                                        <RadzenLabel Text="@data.Property" Style="font-weight: 600; color: black"></RadzenLabel>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenLabel Text="Tiến độ: "></RadzenLabel>
                                        <RadzenLabel Text="@($"{data.Value} (pcs)")" Style="font-weight: 600; color: darkgreen"></RadzenLabel>
                                    </RadzenStack>
                                </RadzenStack>
                            </TooltipTemplate>
                            <ChildContent>
                                <RadzenSeriesDataLabels Visible="true" />
                                <RadzenChartTooltip></RadzenChartTooltip>
                            </ChildContent>
                        </RadzenColumnSeries>

                        <RadzenColumnOptions Radius="5" Width="30" />

                        <RadzenCategoryAxis Padding="20" LabelAutoRotation="15">
                            <RadzenAxisTitle Text="Công đoạn sản xuất" />
                        </RadzenCategoryAxis>

                        <RadzenValueAxis TickDistance="100" Min="0" Max=@((int.TryParse(TargetKHSX.DinhMuc.Value?.ToString(), out int max) ? max : 1000) + 200) Step="@((max/5))" Formatter="@FormatLable">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Tiến độ sản xuất (OK/NG)" />
                        </RadzenValueAxis>

                        <RadzenLegend Visible=true Position="LegendPosition.Right" />
@*                 <RadzenChartTooltipOptions Style="border: 1px solid rgb(236,72,127); background: #eee; color: #000;" />
 *@            </RadzenChart>
                </RadzenStack>
                <RadzenStack Style="width: 100%; height: contain; padding-left: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenChart Style="min-height: 100px; width: 100%">
                        <RadzenColumnSeries Fill="red" Data="@NGdatas" CategoryProperty="Property" Title="NG" ValueProperty="Value">
                            <TooltipTemplate Context="data">
                                <RadzenStack Gap="5px" Style="height: contain" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                                    <RadzenLabel Text="NG" Style="font-weight: 600; color: red"></RadzenLabel>
                                    <RadzenStack Gap="10px" Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenLabel Text="Công đoạn: "></RadzenLabel>
                                        <RadzenLabel Text="@data.Property" Style="font-weight: 600; color: black"></RadzenLabel>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: 100%" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenLabel Text="Số lượng lỗi: "></RadzenLabel>
                                        <RadzenLabel Text="@($"{data.Value} (pcs)")" Style="font-weight: 600; color: red"></RadzenLabel>
                                    </RadzenStack>
                                </RadzenStack>
                            </TooltipTemplate>
                            <ChildContent>
                                <RadzenSeriesDataLabels Visible="true" />
                                <RadzenChartTooltip></RadzenChartTooltip>
                            </ChildContent>
                        </RadzenColumnSeries>
                        <RadzenColumnOptions Radius="5" Width="30" />
                        <RadzenCategoryAxis Padding="20" LabelAutoRotation="15">
                        </RadzenCategoryAxis>
                        <RadzenValueAxis TickDistance="10" Min="0" Max="20" Step="5" Formatter="@FormatLable">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Số lượng sản phẩm lỗi (NG)" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "khsxid")]
    public int KHSXID { get; set; } = 0;

    [Parameter]
    [SupplyParameterFromQuery(Name = "disable")]
    public bool IsDisableViewInNewTab { get; set; } = false;

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private List<KetQuaGC> DSachKetQuaGCs = new();
    private bool isLoadingKQGCs = false;

    public List<ChartItem> OKdatas { get; set; } = new();
    List<SeriesColorRange> OKfillRange = new List<SeriesColorRange>()
    {
        new SeriesColorRange() {Min = 0, Max=999999, Color = "green"}
    };

    public List<ChartItem> NGdatas { get; set; } = new();
    List<SeriesColorRange> NGfillRange = new List<SeriesColorRange>()
    {
        new SeriesColorRange() {Min = 0, Max=1000, Color = "red"}
    };

    string FormatLable(object value)
    {
        return $"{value} (pcs)";
    }

    private DateTime updatedTime;

    private bool chartIsrunning = false;

    protected override async Task OnInitializedAsync()
    {
        if (KHSXID > 0)
        {
            TargetKHSX = SQLServerServices.GetKHSXbyID(KHSXID); TargetKHSX.isCollapsed = false;
        }

        await base.OnInitializedAsync();
    }

    private bool isFirtLoad_ofchart = false;

    protected async override void OnAfterRender(bool firstRender)
    {
        // Stop when is collapsed
        if (firstRender)
        {
            isFirtLoad_ofchart = true;

            if (TargetKHSX.KHSXID.Value != null && TargetKHSX.isCollapsed == false)
            {
                // Reset all running chart of this KHSX
                (int updatesuccess, string error) = SQLServerServices.UpdateKHSXProperty(TargetKHSX.KHSXID.Value, Common.IsChartRunning, 0);

                chartIsrunning = false;

                await Task.Delay(1500);

                if (updatesuccess == 1)
                {
                    var isKHSXchartRunning = SQLServerServices.GetAnyColValuebyAnyParameters_KHSX(new Dictionary<string, object?>() { { Common.KHSXID, TargetKHSX.KHSXID.Value } }, Common.IsChartRunning).columnValues.FirstOrDefault();

                    if (object.Equals(isKHSXchartRunning, 0))
                    {
                        // Restart
                        (updatesuccess, error) = SQLServerServices.UpdateKHSXProperty(TargetKHSX.KHSXID.Value, Common.IsChartRunning, 1);

                        if (updatesuccess == 1)
                        {
                            chartIsrunning = true;

                            isFirtLoad_ofchart = false;

                            await StartRecordChart();
                        }
                    }
                }
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task StartRecordChart()
    {
        Common.IndexOFwhile++;

        int index = Common.IndexOFwhile;

        // ShowNotification($"Chart is running {index}", NotificationSeverity.Success, 1000);

        while (true)
        {
            var isKHSXchartRunning = SQLServerServices.GetAnyColValuebyAnyParameters_KHSX(new Dictionary<string, object?>() { { Common.KHSXID, TargetKHSX.KHSXID.Value } }, Common.IsChartRunning).columnValues.FirstOrDefault();

            if (object.Equals(isKHSXchartRunning, 0))
            {
                // ShowNotification($"Chart has stopped {index}", NotificationSeverity.Error, 1000);

                chartIsrunning = false;

                StateHasChanged();

                break;
            }
            else
            {
                chartIsrunning = true;
            }

            if (!isLoadingKQGCs)
            {
                await GetChartDatas(TargetKHSX.KHSXID.Value);

                updatedTime = DateTime.Now;

                StateHasChanged();
            }

            await Task.Delay(1000);
        }
    }

    private async Task UpdateChartRunningStatus(object value)
    {
        (int updatesuccess, string error) = SQLServerServices.UpdateKHSXProperty(TargetKHSX.KHSXID.Value, Common.IsChartRunning, value);

        if (updatesuccess == 1)
        {
            chartIsrunning = object.Equals(value, 1);

            if (object.Equals(value, 1))
            {
                await StartRecordChart();
            }
        }
    }

    private async Task LoadDataAsync(CancellationToken cancellationToken)
    {
        var isKHSXchartRunning = SQLServerServices.GetAnyColValuebyAnyParameters_KHSX(new Dictionary<string, object?>() { { Common.KHSXID, TargetKHSX.KHSXID.Value } }, Common.IsChartRunning).columnValues.FirstOrDefault();

        if (object.Equals(isKHSXchartRunning, 1))
        {
            return;
        }
        else
        {
            Common.IndexOFwhile++;

            int index = Common.IndexOFwhile;

            ShowNotification($"Start while {index}", NotificationSeverity.Success, 1000);

            // Start new loop chart
            (int updatesuccess, string error) = SQLServerServices.UpdateKHSXProperty(TargetKHSX.KHSXID.Value, Common.IsChartRunning, 1);

            while (!cancellationToken.IsCancellationRequested)
            {
                if (!isLoadingKQGCs)
                {
                    await GetChartDatas(TargetKHSX.KHSXID.Value);

                    updatedTime = DateTime.Now;

                    StateHasChanged(); // Refresh UI
                }

                isKHSXchartRunning = SQLServerServices.GetAnyColValuebyAnyParameters_KHSX(new Dictionary<string, object?>() { { Common.KHSXID, TargetKHSX.KHSXID.Value } }, Common.IsChartRunning).columnValues.FirstOrDefault();

                if (object.Equals(isKHSXchartRunning, 0))
                {
                    break;
                }

                await Task.Delay(1000); // Wait for 1 second

                ShowNotification($"From while {index}", NotificationSeverity.Error, 1000);
            }
        }
    }

    private async void UpdateChart_EventRasing(object? sender, EventArgs eventArgs)
    {
        await GetChartDatas(TargetKHSX.KHSXID.Value);

        await InvokeAsync(StateHasChanged);
    }

    private async Task GetChartDatas(object? khsxid = null)
    {
        List<NguyenCongofKHSX> nguyencongs = new();

        if (khsxid != null && !object.Equals(khsxid, 0))
        {
            nguyencongs = SQLServerServices.GetlistCongdoans(khsxid, false);
        }

        DSachKetQuaGCs = await LoadAllDanhsachKQGCBase();

        var groupedByNCID = DSachKetQuaGCs.GroupBy(k => k.NCID.Value)
                                           .Select(g => new
                                           {
                                               NCID = g.Key,
                                               TenCongDoan = SQLServerServices.GetNguyenCongByID(g.Key),
                                               Items = g.ToList(),
                                               SumOK = g.Sum(rs => int.TryParse(rs.SLOK.Value?.ToString(), out int ok) ? ok : 0),
                                               SumNG = g.Sum(rs => int.TryParse(rs.SLNG.Value?.ToString(), out int ng) ? ng : 0)
                                           });

        OKdatas = new(); NGdatas = new();

        foreach (var ncong in nguyencongs)
        {
            string tennc = ncong.TenCongDoan.Value?.ToString()?.Trim() ?? string.Empty;

            if (!string.IsNullOrEmpty(tennc))
            {
                var targetcdoan = groupedByNCID.FirstOrDefault(nc => nc.TenCongDoan.Trim() == tennc);

                if (targetcdoan != null)
                {
                    OKdatas.Add(new ChartItem() { Property = targetcdoan.TenCongDoan, Value = targetcdoan.SumOK });
                    NGdatas.Add(new ChartItem() { Property = targetcdoan.TenCongDoan, Value = targetcdoan.SumNG });
                }
                else
                {
                    OKdatas.Add(new ChartItem() { Property = tennc, Value = 0 });
                    NGdatas.Add(new ChartItem() { Property = tennc, Value = 0 });
                }
            }
        }
    }

    // Load all danh sach KQGC base
    private async Task<List<KetQuaGC>> LoadAllDanhsachKQGCBase()
    {
        return await Task.Run(() =>
        {
            List<KetQuaGC> ketQuaGCs = new();

            if (isLoadingKQGCs == false)
            {
                isLoadingKQGCs = true;

                Dictionary<string, object?> parameters = new();

                parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", TargetKHSX.KHSXID.Value);

                (var kqgcs, string resultMess) = SQLServerServices.GetListKetQuaGC(parameters, false);

                foreach (var ketQuaGC in kqgcs)
                {
                    if (DateTime.TryParse(ketQuaGC.SubMitDay.Value?.ToString(), out DateTime submitday))
                    {
                        ketQuaGC.SubMitDay.Value = submitday.Date.ToShortDateString();
                    }
                }

                ketQuaGCs = kqgcs; // gan cho ds hien thi

                isLoadingKQGCs = false;
            }

            return ketQuaGCs;
        });
    }

    private async Task OpenChartTracking()
    {
        if (TargetKHSX.KHSXID.Value != null)
        {
            var url = $"charttracking_?khsxid={TargetKHSX.KHSXID.Value}&disable={true}";

            // Get the absolute URL
            var absoluteUrl = NavigationManager.ToAbsoluteUri(url).ToString();

            await JSRuntime.InvokeVoidAsync("openInNewTab", absoluteUrl);
        }
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
