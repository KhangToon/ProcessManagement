@using ProcessManagement.Commons
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models.KHSXs

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .custom-datepicker input[type="text"]::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }
</style>

<RadzenCard Style="height: 100%; width: 100%; padding: 5px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0; padding: 0; padding-bottom: 10px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 10px; background-color: var(--rz-primary-darker);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenText Text="THÊM MỚI KẾT QUẢ GIA CÔNG" Style="color: white; font-weight: 500; font-size: 18px"></RadzenText>
        </RadzenStack>
        @{
            List<Propertyy> properties = newKetQuaGC.GetPropertiesValues().Where(pro => pro.AlowDisplay == true).ToList();

            <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; overflow-y: scroll">
                <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding: 15px; padding-right: 0">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText Text="Nhập thông tin kết quả gia công" Style="color: var(--rz-primary-darker); font-size: 18px; font-weight: 600; height: contain; width: contain"></RadzenText>
                    </RadzenStack>
                    <RadzenCard Variant="Variant.Flat" Style="min-height: 300px; width: 100%; padding: 0px; margin-top: 10px; background-color: white">
                        <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="0" Orientation="Orientation.Vertical">
                            @{
                                foreach (var property in properties)
                                {
                                    string displayName = property.DisplayName;

                                    if (property.DBName == KetQuaGC.KQGCDBName.TenSanPham)
                                    {

                                    }
                                    else
                                    {
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                            <RadzenStack Style="width: 20%;">
                                                <RadzenText Text="@(displayName)" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 80%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    @{
                                                        if (property.Type == typeof(string)) // kieu ky tu
                                                        {
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenTextBox class="custom-placeholder" Placeholder="@($" * nhập {displayName}")" Value="@property.Value?.ToString()" Style="font-size: 16px; height: contain; border-width: 1px;"
                                                                               @oninput="@(async (args) => { property.Value = args.Value; await DefaultThongTinKetQuaGC_ValueIsOK(property);})">
                                                                </RadzenTextBox>
                                                            </RadzenStack>
                                                        }
                                                        else if (property.Type == typeof(int)) // Kieu so
                                                        {
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenNumeric class="custom-placeholder" Placeholder="@($" * nhập {displayName}")" TValue="int"
                                                                               Value="@(int.Parse(property.Value?.ToString()?? "0"))"
                                                                               ValueChanged="@(async (args) =>
                                                                           {
                                                                                property.Value = args;
                                                                                await DefaultThongTinKetQuaGC_ValueIsOK(property);
                                                                           })"
                                                                               Style="font-size: 16px; height: contain;" Min="0" Max="999999" />
                                                            </RadzenStack>
                                                        }
                                                        else if (property.Type == typeof(DateTime)) // kieu ngay thang
                                                        {
                                                            bool ishaveValueOfday = DateTime.TryParse(property.Value?.ToString(), out DateTime selectday);
                                                            if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);
                                                            <RadzenStack Style="width: 50%;">
                                                                <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {displayName}")"
                                                                                  TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                  Change="@(async (args) =>
                                                                                {
                                                                                    if (args != null)
                                                                                    {
                                                                                        DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                        property.Value = value;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        property.Value = string.Empty;
                                                                                    }
                                                                                    await DefaultThongTinKetQuaGC_ValueIsOK(property);
                                                                                })"
                                                                                  ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" ParseInput="@Common.ParseDate" AllowInput="true"
                                                                                  Style="height: contain; font-size: 16px">
                                                                </RadzenDatePicker>
                                                            </RadzenStack>
                                                        }

                                                        <RadzenStack Style="width: 50%;">
                                                            <RadzenAlert Visible="@(!property.IsValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                            <RadzenAlert Visible="@(property.IsValueOK)" Text="@property.NotifyMess" Style="width: contain; height: 100%; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                        </RadzenStack>
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    }
                                }
                            }
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenButton Disabled="@(!IsAllValueThongTinOK(properties))" Click="@(() => OnAddNewKetQuaGC())" Style="width: contain; height: 80%;" Icon="check" Text="Xác nhận thêm" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Size="ButtonSize.Small" Variant="Variant.Filled" />
                <RadzenButton Style="width: contain; height: 80%;" Icon="close" Text="Thoát" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" Click="@(() => OnCancelAddnewKetQuaGC())" />
            </RadzenStack>
        }

    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public int KHSXID { get; set; } = 1; // Gia su = 1 
    [Parameter]
    public int SPID { get; set; } // ID San pham
    [Parameter] 
    public int CDID { get; set; } // ID Cong doan
    [Parameter]
    public int MMID { get; set; } // ID May moc

    private KetQuaGC newKetQuaGC = new();

    protected override async Task OnInitializedAsync()
    {
        // Check KHSXID
        if (KHSXID > 0)
        {
            newKetQuaGC.KHSXID.Value = KHSXID;
            newKetQuaGC.SubMitDay.Value = DateTime.Now;
        }

        // Check re-asign value
        foreach (var property in newKetQuaGC.GetPropertiesValues().Where(pro => pro.Value != null && pro.AlowDisplay == true))
        {
            await DefaultThongTinKetQuaGC_ValueIsOK(property);
        }

        await base.OnInitializedAsync();
    }

    // Kiem tra thong tin mac dinh
    private async Task DefaultThongTinKetQuaGC_ValueIsOK(Propertyy propertyy)
    {
        await Task.Run(() =>
        {
            string value = propertyy.Value?.ToString() ?? string.Empty;
            string? dbname = propertyy.DBName ?? string.Empty;
            string? displayName = propertyy.DisplayName ?? string.Empty;

            propertyy.IsValueOK = true;
            propertyy.NotifyMess = $"Giá trị hợp lệ";

            foreach (var erorrtype in propertyy.CheckErrors)
            {
                if (erorrtype == Propertyy.ErrType.NotEmptyValue)
                {
                    if (string.IsNullOrEmpty(value.Trim()))
                    {
                        propertyy.IsValueOK = false;
                        propertyy.NotifyMess = $"{displayName} không được để trống";
                        return;
                    }
                }
                else if (erorrtype == Propertyy.ErrType.NotAllowEqualsZero)
                {
                    if ((int.TryParse(value, out int sl) ? sl : -1) <= 0)
                    {
                        propertyy.IsValueOK = false;
                        propertyy.NotifyMess = $"{displayName} phải lớn hơn 0";
                        return;
                    }
                }
            }

        });
    }

    // Insert new KetQuaGC to database
    private async Task OnAddNewKetQuaGC()
    {
        bool? confirm = await DialogService.Confirm($"Xác nhận thêm kết quả gia công này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "Đồng ý", CancelButtonText = "Hủy" });

        if (confirm.Value)
        {
            // Insert new KetQuaGC
            (int newkqgcID, string errorMess) = SQLServerServices.InsertKetQuaGC(newKetQuaGC);

            if (newkqgcID > 0)
            {
                if (newkqgcID < 0)
                {
                    await DialogService.Alert($"{errorMess}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
                else
                {
                    ShowNotification("Success!", NotificationSeverity.Success, 3000);

                    bool? success = await DialogService.Alert($"Đã thêm kết quả gia công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "Thoát", ShowClose = true });

                    if (success.Value)
                    {
                        DialogService.Close(newkqgcID);
                    }
                }
            }
            else
            {
                await DialogService.Alert($"{errorMess}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    // Check trang thai gia tri cua tat ca truong thong tin isOK
    private bool IsAllValueThongTinOK(List<Propertyy> propertyys)
    {
        bool isOK = true;

        foreach (var property in propertyys)
        {
            if (property.IsValueOK == false)
            {
                isOK = false;
            }
        }

        return isOK;
    }

    // Cancel add new
    private void OnCancelAddnewKetQuaGC()
    {
        DialogService.Close(null);
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
