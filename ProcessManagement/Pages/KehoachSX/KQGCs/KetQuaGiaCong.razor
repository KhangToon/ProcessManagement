@page "/trackingkhsx"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Models.SANPHAM
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Pages.KehoachSX.KQGCs.Dialogs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject NavigationManager NavigationManager

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenStack Gap="5" Style="height: 100%; width: 100%;">
    <!--Thanh tim kiem-->
    <RadzenStack Style="width: 100%; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Gap="30px" Style="height: contain; width: 100%; background-color: var(--rz-success-lighter); padding: 10px; padding-top: 15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenText Text="@($"THEO DÕI QUÁ TRÌNH GIA CÔNG {TargetKHSX.TargetSanPham?.SP_MaSP.Value?.ToString()}")" Style="color: green; font-weight: 600; font-size: 20px"></RadzenText>
        </RadzenStack>
    </RadzenStack>

    <!--Danh sach KetQuaGC-->
    <RadzenRow Gap="10px" Style=" width: 100%; padding: 0px;">
        <!--Column bang danh sach ket qua gia cong-->
        <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%;">
            <RadzenStack Gap="0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 5px; padding-left: 10px; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenText Text="Danh sách kết quả gia công" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
                        <RadzenText Text="@($"( {DSachKetQuaGCs.Count} kết quả gia công )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                    </RadzenStack>
                </RadzenStack>

                <!--Datagrid danh sach ket qua gia cong-->
                <RadzenStack Style="height: contain; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                    <RadzenDataGrid class="rz-grid-table" Data="@(DSachKetQuaGCs)" TItem="KetQuaGC" IsLoading="@isLoadingKQGCs"
                                    EmptyText="Danh sách theo dõi gia công trống." Style="overflow: scroll; max-width: 100%; max-height: 800px"
                                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true" AllowVirtualization="true"
                                    AllowFiltering="@filterActive" FilterMode="FilterMode.Simple" AllowColumnResize="true"
                                    AllowPaging="false" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                    GridLines="DataGridGridLines.Both" Density="Density.Default" ColumnWidth="150px"
                                    HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77); padding-left: 10px; padding-right: 10px"))"
                                    CellRender="@OnCellRender" FooterCellRender="@HeaderFooterCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">
                        <HeaderTemplate>
                            <!--Button enable advance filter-->
                            <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenStack Gap="10px" Style="height: contain; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <!--Button them ket qua gia cong-->
                                    <RadzenButton Disabled="@(TargetKHSX.isDonePXK == false || TargetKHSX.isReturnedNVL)" Click="OnThemMoiKetQuaGC" Icon="add" Text="Thêm kết quả gia công" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Success" Variant="Variant.Filled" Shade="Shade.Darker"
                                                  Style="height: contain; width: contain; font-size: 14px;" />

                                    <!--Button Enable Filter-->
                                    <RadzenButton Icon="@(filterActive ? "filter_alt" : "filter_alt_off")" Text="Bộ lọc nâng cao" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="@(filterActive ? Shade.Darker : Shade.Lighter)"
                                                  Style="height: contain; width: contain; font-size: 14px;"
                                                  Click="@( async () =>
                                                                {
                                                                    if (filterActive)
                                                                    {
                                                                        await LoadAllDanhsachKQGCBase(0);
                                                                    }
                                                                    filterActive = !filterActive;
                                                                })" />
                                    <!--Button Reset Filter-->
                                    <RadzenButton Click="@(async () => {keyFilterExtraColumns = new(); keyFilterMainColumns = new(); await LoadAllDanhsachKQGCBase(0);})"
                                                  Icon="reset_settings" Text="Reset bộ lọc" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                                  Style="height: contain; width: contain; font-size: 14px;" />

                                    <!--Button Reload-->
                                    <RadzenButton Text="Reload" Click="@(async() => { await LoadAllDanhsachKQGCBase(300); await FilterDSachKetQuaGCProcessing(); })" IsBusy="@isLoadingKQGCs" BusyText=" Loading..." Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                                </RadzenStack>
                                <RadzenStack Style="height: contain; width: contain; padding-left: 100px" Gap="20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Tổng cộng" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        <RadzenText Text="@($"{FooterSumAll}")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="OK" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        <RadzenText Text="@($"{FooterSumOK}")" Style="color: darkgreen; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: contain; padding-left: 20px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="NG" Style="font-size: 16px; height: contain; width: contain;"></RadzenText>
                                        <RadzenText Text="@($"{FooterSumNG}")" Style="color: darkred; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        </HeaderTemplate>
                        <Columns>
                            @{
                                int countdskqgcs = DSachKetQuaGCs.Count;

                                List<Propertyy> columns = KetQuaGC.GetClassProperties() ?? new();

                                <!--STT-->
                                <RadzenDataGridColumn Width="60px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                      TItem="KetQuaGC" Title="#"
                                                      Property="STT" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                    </HeaderTemplate>
                                    <Template Context="kqgc">
                                        <span style="font-weight: bold;">@($"{DSachKetQuaGCs.IndexOf(kqgc) + 1}/{countdskqgcs}")</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                {
                                    string colName = column.DBName ?? string.Empty;
                                    string displayName = column.DisplayName ?? string.Empty;
                                    Type? columnType = column.Type;

                                    <RadzenDataGridColumn TItem="KetQuaGC" Title="@displayName"
                                                          Property="@colName" TextAlign="TextAlign.Center">
                                        <HeaderTemplate>
                                            @if (filterActive)
                                            {
                                                <RadzenText Text="@(displayName)" Style="font-size: 15px; color: white; font-weight: 600; min-width: 120px"></RadzenText>
                                            }
                                            else
                                            {
                                                <span style="font-weight: 600; font-size: 15px; color: white;">@displayName</span>
                                            }
                                        </HeaderTemplate>
                                        <FilterTemplate>
                                            <RadzenDropDown AllowClear="true"
                                                            Style="width: 100%; height: contain; font-size: 14px; font-weight: 600; background-color: white"
                                                            AllowVirtualization="true"
                                                            AllowFiltering="true"
                                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                            FilterOperator="StringFilterOperator.Contains"
                                                            AllowSelectAll="true"
                                                            TValue="IEnumerable<string>"
                                                            Data="@(GetMainColumnKeysSearch(colName))"
                                                            Multiple="true"
                                                            SelectedItem="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                                            Value="@(keyFilterMainColumns.ContainsKey(colName)? keyFilterMainColumns[colName] : null)"
                                                            ValueChanged="@((IEnumerable<string> args) => OnComboboxMainColumnSelectedChanged(args, colName))">
                                            </RadzenDropDown>
                                        </FilterTemplate>
                                        <Template Context="kqgc">
                                            @{
                                                if (columnType != null && columnType == typeof(DateTime))
                                                {
                                                    bool ishaveValueOfday = DateTime.TryParse(kqgc.GetPropertyValue(colName)?.ToString(), out DateTime vldate);

                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString(Common.FormatNoTime_ddMMyyyy)" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                }
                                                else
                                                {
                                                    if (colName == KetQuaGC.KQGCDBName.SPID || colName == KetQuaGC.KQGCDBName.MMID || colName == KetQuaGC.KQGCDBName.NCID || colName == KetQuaGC.KQGCDBName.NVIDs || colName == KetQuaGC.KQGCDBName.NGIDs)
                                                    {
                                                        <RadzenText Text="@(GetColumnValueByID(kqgc.GetPropertyValue(colName), colName))" Style="font-size: 15px; height: contain; font-weight: 500;"></RadzenText>
                                                    }
                                                    else
                                                    {
                                                        if (colName == KetQuaGC.KQGCDBName.SLOK)
                                                        {
                                                            <RadzenText Text="@($"{kqgc.GetPropertyValue(colName)}")" Style="color: darkgreen; font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                        }
                                                        else if (colName == KetQuaGC.KQGCDBName.SLNG)
                                                        {
                                                            _ = int.TryParse(kqgc.GetPropertyValue(colName)?.ToString(), out int slng) ? slng : 0;

                                                            <RadzenText Visible="@(slng > 0)" Text="@($"{slng}")" Style="color: red; font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                            <RadzenText Visible="@(slng == 0)" Text="@($"{slng}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                        }
                                                        else if (colName == KetQuaGC.KQGCDBName.MaQuanLyLot)
                                                        {
                                                            <RadzenText Text="@($"{kqgc.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; font-weight: 600"></RadzenText>
                                                        }
                                                        else
                                                        {
                                                            <RadzenText Text="@($"{kqgc.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                        }
                                                    }
                                                }
                                            }
                                        </Template>
                                        <FooterTemplate>
                                            <RadzenText Visible="@(colName == KetQuaGC.KQGCDBName.SPID)" Text="TỔNG CỘNG" Style="color: black; font-size: 16px; height: contain; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == KetQuaGC.KQGCDBName.SLperLOT)" Text="@($"{FooterSumAll}")"
                                                        Style="color: black; font-size: 18px; height: contain; min-width: 50px; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == KetQuaGC.KQGCDBName.SLOK)" Text="@($"{FooterSumOK}")"
                                                        Style="color: darkgreen; font-size: 18px; height: contain; min-width: 50px; font-weight: 600;"></RadzenText>
                                            <RadzenText Visible="@(colName == KetQuaGC.KQGCDBName.SLNG)" Text="@($"{FooterSumNG}")"
                                                        Style="color: red; font-size: 18px; height: contain; min-width: 50px; font-weight: 600;"></RadzenText>
                                        </FooterTemplate>
                                    </RadzenDataGridColumn>
                                }
                                <RadzenDataGridColumn TItem="KetQuaGC" Title="Delete" Frozen="true" FrozenPosition="FrozenColumnPosition.Right"
                                                      Property="delete" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white;"></span>
                                    </HeaderTemplate>
                                    <Template Context="kqgc">
                                        <RadzenStack Gap="10px" Style="width: contain" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenButton Click="@(() => OpenEditKQGC(kqgc))" Icon="edit" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Light"></RadzenButton>
                                            <RadzenButton Click="@(() => OnDeleteKQGC(kqgc))" Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Shade="Shade.Darker"></RadzenButton>
                                        </RadzenStack>
                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    [Parameter]
    public EventCallback<Dictionary<string, object?>> NavigateEvent { get; set; }

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private List<KetQuaGC> DSachKetQuaGCsBase = new();
    private List<KetQuaGC> DSachKetQuaGCs = new();
    private KetQuaGC SelectedKQGC = new();
    private IList<KetQuaGC>? DatagridSeleted;

    private DateTime startSearchDay = DateTime.Today;
    private DateTime endSearchDay = DateTime.Today;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";

    private static Dictionary<string, List<string>> keyFilterMainColumns = new();
    private Dictionary<string, List<string>> keyFilterExtraColumns = new();
    private static bool filterActive = false;

    private bool isLoadingKQGCs = false;

    private int FooterSumOK { get; set; }
    private int FooterSumNG { get; set; }
    private int FooterSumAll { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load ds KetQuaGC base/ hien thi
        await LoadAllDanhsachKQGCBase(0);

        // Khoi tao bien luu danh sach key search
        await CreateCurrentSelectedKeyVariable();

        // Load preFiltering value
        await FilterDSachKetQuaGCProcessing();

        await base.OnInitializedAsync();
    }

    private async Task ParameterChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task NavigateTienDoGCPage(Dictionary<string, object?> value)
    {
        await NavigateEvent.InvokeAsync(value);
    }

    private void CalculaFooterSummary()
    {
        // Calculate tong so luong OK thuc te
        int sumOK = DSachKetQuaGCs.Sum(kqgc =>
        {
            if (int.TryParse(kqgc.SLOK.Value?.ToString(), out int slok))
            {
                return slok;
            }
            else return 0;
        });

        // Calculate tong so luong NG
        int sumNG = DSachKetQuaGCs.Sum(kqgc =>
        {
            if (int.TryParse(kqgc.SLNG.Value?.ToString(), out int slng))
            {
                return slng;
            }
            else return 0;
        });

        // Calculate all results
        FooterSumOK = sumOK;
        FooterSumNG = sumNG;
        FooterSumAll = sumOK + sumNG;
    }

    // Convert ID to stringValue
    private string GetColumnValueByID(object? id, string colName)
    {
        string value = string.Empty;

        if (colName == KetQuaGC.KQGCDBName.SPID)
        {
            value = SQLServerServices.GetMaSanphamByID(id);
        }
        else if (colName == KetQuaGC.KQGCDBName.NCID)
        {
            value = SQLServerServices.GetNguyenCongByID(id);
        }
        else if (colName == KetQuaGC.KQGCDBName.MMID)
        {
            value = SQLServerServices.GetMaMayMocbyID(id);
        }
        else if (colName == KetQuaGC.KQGCDBName.NVIDs)
        {
            string ids = id?.ToString()?.Trim() ?? string.Empty;

            if (!string.IsNullOrEmpty(ids))
            {
                List<string> nvids = ids.Split(",").ToList();

                value = string.Join(", ", nvids
                        .Select(nvid => (SQLServerServices.GetNhanVienbyID(nvid).GetThongTinNhanVienByName("Tên nhân viên")).GiaTri.Value?.ToString() ?? string.Empty)
                        .Where(name => !string.IsNullOrEmpty(name)))
                        .Trim(',');
            }
        }
        else if (colName == KetQuaGC.KQGCDBName.NGIDs)
        {
            string ids = id?.ToString()?.Trim() ?? string.Empty;

            if (!string.IsNullOrEmpty(ids))
            {
                List<string> ngids = ids.Split(",").ToList();

                value = string.Join(", ", ngids
                        .Select(ngid => SQLServerServices.GetNoiDungNGbyID(ngid))
                        .Where(name => !string.IsNullOrEmpty(name)))
                        .Trim(',');
            }
        }

        return value;
    }

    #region Main Column Filtering
    // Khoi tao bien luu danh sach key search
    private async Task CreateCurrentSelectedKeyVariable()
    {
        await Task.Run(() =>
        {
            // Get main key colum
            List<Propertyy> columns = KetQuaGC.GetClassProperties() ?? new();
            foreach (var column in columns)
            {
                string key = column.DBName ?? string.Empty;
                if (key != string.Empty && !keyFilterMainColumns.ContainsKey(key))
                {
                    keyFilterMainColumns.Add(key, new());
                }
            }
        });
    }

    // Lay danh sach key search Main column
    private List<string> GetMainColumnKeysSearch(string targetColumn)
    {
        List<string> keys = new();

        if (targetColumn == KetQuaGC.KQGCDBName.SPID || targetColumn == KetQuaGC.KQGCDBName.MMID || targetColumn == KetQuaGC.KQGCDBName.NCID || targetColumn == KetQuaGC.KQGCDBName.NVIDs || targetColumn == KetQuaGC.KQGCDBName.NGIDs)
        {
            // Convert ID to stringValue
            keys = DSachKetQuaGCsBase
            .Select(nv => GetColumnValueByID(nv.GetPropertyValue(targetColumn), targetColumn) ?? string.Empty)
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();
        }
        else
        {
            keys = DSachKetQuaGCsBase
            .Select(nv => nv.GetPropertyValue(targetColumn)?.ToString() ?? string.Empty)
            .Where(result => !string.IsNullOrEmpty(result)).Distinct()
            .ToList();
        }

        return keys;
    }

    // Update selected Main column key
    private async Task OnComboboxMainColumnSelectedChanged(IEnumerable<string> values, string targetColumn)
    {
        if (values != null)
        {
            keyFilterMainColumns[targetColumn] = values.ToList();
        }
        else
        {
            keyFilterMainColumns[targetColumn] = new();
        }

        await FilterDSachKetQuaGCProcessing();
    }

    // Filtering processing
    private async Task FilterDSachKetQuaGCProcessing()
    {
        await Task.Run(() =>
        {
            DSachKetQuaGCs = DSachKetQuaGCsBase.ToList();

            // Main column filtering
            foreach (var column in keyFilterMainColumns)
            {
                List<string> selectedkeys = column.Value;

                if (selectedkeys != null && selectedkeys.Count > 0)
                {
                    if (column.Key == KetQuaGC.KQGCDBName.SPID || column.Key == KetQuaGC.KQGCDBName.MMID || column.Key == KetQuaGC.KQGCDBName.NCID || column.Key == KetQuaGC.KQGCDBName.NVIDs || column.Key == KetQuaGC.KQGCDBName.NGIDs)
                    {
                        // Convert ID to stringValue
                        DSachKetQuaGCs = DSachKetQuaGCs
                            .Where(nv =>
                            {
                                var value = nv.GetPropertyValue(column.Key);
                                var valueString = GetColumnValueByID(value, column.Key);
                                return valueString != null && selectedkeys.Contains(valueString);
                            }).ToList();
                    }
                    else
                    {
                        DSachKetQuaGCs = DSachKetQuaGCs
                            .Where(nv =>
                            {
                                var value = nv.GetPropertyValue(column.Key);
                                var valueString = value?.ToString();
                                return valueString != null && selectedkeys.Contains(valueString);
                            }).ToList();
                    }
                }
            }

            if (filterActive)
            {
                CalculaFooterSummary();
            }
        });
    }
    #endregion

    // Load all danh sach KQGC base
    private async Task LoadAllDanhsachKQGCBase(int delay)
    {
        await Task.Run(async () =>
        {
            if (isLoadingKQGCs == false)
            {
                isLoadingKQGCs = true;

                // (DSachKetQuaGCsBase, string resultMess) = SQLServerServices.GetListKetQuaGC(); // load dach mac dinh
                Dictionary<string, object?> parameters = new();

                parameters.Add($"{KetQuaGC.KQGCDBName.KHSXID}", TargetKHSX.KHSXID.Value);

                (DSachKetQuaGCsBase, string resultMess) = SQLServerServices.GetListKetQuaGC(parameters, false);

                foreach (var ketQuaGC in DSachKetQuaGCsBase)
                {
                    if (DateTime.TryParse(ketQuaGC.SubMitDay.Value?.ToString(), out DateTime submitday))
                    {
                        ketQuaGC.SubMitDay.Value = submitday.Date.ToShortDateString();
                    }
                }

                DSachKetQuaGCs = DSachKetQuaGCsBase.ToList(); // gan cho ds hien thi

                CalculaFooterSummary();

                await Task.Delay(delay);

                isLoadingKQGCs = false;
            }
        });
    }

    // Them ket qua gia cong
    private async Task OnThemMoiKetQuaGC()
    {
        object newKetQuaGCid = await DialogService.OpenAsync<DialogAddNewKetQuaGC>(null, new Dictionary<string, object?>() { { "KHSXID", TargetKHSX.KHSXID.Value }, { "SPID", TargetKHSX.SPID.Value } },
        new DialogOptions() { ShowTitle = true, Width = "50%", Height = "95%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        await LoadAllDanhsachKQGCBase(300);

        if (newKetQuaGCid != null)
        {
            Common.SelectedKQGCid = newKetQuaGCid;

            ShowNotification("Reload success!", NotificationSeverity.Success, 2000);
        }
    }

    private async Task OnDeleteKQGC(KetQuaGC removeKQGC)
    {
        bool? confirm = await DialogService.Confirm($"Xóa kết quả gia công này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            // Get target LOT-KHSX
            Dictionary<string, object?> parameters = new Dictionary<string, object?>(){
                { KHSX_LOT.DBName.KHSXID, TargetKHSX.KHSXID.Value },
                { KHSX_LOT.DBName.NCID, removeKQGC.NCID.Value },
                { KHSX_LOT.DBName.MaQuanLyLot, removeKQGC.MaQuanLyLot.Value } };

            var targetlotKHSX = SQLServerServices.GetListLOT_khsx(parameters).Item1.FirstOrDefault();

            if (targetlotKHSX != null)
            {
                (bool isOK, string error) = SQLServerServices.DeleteKetQuaGC(removeKQGC.KQGCID.Value);

                if (isOK)
                {
                    targetlotKHSX.IsDone.Value = 0;
                    targetlotKHSX.SLOKsubmited.Value = 0;
                    targetlotKHSX.SLNGsubmited.Value = 0;

                    // Update sluong (Reset to 0)
                    (int updatereturn, string updateerror) = SQLServerServices.UpdateLOT_khsx(targetlotKHSX);

                    if (updatereturn > 0)
                    {
                        await DialogService.Alert($"Xóa thành công!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                        await LoadAllDanhsachKQGCBase(100);

                        await FilterDSachKetQuaGCProcessing();
                    }
                    else
                    {
                        await DialogService.Alert($"Error: {updateerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                    }
                }
                else
                {
                    await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
            else
            {
                await DialogService.Alert($"Error: Không tìm thấy LOTNVL", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private async Task OpenEditKQGC(KetQuaGC editKQGC)
    {
        var result = await DialogService.OpenAsync<DialogEditKetQuaGC>(null, new Dictionary<string, object>() { { "TargetKetQuaGC", editKQGC }, { "KHSXID", TargetKHSX.KHSXID.Value ?? 0 }, { "SPID", TargetKHSX.SPID.Value ?? 0 } },
        new DialogOptions() { ShowTitle = true, Width = "50%", Height = "95%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        await LoadAllDanhsachKQGCBase(0);

        if (result != null)
        {
            ShowNotification("Saved!", NotificationSeverity.Success, 2000);
        }
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<KetQuaGC> selectedKQGC)
    {
        DatagridSeleted = selectedKQGC;

        var fistItemSelectedkqgc = DatagridSeleted.FirstOrDefault();

        if (fistItemSelectedkqgc != null)
        {
            SelectedKQGC = fistItemSelectedkqgc;

            Common.SelectedKQGCid = fistItemSelectedkqgc.KQGCID.Value;
        }
    }

    // Datagrid cellrender
    private void OnCellRender(DataGridCellRenderEventArgs<KetQuaGC> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }

    void HeaderFooterCellRender(DataGridCellRenderEventArgs<KetQuaGC> args)
    {
        if (args.Column.Property == "STT")
        {
            args.Attributes.Add("colspan", 3);
        }
    }
}
