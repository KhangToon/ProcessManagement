@using ParamountBed_Warehouse.Services.SocketService
@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen


@inject NotificationService NotificationService
@inject DialogService DialogService
@inject SQLServerServices SQLServerServices
@inject ServerSocketAsync ServerSocketAsync

<RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; border-radius: 0px">
    <RadzenStack Style="width: 100%; height: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        @if (DSachCongDoans != null)
        {
            <RadzenAccordion Style="width: 100%; height: contain">
                <Items>
                    @foreach (var congdoan in DSachCongDoans.Where(cd => cd.IsUsing == true))
                    {
                        <RadzenAccordionItem Text="@congdoan.TenCongDoan.Value?.ToString()" Icon="account_balance_wallet"
                                             ExpandAriaLabel="@string.Empty">
                            <RadzenStack Style="width: 100%; height: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <DisplayCongDoan DSNVLmoiCongDoans="@congdoan.DSachNVLCongDoans"></DisplayCongDoan>
                            </RadzenStack>
                        </RadzenAccordionItem>
                    }
                </Items>
            </RadzenAccordion>
        }
    </RadzenStack>
</RadzenCard>
@code {
    [Parameter]
    public List<NguyenCongofKHSX>? DSachCongDoans { get; set; }

    protected override Task OnInitializedAsync()
    {
        ServerSocketAsync.Im_Ex_Event += UpdateUI_IMEX_Mode;

        return base.OnInitializedAsync();
    }

    private async void UpdateUI_IMEX_Mode(object? sender, object args)
    {
        await InvokeAsync(new Action(() => StateHasChanged()));
    }
}
