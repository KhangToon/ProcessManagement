@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices

<RadzenCard Style="height: contain; width: 100%; border-radius: 10px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 5%; width: 100%; padding-bottom: 10px">
            <RadzenText Text="@($"Tạo thùng thành phẩm")" Style="font-size: 20px; font-weight: 600; color: darkred"></RadzenText>
        </RadzenStack>
        <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-radius: 10px; border-top: var(--rz-grid-cell-border); border-bottom: var(--rz-grid-cell-border); padding: 0;">
            <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%; padding: 15px;">
                <RadzenCard Variant="Variant.Filled" Style="border-radius: 10px; height: contain">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: contain; width: 100%;">

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenText Text="@($"Mã quản lý: ")" Style="font-size: 17px; font-weight: 500; color: black"></RadzenText>
                                <RadzenText Text="@($"{TargetLotResult.MaQuanLyLot?.ToString()}")" Style="font-size: 18px; font-weight: 600; color: darkblue"></RadzenText>

                                <RadzenText Text="@($"Tổng OK: ")" Style="font-size: 17px; font-weight: 500; color: black"></RadzenText>
                                <RadzenText Text="@($"{TargetLotResult.GetTotalNGOKlastCDoan().sumOK.ToString()}")" Style="font-size: 18px; font-weight: 600; color: darkgreen"></RadzenText>
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenText Text="@($"Nhập số lượng/thùng")" Style="font-size: 16px; font-weight: 500; color: red"></RadzenText>
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: contain; padding: 0px;">
                                    <RadzenStack Style="width: 150px; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenNumeric Disabled="@(!isEditingSoluong || TargetLotResult.IsCreatedThungTP)" Placeholder="@($"* số lượng/thùng")" TValue="int" TextAlign=TextAlign.Center
                                                           Min="1" Max="999999"
                                                           Value="@(SLrequiredPerThung_currentLOT)"
                                                           ValueChanged="@((args) => { SLrequiredPerThung_currentLOT = args; })"
                                                           Style="--rz-input-font-size: 18px; font-weight: 600; height: 35px; border-width: 1px; width: 100%" />
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenStack Gap="5px" Style="width: contain; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <!--Button edit-->
                                        <RadzenButton Visible="@(!isEditingSoluong)" Disabled="@(TargetLotResult.IsCreatedThungTP)" Text="Edit" Icon="edit" Click="(() => { isEditingSoluong = !(isEditingSoluong);} )"
                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 35px; " />
                                        <!--Button save-->
                                        <RadzenButton Visible="@(isEditingSoluong)" Disabled="@(TargetLotResult.IsCreatedThungTP)" Icon="check" Click="(() => {isEditingSoluong = false;})"
                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 35px; width: 50px" />
                                    </RadzenStack>

                                    <!--Button tao thungTP-->
                                    <RadzenButton Disabled="@(SLrequiredPerThung_currentLOT < 1 || isEditingSoluong || TargetLotResult.IsCreatedThungTP)" Text="Tạo thùng thành phẩm" Icon="@(isCreatedThungTP? "autorenew" : "add")"
                                                  Click="@(async () => await CreateNewListThungTPhams())"
                                                  ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Light" Style="border-radius: 5px; --rz-icon-size: 18px; min-height: 35px; height: contain " />

                                </RadzenStack>
                                <RadzenButton Visible="@(TargetLotResult.IsCreatedThungTP)" Text="Thùng thành phẩm đã được tạo" Icon="check"
                                              ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Default" Style="border-radius: 5px; --rz-icon-size: 17px; height: 35px; font-size: 16px;" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="height: contain; width: 100%; padding: 0px; padding-top: 10px; padding-bottom: 10px; border-top: var(--rz-grid-cell-border); border-bottom: var(--rz-grid-cell-border);">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding: 0px">
                                    <RadzenText Text="@($"Danh sách thùng thành phẩm tạo từ mã quản lý")" Style="font-size: 18px; font-weight: 500; color: black"></RadzenText>
                                </RadzenStack>
                                <!--Button reload-->
                                <RadzenButton Visible="false" Text="Reload" Icon="autorenew" Click="@(async () => await LoadDSachThungTPhams(TargetKHSX.KHSXID.Value))"
                                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; " />
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding: 0px">
                                    <RadzenText Text="@($"Số lượng thùng: {DSachNewThungTPhams.Count}")" Style="font-size: 16px; font-weight: 500; color: darkgreen"></RadzenText>
                                </RadzenStack>
                                <RadzenButton Visible="@(TargetLotResult.IsCreatedThungTP && DSachNewThungTPhams.Any())" Text="Xóa tất cả" Icon="delete" Click="@(async () => await OnDeleteThungThanhPham(TargetLotResult.ThungTPhams))"
                                              ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Darker" Style="border-radius: 5px; --rz-icon-size: 18px; height: contain; min-height: 30px; " />
                            </RadzenStack>

                            <RadzenCard Variant="Variant.Flat" Style="height: 350px; width: 100%; padding: 10px; padding-right: 0; overflow-y: scroll">
                                <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenDataList Style="height: contain; width: 100%;" PagerPosition="PagerPosition.Top" WrapItems="true" AllowPaging="false" Data="@DSachNewThungTPhams" TItem="PartOfThungTPham">
                                        <Template Context="thungtpham">
                                            <RadzenCard Style="width: contain; height: contain; padding: 0" Variant="Variant.Flat">
                                                <RadzenCard Style="width: 100%; height: contain;" Variant="Variant.Filled">
                                                    <RadzenStack Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenCard Variant="@(Variant.Outlined)" Style="height: 100%; width: 100%; padding: 10px;">
                                                            <RadzenStack Style="width: 100%; height: 100%;" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenText Text="@((DSachNewThungTPhams.IndexOf(thungtpham) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="height: contain; width: contain; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="ID thùng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenButton Text="@($"{thungtpham.IDThung.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px; min-width: 40px"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Số lượng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.SoLuong.Value?.ToString()} (PCS)")" Style="font-size: 17px; font-weight: 600; height: contain; color: darkred"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Mã quản lý LOT" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.MaQuanLyLot.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: darkblue"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Mã quản lý thùng" Style="font-size: 16px; font-weight: 600; height: contain; color: black"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.MaQuanLyThung.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: darkgreen"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        </RadzenCard>
                                                    </RadzenStack>
                                                </RadzenCard>
                                            </RadzenCard>
                                        </Template>
                                    </RadzenDataList>
                                </RadzenStack>
                            </RadzenCard>

                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <!--Button comfirm-->
            <RadzenButton Disabled="@(!DSachNewThungTPhams.Any() || TargetLotResult.IsCreatedThungTP)" Text="Lưu thùng thành phẩm" Icon="check" Click="@(async () => await OnSaveThungThanhPham())"
                          ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Dark" Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; " />

            <RadzenButton Style="width: 120px; height: 80%;" Click="DialogClosePress" Icon="close" Text="Thoát" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
        </RadzenStack>

    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public ResultPerLOTKHSX TargetLotResult { get; set; } = new();

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private int SLrequiredPerThung_currentLOT = 0;

    public bool isEditingSoluong = false;

    public bool isCreatedThungTP = false;

    private List<PartOfThungTPham> DSachOriginThungTPhams = new(); // from Database of KHSX
    private List<PartOfThungTPham> DSachNewThungTPhams = new();

    protected override async Task OnInitializedAsync()
    {
        if (TargetLotResult.IsCreatedThungTP)
        {
            DSachNewThungTPhams = TargetLotResult.ThungTPhams;
        }

        await LoadDSachThungTPhams(TargetKHSX.KHSXID.Value);

        await base.OnInitializedAsync();
    }

    private async Task LoadDSachThungTPhams(object? khsxid)
    {
        await Task.Run(() =>
        {
            DSachOriginThungTPhams = SQLServerServices.GetListThungTPhams(new Dictionary<string, object?>() { { KHSX_LOT.DBName.KHSXID, khsxid } }).thungTPhams;
        });
    }

    private async Task CreateNewListThungTPhams()
    {
        await Task.Run(() =>
        {
            int SLOKofLOT = TargetLotResult.GetTotalNGOKlastCDoan().sumOK; // so luong OK con lai cua LOT (cong doan cuoi)

            List<PartOfThungTPham> newthungTPhams = new();

            var lastestThungTPham = DSachOriginThungTPhams.LastOrDefault();

            var listLastestThungTPs = DSachOriginThungTPhams.Where(ttp => ttp.IDThung.Value?.ToString() == lastestThungTPham?.IDThung.Value?.ToString());

            // _ = int.TryParse(lastestThungTPham?.SoLuong.Value?.ToString(), out int lastestTTPsoluong) ? lastestTTPsoluong : 0;

            int lastestTTPsoluong = listLastestThungTPs.Sum(ttp => (int.TryParse(ttp?.SoLuong.Value?.ToString(), out int sl) ? sl : 0));

            // Lay so luong con thieu so voi LOT required perthung
            _ = int.TryParse(lastestThungTPham?.SLRequired.Value?.ToString(), out int lastestSLrequired) ? lastestSLrequired : 0;

            // Bo sung so luong cho thung thanh pham truoc do (chi khi thieu)
            if (lastestSLrequired == 0)
            {
                lastestSLrequired = SLrequiredPerThung_currentLOT;
            }

            int soluongBosung = lastestSLrequired - lastestTTPsoluong;

            if (soluongBosung > 0)
            {
                if (SLOKofLOT <= soluongBosung)
                {
                    string randomkey = Common.GenerateUppercaseChars(5);
                    string mqlthungtp = $"TTP-{TargetKHSX.MaLSX.Value?.ToString()}-{randomkey}-{lastestThungTPham?.IDThung.Value ?? 1}";
                    // Lay IDThung truoc
                    PartOfThungTPham thungTPham = new()
                        {
                            SoLuong = { Value = SLOKofLOT },
                            SLRequired = { Value = lastestSLrequired },
                            IDThung = { Value = lastestThungTPham?.IDThung.Value ?? 1 },
                            KHSXID = { Value = TargetKHSX.KHSXID.Value },
                            SPID = { Value = TargetKHSX.SPID.Value },
                            MaQuanLyLot = { Value = TargetLotResult.MaQuanLyLot },
                            NgayDongThung = { Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM) },
                            // MaQuanLyThung = { Value = mqlthungtp }
                            MaQuanLyThung = { Value = lastestThungTPham?.MaQuanLyThung.Value ?? mqlthungtp } // Lay new mql khi la thung dau tien
                        };

                    newthungTPhams.Add(thungTPham);
                }
                else
                {
                    // // Create mql thung TP
                    // string randomkey = Common.GenerateUppercaseChars(5);
                    // string mqlthungtp = $"TTP-{TargetKHSX.MaLSX.Value?.ToString()}-{randomkey}-{lastestThungTPham?.IDThung.Value ?? 1}";

                    // Lay IDThung truoc
                    PartOfThungTPham thungTPham = new()
                        {
                            SoLuong = { Value = soluongBosung },
                            SLRequired = { Value = lastestSLrequired },
                            IDThung = { Value = lastestThungTPham?.IDThung.Value ?? 1 },
                            KHSXID = { Value = TargetKHSX.KHSXID.Value },
                            SPID = { Value = TargetKHSX.SPID.Value },
                            MaQuanLyLot = { Value = TargetLotResult.MaQuanLyLot },
                            NgayDongThung = { Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM) },
                            MaQuanLyThung = { Value = lastestThungTPham?.MaQuanLyThung.Value }
                        };

                    newthungTPhams.Add(thungTPham);

                    int soluongConlai = SLOKofLOT - soluongBosung;

                    _ = int.TryParse(thungTPham.IDThung.Value.ToString(), out int idthung) ? idthung : 1;

                    while (soluongConlai > 0)
                    {
                        (PartOfThungTPham newthung, soluongConlai) = AddNewThungTPham(soluongConlai, idthung);

                        idthung = int.TryParse(newthung.IDThung.Value?.ToString(), out int newid) ? newid : 1;

                        newthungTPhams.Add(newthung);
                    }
                }
            }
            else if (soluongBosung == 0)
            {
                int soluongConlai = SLOKofLOT;

                _ = int.TryParse(lastestThungTPham?.IDThung.Value?.ToString(), out int idthung) ? idthung : 1;

                while (soluongConlai > 0)
                {
                    (PartOfThungTPham newthung, soluongConlai) = AddNewThungTPham(soluongConlai, idthung);

                    idthung = int.TryParse(newthung.IDThung.Value?.ToString(), out int newid) ? newid : 1;

                    newthungTPhams.Add(newthung);
                }
            }

            DSachNewThungTPhams = newthungTPhams;

            isCreatedThungTP = true;
        });

        ShowNotification("Created!", NotificationSeverity.Success, 2000);
    }

    private (PartOfThungTPham, int) AddNewThungTPham(int soluongTake, int lastIDthung)
    {
        // Create mql thung TP
        string randomkey = Common.GenerateUppercaseChars(5);
        string mqlthungtp = $"TTP-{TargetKHSX.MaLSX.Value?.ToString()}-{randomkey}-{lastIDthung + 1}";

        PartOfThungTPham newThungTP = new();

        newThungTP.KHSXID.Value = TargetKHSX.KHSXID.Value?.ToString();

        newThungTP.SPID.Value = TargetKHSX.SPID.Value?.ToString();

        newThungTP.MaQuanLyLot.Value = TargetLotResult.MaQuanLyLot?.ToString();

        newThungTP.IDThung.Value = (lastIDthung + 1);

        newThungTP.NgayDongThung.Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM);

        newThungTP.SLRequired.Value = SLrequiredPerThung_currentLOT;

        newThungTP.MaQuanLyThung.Value = mqlthungtp;

        int soluongConlai = soluongTake - SLrequiredPerThung_currentLOT;

        if (soluongConlai <= 0) // du soluong  // thieu soluong
        {
            newThungTP.SoLuong.Value = soluongTake;

            return (newThungTP, 0);
        }
        else // thua soluong
        {
            newThungTP.SoLuong.Value = SLrequiredPerThung_currentLOT;

            return (newThungTP, soluongConlai);
        }
    }

    private async Task OnSaveThungThanhPham()
    {
        int result = 1; string error = string.Empty;

        // Insert new list ThungTP to Database
        foreach (var thungtp in DSachNewThungTPhams)
        {
            (result, error) = SQLServerServices.InsertThungTPham(thungtp);

            if (result <= 0)
            {
                break;
            }
        }

        if (result <= 0)
        {
            await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

            DialogService.Close(null);
        }
        else
        {
            // Update trang thai created thungTP cho targetLotResult

            await DialogService.Alert($"Lưu thùng thành phẩm thành công! <strong><span>{TargetLotResult.MaQuanLyLot}</span></strong>", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

            DialogService.Close(DSachNewThungTPhams);
        }
    }

    private async Task OnDeleteThungThanhPham(List<PartOfThungTPham> thungTPhams)
    {
        bool? confirm = await DialogService.Confirm($"Xóa thùng thành phẩm của mã LOT: <strong><span>{TargetLotResult.MaQuanLyLot}</span></strong>?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            bool isOK = false; string error = string.Empty;

            foreach (var thungtp in thungTPhams)
            {
                (isOK, error) = SQLServerServices.DeleteThungTP(thungtp.TTPID.Value);

                if (!isOK)
                {
                    break;
                }
            }

            if (isOK)
            {
                DSachNewThungTPhams = new();

                await DialogService.Alert($"Đã xóa!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                DialogService.Close(null);
            }
            else
            {
                await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private void DialogClosePress()
    {
        DialogService.Close(null);
    }

    private void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}