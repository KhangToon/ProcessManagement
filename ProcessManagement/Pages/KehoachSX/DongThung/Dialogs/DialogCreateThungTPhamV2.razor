@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_TPHAM
@using ProcessManagement.Models.KHSXs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject SQLServerServices SQLServerServices

<RadzenCard Style="height: contain; width: 100%; border-radius: 10px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 5%; width: 100%; padding-bottom: 10px">
            <RadzenText Text="@($"Tạo thùng thành phẩm")" Style="font-size: 20px; font-weight: 600; color: darkred"></RadzenText>
        </RadzenStack>
        <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-radius: 10px; border-top: var(--rz-grid-cell-border); border-bottom: var(--rz-grid-cell-border); padding: 0;">
            <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%; padding: 15px;">
                <RadzenCard Variant="Variant.Filled" Style="border-radius: 10px; height: contain">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                        <RadzenStack Orientation="Orientation.Vertical" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: contain; width: 100%;">

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenText Text="@($"Mã quản lý: ")" Style="font-size: 17px; font-weight: 500; color: black"></RadzenText>
                                <RadzenText Text="@($"{TargetLotResult.MaQuanLyLot?.ToString()}")" Style="font-size: 18px; font-weight: 600; color: darkblue"></RadzenText>

                                <RadzenText Text="@($"Tổng OK: ")" Style="font-size: 17px; font-weight: 500; color: black"></RadzenText>
                                <RadzenText Text="@($"{TargetLotResult.GetTotalNGOKlastCDoan().sumOK.ToString()}")" Style="font-size: 18px; font-weight: 600; color: darkgreen"></RadzenText>
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenText Text="@($"Nhập số lượng/thùng")" Style="font-size: 16px; font-weight: 500; color: red"></RadzenText>
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="height: contain; width: 100%; padding: 0px;">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: contain; padding: 0px;">
                                    <RadzenStack Style="width: 150px; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenNumeric Disabled="@(!isEditingSoluong || TargetLotResult.IsCreatedPartOfThungTP)" Placeholder="@($"* số lượng/thùng")" TValue="int" TextAlign=TextAlign.Center
                                                           Min="1" Max="999999"
                                                           Value="@(SLrequiredPerThung_currentLOT)"
                                                           ValueChanged="@((args) => { SLrequiredPerThung_currentLOT = args; })"
                                                           Style="--rz-input-font-size: 18px; font-weight: 600; height: 35px; border-width: 1px; width: 100%" />
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenStack Gap="5px" Style="width: contain; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <!--Button edit-->
                                        <RadzenButton Visible="@(!isEditingSoluong)" Disabled="@(TargetLotResult.IsCreatedPartOfThungTP)" Text="Edit" Icon="edit" Click="(() => { isEditingSoluong = !(isEditingSoluong); })"
                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 35px; " />
                                        <!--Button save-->
                                        <RadzenButton Visible="@(isEditingSoluong)" Disabled="@(TargetLotResult.IsCreatedPartOfThungTP)" Icon="check" Click="(() => { isEditingSoluong = false; })"
                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 35px; width: 50px" />
                                    </RadzenStack>

                                    <!--Button tao thungTP-->
                                    <RadzenButton Disabled="@(SLrequiredPerThung_currentLOT < 1 || isEditingSoluong || TargetLotResult.IsCreatedPartOfThungTP)" Text="Tạo thùng thành phẩm" Icon="@(isCreatedPartOfThungTP ? "autorenew" : "add")"
                                                  Click="@(async () => await CreateNewListPartOfThungTPhamOddNumbereds())"
                                                  ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Light" Style="border-radius: 5px; --rz-icon-size: 18px; min-height: 35px; height: contain " />

                                </RadzenStack>
                                <RadzenButton Visible="@(TargetLotResult.IsCreatedPartOfThungTP)" Text="Thùng thành phẩm đã được tạo" Icon="check"
                                              ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Default" Style="border-radius: 5px; --rz-icon-size: 17px; height: 35px; font-size: 16px;" />
                            </RadzenStack>

                            <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="height: contain; width: 100%; padding: 0px; padding-top: 10px; padding-bottom: 10px; border-top: var(--rz-grid-cell-border); border-bottom: var(--rz-grid-cell-border);">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding: 0px">
                                    <RadzenText Text="@($"Danh sách thùng thành phẩm tạo từ mã quản lý")" Style="font-size: 18px; font-weight: 500; color: black"></RadzenText>
                                </RadzenStack>
                                <!--Button reload-->
                                <RadzenButton Visible="false" Text="Reload" Icon="autorenew" Click="@(async () => await LoadDSachPartOfThungTPhams(TargetKHSX.KHSXID.Value))"
                                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; " />
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding: 0px">
                                    <RadzenText Text="@($"Số lượng thùng: {DSachNewPartOfThungTPhams.Count}")" Style="font-size: 16px; font-weight: 500; color: darkgreen"></RadzenText>
                                </RadzenStack>
                                <RadzenButton Visible="@(!IsDongThungTP && TargetLotResult.IsCreatedPartOfThungTP && DSachNewPartOfThungTPhams.Any())" Text="Xóa tất cả" Icon="delete" Click="@(async () => await OnDeleteThungThanhPham(TargetLotResult.PartOfThungTPhams))"
                                              ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Darker" Style="border-radius: 5px; --rz-icon-size: 18px; height: contain; min-height: 30px; " />
                            </RadzenStack>

                            <RadzenCard Variant="Variant.Flat" Style="height: 350px; width: 100%; padding: 10px; padding-right: 0; overflow-y: scroll">
                                <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenDataList Style="height: contain; width: 100%;" PagerPosition="PagerPosition.Top" WrapItems="true" AllowPaging="false" Data="@DSachNewPartOfThungTPhams" TItem="PartOfThungTPham">
                                        <Template Context="thungtpham">
                                            <RadzenCard Style="width: contain; height: contain; padding: 0" Variant="Variant.Flat">
                                                <RadzenCard Style="width: 100%; height: contain;" Variant="Variant.Filled">
                                                    <RadzenStack Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenCard Variant="@(Variant.Outlined)" Style="height: 100%; width: 100%; padding: 10px;">
                                                            <RadzenStack Style="width: 100%; height: 100%;" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenText Text="@((DSachNewPartOfThungTPhams.IndexOf(thungtpham) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="height: contain; width: contain; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="ID thùng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenButton Text="@($"{thungtpham.IDThung.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px; min-width: 40px"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Lighter"></RadzenButton>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Số lượng" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.SoLuong.Value?.ToString()} (PCS)")" Style="font-size: 17px; font-weight: 600; height: contain; color: darkred"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Mã quản lý LOT" Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.MaQuanLyLot.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: darkblue"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                                <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                    <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenText Text="Mã quản lý thùng" Style="font-size: 16px; font-weight: 600; height: contain; color: black"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                                        <RadzenText Text="@($"{thungtpham.MaQuanLyThung.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: darkgreen"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        </RadzenCard>
                                                    </RadzenStack>
                                                </RadzenCard>
                                            </RadzenCard>
                                        </Template>
                                    </RadzenDataList>
                                </RadzenStack>
                            </RadzenCard>

                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <!--Button comfirm-->
            <RadzenButton Disabled="@(!DSachNewPartOfThungTPhams.Any() || TargetLotResult.IsCreatedPartOfThungTP)" Text="Lưu thùng thành phẩm" Icon="check" Click="@(async () => await OnSaveThungThanhPham())"
                          ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Flat" Shade="Shade.Dark" Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; " />

            <RadzenButton Style="width: 120px; height: 80%;" Click="DialogClosePress" Icon="close" Text="Thoát" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
        </RadzenStack>

    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public ResultPerLOTKHSX TargetLotResult { get; set; } = new();

    [Parameter]
    public bool IsDongThungTP { get; set; } = false;

    [Parameter]
    public KHSX TargetKHSX { get; set; } = new();

    private int SLrequiredPerThung_currentLOT = 0;

    public bool isEditingSoluong = false;

    public bool isCreatedPartOfThungTP = false;

    private List<PartOfThungTPham> DSachOriginPartOfThungTPhams = new(); // from Database of KHSX
    private List<PartOfThungTPham> DSachNewPartOfThungTPhams = new();

    private ThungTPham? ThungTPOddNumbered;
    object? refTTP_ID;

    protected override async Task OnInitializedAsync()
    {
        if (TargetLotResult.IsCreatedPartOfThungTP)
        {
            DSachNewPartOfThungTPhams = TargetLotResult.PartOfThungTPhams;
        }

        await LoadDSachPartOfThungTPhams(TargetKHSX.KHSXID.Value);

        // Load OddNumbered ThungTP
        ThungTPOddNumbered = await LoadTTPhamTonKhoOfKHSX_FirstOfDefault();

        await base.OnInitializedAsync();
    }

    private async Task LoadDSachPartOfThungTPhams(object? khsxid)
    {
        await Task.Run(() =>
        {
            DSachOriginPartOfThungTPhams = SQLServerServices.GetListPartOfThungTPs(new Dictionary<string, object?>() { { KHSX_LOT.DBName.KHSXID, khsxid } }).thungTPhams;
        });
    }

    // Load danh sach thung thanh pham ton kho cua KHSX (cung MaSP, thung le)
    private async Task<ThungTPham?> LoadTTPhamTonKhoOfKHSX_FirstOfDefault()
    {   
        var parameters = new Dictionary<string, object?>() 
        { 
            { ThungTPham.DBName.SPID, TargetKHSX.SPID.Value },
            { Common.IsDoneKHSX, 1 }
        };
        // Same MaSP
        var dsKHSX = SQLServerServices.GetListKHSXsByAnyParmeters(parameters).kHSXes;

        ThungTPham? first_odd_numberedTTP = null;

        if (dsKHSX != null && dsKHSX.Any())
        {
            foreach (var khsx in dsKHSX)
            {
                if (khsx.KHSXID.Value != null)
                {
                    // Load danh sach TTP
                    var thungTPhams = SQLServerServices.GetListThungTPs(new Dictionary<string, object?>() {
                            {ThungTPham.DBName.KHSXID, khsx.KHSXID.Value },
                            {ThungTPham.DBName.IsOddNumbered, 1 },
                        }).thungTPhams;

                    List<ThungTPham>? oddNumberedTTPs = new();

                    // Load thung thanh pham is not have RefOddNumberedPOTTP_ID

                    var thungTPhamsFiltered = thungTPhams.Where(ttp => (int.TryParse(ttp.RefOddNumberedTTP_ID.Value?.ToString(), out int refid) ? refid : 0) == 0);

                    foreach (var ttp in thungTPhamsFiltered)
                    {
                        _ = int.TryParse(ttp.PartOfThungTPhams.FirstOrDefault()?.SLRequired.Value?.ToString(), out int slrquire) ? slrquire : 0;

                        int sumsl = ttp.PartOfThungTPhams.Sum(pottp => int.TryParse(pottp.SoLuong.Value?.ToString(), out int sl) ? sl : 0);

                        if (sumsl < slrquire)
                        {
                            oddNumberedTTPs.Add(ttp); // Add odd-numbered TTP if sumsl < SLRequired
                        }
                    }

                    if (oddNumberedTTPs != null && oddNumberedTTPs.Any())
                    {
                        return oddNumberedTTPs.FirstOrDefault(); // Return first odd-numbered TTP
                    }
                }
            }
        }

        await Task.Delay(1); // Simulate async operation

        return first_odd_numberedTTP;
    }

    private async Task CreateNewListPartOfThungTPhamOddNumbereds()
    {
        await Task.Run(async () =>
        {
            List<PartOfThungTPham> newpartofthungTPhams = new();

            // Get thung thanh pham odd-numbered of KHSX
            ThungTPOddNumbered = await LoadTTPhamTonKhoOfKHSX_FirstOfDefault();

            if (ThungTPOddNumbered == null || ThungTPOddNumbered.TTPID.Value == null)
            {
                return;
            }

            object? mqlthungtp = null; // Ma quan ly thung thanh pham odd-numbered

            foreach (var pottp in ThungTPOddNumbered.PartOfThungTPhams)
            {
                // Get SL con lai cua thung thanh pham odd-numbered
                int soluongConlai = int.TryParse(pottp.SoLuong.Value?.ToString(), out int sl) ? sl : 0;

                pottp.KHSXID.Value = TargetKHSX.KHSXID.Value;
                pottp.IDThung.Value = 0;
                pottp.SLRequired.Value = SLrequiredPerThung_currentLOT;

                // Update refPOttpId
                refTTP_ID = ThungTPOddNumbered.TTPID.Value;

                _ = int.TryParse(pottp?.IDThung.Value?.ToString(), out int idthung) ? idthung : 1;

                if (mqlthungtp == null) // If mqlthungtp is null, create a new one - use for all part of thung TP
                {
                    // Create mql thung TP
                    string randomkey = Common.GenerateUppercaseChars(5);
                    mqlthungtp = $"TTP-{TargetKHSX.MaLSX.Value?.ToString()}-{randomkey}-{idthung + 1}";
                }

                while (soluongConlai > 0)
                {
                    (PartOfThungTPham newthung, soluongConlai) = AddNewPartOfThungTPham(soluongConlai, idthung, pottp?.MaQuanLyLot.Value, refTTP_ID, mqlthungtp);

                    idthung = int.TryParse(newthung.IDThung.Value?.ToString(), out int newid) ? newid : 1;

                    newpartofthungTPhams.Add(newthung);
                }
            }   

            DSachNewPartOfThungTPhams = newpartofthungTPhams;

            isCreatedPartOfThungTP = true;
        });

        ShowNotification("Created!", NotificationSeverity.Success, 2000);
    }

    private (PartOfThungTPham, int) AddNewPartOfThungTPham(int soluongTake, int lastIDthung, object? maquanlyLot, object? refTTP_ID, object? mqlthungtp)
    {
        if (mqlthungtp == null)
        {
            // Create mql thung TP
            string randomkey = Common.GenerateUppercaseChars(5);
            mqlthungtp = $"TTP-{TargetKHSX.MaLSX.Value?.ToString()}-{randomkey}-{lastIDthung + 1}";
        }

        PartOfThungTPham newPartOfThungTP = new();

        newPartOfThungTP.KHSXID.Value = TargetKHSX.KHSXID.Value?.ToString();

        newPartOfThungTP.SPID.Value = TargetKHSX.SPID.Value?.ToString();

        newPartOfThungTP.MaQuanLyLot.Value = maquanlyLot;

        newPartOfThungTP.IDThung.Value = (lastIDthung + 1);

        newPartOfThungTP.NgayDongThung.Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM);

        newPartOfThungTP.SLRequired.Value = SLrequiredPerThung_currentLOT;

        newPartOfThungTP.MaQuanLyThung.Value = mqlthungtp;

        // Assign refPOTTP_id if provided, otherwise it will be null
        newPartOfThungTP.RefOddNumberedTTP_ID.Value = refTTP_ID;

        int soluongConlai = soluongTake - SLrequiredPerThung_currentLOT;

        if (soluongConlai <= 0) // du soluong  // thieu soluong
        {
            newPartOfThungTP.SoLuong.Value = soluongTake;

            return (newPartOfThungTP, 0);
        }
        else // thua soluong
        {
            newPartOfThungTP.SoLuong.Value = SLrequiredPerThung_currentLOT;

            return (newPartOfThungTP, soluongConlai);
        }
    }

    private async Task OnSaveThungThanhPham()
    {
        int result = 1; string error = string.Empty;

        var listgroupttp = DSachNewPartOfThungTPhams.Where(ttp => ttp.MaQuanLyThung.Value != null)
                                                    .GroupBy(ttp => ttp.MaQuanLyThung.Value).ToList();

        foreach (var partofthungtps in listgroupttp)
        {
            // Insert new list PartOfThungTP to Database
            foreach (var partthungtp in partofthungtps)
            {   
                (int newpottpid, error) = SQLServerServices.InsertPartOfThungTPham(partthungtp);

                if (newpottpid <= 0)
                {
                    result = -1;

                    await PonUpNotification(result, $"{error}");

                    return;
                }
            }

            // Insert ThungTP corresponding with PartOfThungTP
            if (partofthungtps != null)
            {   
                var parameters = new Dictionary<string, object?>() 
                { 
                    { ThungTPham.DBName.KHSXID, TargetKHSX.KHSXID.Value },
                    { ThungTPham.DBName.MaQuanLyThung, partofthungtps },
                    { ThungTPham.DBName.RefOddNumberedTTP_ID, partofthungtps.FirstOrDefault()?.RefOddNumberedTTP_ID.Value }
                };

                var lastTTPwithsameMQL = SQLServerServices.GetListThungTPs(parameters, false).thungTPhams.FirstOrDefault();

                if (lastTTPwithsameMQL != null && lastTTPwithsameMQL.TTPID.Value != null)
                {
                    // If existing --> Update
                    if (int.TryParse(lastTTPwithsameMQL.SoLuong.Value?.ToString(), out int lastttpSL))
                    {
                        int sumsl = partofthungtps.Sum(pott => int.TryParse(pott.SoLuong.Value?.ToString(), out int sl) ? sl : 0);

                        // Update new Soluong in ThungTP
                        lastTTPwithsameMQL.SoLuong.Value = lastttpSL + sumsl;
                        lastTTPwithsameMQL.NgayDongThung.Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM);

                        (int updateResult, error) = SQLServerServices.UpdateThungTPham(lastTTPwithsameMQL);

                        if (updateResult != 1)
                        {
                            result = -1;

                            await PonUpNotification(result, $"{error}");

                            return;
                        }
                    }
                    else { return; }
                }
                else
                {
                    // If not have --> Insert

                    ThungTPham thungTPham = new()
                    {
                        KHSXID = { Value = TargetKHSX.KHSXID.Value },
                        SoLuong = { Value = partofthungtps.Sum(pottp => int.TryParse(pottp.SoLuong.Value?.ToString(), out int sls) ? sls : 0) },
                        IDThung = { Value = partofthungtps.FirstOrDefault()?.IDThung.Value },
                        SPID = { Value = TargetKHSX.SPID.Value },
                        NgayDongThung = { Value = DateTime.Now.ToString(Common.FormatNoTime_yyyddMM) },
                        MaQuanLyThung = { Value = partofthungtps.FirstOrDefault()?.MaQuanLyThung.Value },
                        RefOddNumberedTTP_ID = { Value = partofthungtps.FirstOrDefault()?.RefOddNumberedTTP_ID.Value }
                    };

                    (int newttpID, error) = SQLServerServices.InsertThungTPham(thungTPham);

                    if (newttpID == -1)
                    {
                        result = -1;

                        await PonUpNotification(result, $"{error}");

                        return;
                    }
                }
            }
        }

        // Update ThungTPOddNumbered (update IsHandleOddNumbered = 1)
        if (ThungTPOddNumbered != null && ThungTPOddNumbered.TTPID.Value != null)
        {
            ThungTPOddNumbered.RefOddNumberedTTP_ID.Value = refTTP_ID;

            (int updateResult, error) = SQLServerServices.UpdateThungTPham(ThungTPOddNumbered);
            if (updateResult != 1)
            {
                result = -1;
                await PonUpNotification(result, $"{error}");
                return;
            }
        }

        await PonUpNotification(result, $"Tạo thùng thành phẩm thành công! <strong><span>{TargetLotResult.MaQuanLyLot}</span></strong>");
    }

    private async Task OnDeleteThungThanhPham(List<PartOfThungTPham> partofthungTPhams)
    {
        bool? confirm = await DialogService.Confirm($"Xóa thùng thành phẩm của mã LOT: <strong><span>{TargetLotResult.MaQuanLyLot}</span></strong>?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            bool isOK = false; string error = string.Empty;

            foreach (var partthungtp in partofthungTPhams)
            {
                (isOK, error) = SQLServerServices.DeletePartOfThungTPham(partthungtp.POTTPID.Value);

                if (!isOK)
                {
                    break;
                }
                else
                {
                    var targetThungTP = SQLServerServices.GetListThungTPs(new() { { ThungTPham.DBName.MaQuanLyThung, partthungtp.MaQuanLyThung.Value } }).thungTPhams.FirstOrDefault();

                    if (targetThungTP != null)
                    {
                        int sumslthung = targetThungTP.PartOfThungTPhams.Sum(pot => int.TryParse(pot.SoLuong.Value?.ToString(), out int sl) ? sl : 0);

                        if (sumslthung == 0)
                        {
                            SQLServerServices.DeleteThungTP(targetThungTP.TTPID.Value);
                        }
                        else
                        {
                            targetThungTP.SoLuong.Value = sumslthung;

                            SQLServerServices.UpdateThungTPham(targetThungTP);
                        }
                    }
                }
            }

            if (isOK)
            {
                DSachNewPartOfThungTPhams = new();

                await DialogService.Alert($"Đã xóa!", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                DialogService.Close(null);
            }
            else
            {
                await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private void DialogClosePress()
    {
        DialogService.Close(null);
    }

    private void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
        {
            Style = "position: fixed; top: 0; right: 0;",
            Severity = notifytype,
            Summary = message,
            Duration = time
        };

        NotificationService.Notify(notify);
    }

    private async Task PonUpNotification(int result, string content)
    {
        if (result <= 0)
        {
            await DialogService.Alert($"Error: {content}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = false });

            DialogService.Close(null);
        }
        else
        {
            // Update trang thai created thungTP cho targetLotResult

            await DialogService.Alert($"{content}", "<strong><span style='color: green'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = false });

            DialogService.Close(DSachNewPartOfThungTPhams);
        }
    }
}