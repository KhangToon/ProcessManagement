@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models.KHSXs.MQL_Template

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .custom-datepicker input[type="text"]::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }
</style>

<RadzenCard Style="height: 100%; width: 100%; padding: 5px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0; padding: 0; padding-bottom: 10px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 10px; background-color: var(--rz-primary-darker);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenText Text="TẠO MÃ QUẢN LÝ TEMPLATE" Style="color: white; font-weight: 500; font-size: 18px"></RadzenText>
        </RadzenStack>

        <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; overflow-y: scroll">
            <RadzenColumn Size="12" SizeMD="6" Style="height: 100%; width: 100%; padding: 15px; padding-right: 0">
                <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText Text="Danh sách thuộc tính của TEMPLATE LOT" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; "></RadzenText>

                    <RadzenButton Style="width: contain; height: contain; font-weight: 600" Icon="add" Text="Thêm thuộc tính khác" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat"
                                  Click="@(() => OnOpenDialogAddThongTinKhac())" />
                </RadzenStack>

                <RadzenCard Variant="Variant.Flat" Style="min-height: 300px; width: 100%; padding: 0px; margin-top: 10px; background-color: white">
                    <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="15px" Orientation="Orientation.Vertical">
                        <!--Hien thi thong tin khac-->
                        @foreach (var mqlItem in NewMQLTemplate.MQLTemplateItems)
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 5px; border-bottom: var(--rz-grid-cell-border);">
                                <RadzenStack Style="width: 5%;">
                                    <RadzenText Text="@($"[{NewMQLTemplate.MQLTemplateItems.IndexOf(mqlItem) + 1}]")" Style="color: darkblue; font-size: 17px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="width: 20%;">
                                    <RadzenText Text="@(mqlItem.MQLTemplateProperty.TemplateName.Value?.ToString())" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="width: 75%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        @{
                                            int kieudulieu = int.TryParse(mqlItem.MQLTemplateProperty.KieuDuLieu.Value?.ToString(), out int kdl) ? kdl : 0;

                                            if (kieudulieu == 1) // kieu ky tu
                                            {
                                                <RadzenStack Style="width: 50%;">
                                                    <RadzenTextBox class="custom-placeholder" Placeholder="@($" * nhập {mqlItem.MQLTemplateProperty.TemplateName.Value?.ToString()}")" Value="@mqlItem.GiaTri.Value?.ToString()" Style="font-size: 16px; height: contain; border-width: 1px;"
                                                                   @oninput="@(async (args) => {mqlItem.GiaTri.Value = args.Value; await AnotherMQLTemplateItem_ValueIsOK(mqlItem, kieudulieu);})">
                                                    </RadzenTextBox>
                                                </RadzenStack>
                                            }
                                            else if (kieudulieu == 2) // Kieu so
                                            {
                                                <RadzenStack Style="width: 50%;">
                                                    <RadzenNumeric class="custom-placeholder" Placeholder="@($" * nhập {mqlItem.MQLTemplateProperty.TemplateName.Value?.ToString()}")" TValue="int"
                                                                   Value="@(int.Parse(mqlItem.GiaTri.Value?.ToString()?? "0"))"
                                                                   ValueChanged="@(async (args) =>
                                                                        {   mqlItem.GiaTri.Value = args;
                                                                            await AnotherMQLTemplateItem_ValueIsOK(mqlItem, kieudulieu);
                                                                        })"
                                                                   Style="font-size: 16px; height: contain;" Min="0" Max="999999" />
                                                </RadzenStack>
                                            }
                                            else if (kieudulieu == 3) // kieu ngay thang
                                            {
                                                bool ishaveValueOfday = DateTime.TryParse(mqlItem.GiaTri.Value?.ToString(), out DateTime selectday);
                                                if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);
                                                <RadzenStack Style="width: 50%;">
                                                    <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {mqlItem.MQLTemplateProperty.TemplateName.Value?.ToString()}")"
                                                                      TValue="DateTime" Value="selectday" AllowClear="true"
                                                                      Change="@(async (args) =>
                                                                                {
                                                                                    if (args != null)
                                                                                    {
                                                                                        DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                        mqlItem.GiaTri.Value = value;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        mqlItem.GiaTri.Value = string.Empty;
                                                                                    }
                                                                                    await AnotherMQLTemplateItem_ValueIsOK(mqlItem, kieudulieu);
                                                                                })"
                                                                      ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" ParseInput="@Common.ParseDate_ddMMyyyy" AllowInput="true"
                                                                      Style="height: contain; font-size: 16px">
                                                    </RadzenDatePicker>
                                                </RadzenStack>
                                            }

                                            <RadzenStack Style="width: contain">
                                                <RadzenAlert Visible="@(!mqlItem.GiaTri.IsCheckValueOK)" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"{mqlItem.GiaTri.NotifyMess}", 100, 1000))"
                                                             Style="width: contain; height: contain; min-height: 35px; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Warning" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                                <RadzenAlert Visible="@(mqlItem.GiaTri.IsCheckValueOK)" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, $"{mqlItem.GiaTri.NotifyMess}", 100, 1000))"
                                                             Style="width: contain; height: contain; min-height: 35px; font-size: 14px; padding: 2px; padding-left: 10px; margin: 0" AlertStyle="AlertStyle.Success" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                            </RadzenStack>
                                            <RadzenStack Style="width: 8%; height: 100%" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenButton Disabled="@(mqlItem.MQLTemplateProperty.TenTruyXuat.Value?.ToString() == MQLTemplate.Property_MaLenhSX)" Click="@(() => OnRemoveMQLTemplate(mqlItem))" Icon="delete"
                                                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px; width: 100%; height: contain; min-height: 35px" />
                                            </RadzenStack>
                                        }
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        }
                        <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenButton Style="width: contain; height: contain; font-weight: 600" Icon="autorenew" Text="Tạo danh sách LOT" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Size="ButtonSize.Small" Variant="Variant.Flat"
                                          Click="@(async() => await OnGenerateDSachLotwithTemplate())" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
                <RadzenStack Visible="@(GenerateLot_V3.DetailLotKHSXs.Any())" Gap="10px" Orientation="Orientation.Vertical" Style="height: 100%; width: 100%; margin-top: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                    <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: 100%; padding: 5px; padding-right: 0px; background-color: var(--rz-primary-dark)">
                            <RadzenStack Style="width: 100%; height: contain" Gap="0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenStack Style="width: 30%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="Ngày nhập kho" Style="color: white; font-weight: 600; font-size: 15px"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="width: 25%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="Lot chẳn" Style="color: white; font-weight: 600; font-size: 15px"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="width: 25%; height: contain; padding-left: 10px; padding-right: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="Lot lẻ" Style="color: white; font-size: 15px; font-weight: 600; height: contain;"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Style="width: 20%; height: contain; " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="Tổng" Style="color: white; font-size: 15px; font-weight: 600; height: contain;"></RadzenText>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    </RadzenStack>

                    <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 90%; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        @foreach (var lotkhsx in GenerateLot_V3.DetailLotKHSXs)
                        {
                            <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px; background-color: white">
                                <RadzenStack Style="width: 100%; height: 100%" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenStack Style="width: 30%; height: contain; border-right: var(--rz-grid-cell-border); padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenText Text="@lotkhsx.NgayNhapKho?.ToString()" Style="color: darkblue; font-weight: 600; font-size: 14px"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: 25%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenText Visible="@(lotkhsx.SLLotChan > 0)" Text="@($"{lotkhsx.SLLotChan.ToString()} LOT")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                        <RadzenText Visible="@(lotkhsx.SLLotChan > 0)" Text="@($"{lotkhsx.SLperLotChan.ToString()} PCS")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: 25%; height: contain; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenText Visible="@(lotkhsx.SLLotLe > 0)" Text="@($"{lotkhsx.SLLotLe.ToString()} LOT")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                        <RadzenText Visible="@(lotkhsx.SLLotLe > 0)" Text="@($"{lotkhsx.SLperLotLe.ToString()} PCS")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="width: 20%; height: contain; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenText Text="@($"{(lotkhsx.SLLotChan*lotkhsx.SLperLotChan + lotkhsx.SLLotLe*lotkhsx.SLperLotLe).ToString()} PCS")" Style="font-size: 14px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenCard>
                        }
                    </RadzenStack>
                </RadzenStack>

            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6" Style="width: 100%; height: 100%; padding: 15px; padding-right: 0; border-left: var(--rz-grid-cell-border);">
                <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText Text="Danh sách LOT nguyên vật liệu" Style="color: var(--rz-primary-darker); font-size: 16px; font-weight: 600; height: contain; "></RadzenText>
                    <RadzenText Text="@($"({GenerateLot_V3.ListTempLOT_NVLs?.Count} LOT)")" Style="color: black; font-style: italic; font-weight: 600; font-size: 16px"></RadzenText>
                </RadzenStack>
                <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 95%; width: 100%; padding: 0px;" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                    <!--LOT List-->
                    <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: 100%; padding: 5px; margin-top: 10px; background-color: white">
                        <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            <RadzenStack Gap="0" Orientation="Orientation.Vertical" Style=" height: 8%; width: 100%; padding-right: 10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: 100%; padding: 5px;">
                                    <RadzenStack Style="width: 100%; height: contain" Gap="0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <RadzenStack Style="width: 10%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="#" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 45%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="Mã quản lý" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 20%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="Số lượng" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 25%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="Ngày nhập kho" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenCard>
                            </RadzenStack>

                            <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 500px; width: 100%; overflow-y: scroll; " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                @if (GenerateLot_V3.ListTempLOT_NVLs != null)
                                {
                                    @foreach (var lot in GenerateLot_V3.ListTempLOT_NVLs)
                                    {
                                        <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: 100%; padding: 5px; background-color: white">
                                            <RadzenStack Style="width: 100%; height: contain" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Style="width: 10%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@((GenerateLot_V3.ListTempLOT_NVLs?.IndexOf(lot) + 1).ToString())" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 45%; height: contain; background-color: beige" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@lot.MaQuanLy.Value?.ToString()" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 20%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@($"{lot.SoLuong.Value} (PCS)")" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 25%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@($"{lot.NgayNhap.Value}")" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenCard>
                                    }
                                }
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Disabled="@(!NewMQLTemplate.MQLTemplateItems.Any() || NewMQLTemplate.MQLTemplateItems.Any(item => item.GiaTri.IsCheckValueOK == false))" Style="width: contain; height: 80%;" Icon="check" Text="Xác nhận" Click="@(() => { DialogService.Close(NewMQLTemplate);} )" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Default" Size="ButtonSize.Small" Variant="Variant.Filled" />
            <RadzenButton Style="width: contain; height: 80%;" Icon="close" Text="Thoát" Click="@(() => { DialogService.Close(null);})" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public MQLTemplate NewMQLTemplate { get; set; } = new();

    [Parameter]
    public object? MaLSX { get; set; }

    [Parameter]
    public object? MaSanPham { get; set; }

    [Parameter]
    public GenerateLot_V3 GenerateLot_V3 { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMQLTemplateItems();

        await base.OnInitializedAsync();
    }

    private async Task LoadMQLTemplateItems()
    {
        List<MQLTemplateProperty> mQLTLproperties = SQLServerServices.GetListMQLTLPropertiess(new Dictionary<string, object?>(), true).mQLTemplates;

        await CreateMQLTemplateItems(mQLTLproperties);
    }

    private async Task OnOpenDialogAddThongTinKhac()
    {
        List<MQLTemplateProperty> mqltemplateProperties = await DialogService.OpenAsync<DialogAddNewMQLTemplateProperty>(null, new Dictionary<string, object>() { { "TargetMQLTemplate", NewMQLTemplate } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        await CreateMQLTemplateItems(mqltemplateProperties);
    }

    private async Task CreateMQLTemplateItems(List<MQLTemplateProperty> mqltemplateProperties)
    {
        // Add MLenhSX is Default

        // if (!(NewMQLTemplate.MQLTemplateItems.Any(mqltl => mqltl.MQLTemplateProperty.TenTruyXuat.Value?.ToString() == MQLTemplate.Property_MaLenhSX)))
        // {
        //     var maLSXtemplate = mqltemplateProperties.FirstOrDefault(x => x.TenTruyXuat.Value?.ToString() == MQLTemplate.Property_MaLenhSX);

        //     if (maLSXtemplate != null)
        //     {
        //         MQLTemplateItem mqltlItem = new()
        //             {
        //                 MQLTLpropertyID = { Value = maLSXtemplate.MQLTLpropertyID.Value },
        //                 MQLTemplateProperty = maLSXtemplate,
        //                 GiaTri = { Value = maLSXtemplate.DefaultValue.Value }
        //             };

        //         NewMQLTemplate.MQLTemplateItems.Add(mqltlItem);
        //     }
        // }

        if (mqltemplateProperties != null && mqltemplateProperties.Count > 0)
        {
            foreach (var mqltlProperty in mqltemplateProperties)
            {
                var isexisting = NewMQLTemplate.MQLTemplateItems.Any(thongtin => thongtin.MQLTemplateProperty.TenTruyXuat.Value?.ToString() == mqltlProperty.TenTruyXuat.Value?.ToString());

                if (!isexisting)
                {
                    await Task.Delay(100);

                    string tentruyxuat = mqltlProperty.TenTruyXuat.Value?.ToString() ?? string.Empty;

                    if (tentruyxuat == MQLTemplate.Property_MaLenhSX)
                    {
                        mqltlProperty.DefaultValue.Value = MaLSX;
                    }
                    else if (tentruyxuat == MQLTemplate.Property_MaSanPham)
                    {
                        mqltlProperty.DefaultValue.Value = MaSanPham;
                    }
                    else if (tentruyxuat == MQLTemplate.Property_NgayNhapKho)
                    {

                    }

                    MQLTemplateItem thongTin = new()
                        {
                            MQLTLpropertyID = { Value = mqltlProperty.MQLTLpropertyID.Value },
                            MQLTemplateProperty = mqltlProperty,
                            GiaTri = { Value = mqltlProperty.DefaultValue.Value }
                        };

                    await AnotherMQLTemplateItem_ValueIsOK(thongTin, int.Parse(thongTin.MQLTemplateProperty.KieuDuLieu.Value?.ToString() ?? "0"));

                    NewMQLTemplate.MQLTemplateItems.Add(thongTin);
                }
            }
        }
    }

    private async Task AnotherMQLTemplateItem_ValueIsOK(MQLTemplateItem mqlItem, int kieudulieu)
    {
        await Task.Run(() =>
        {
            string value = mqlItem.GiaTri.Value?.ToString() ?? string.Empty;
            string? displayName = mqlItem.MQLTemplateProperty.TemplateName.Value?.ToString() ?? string.Empty;

            string tentruyxuat = mqlItem.MQLTemplateProperty.TenTruyXuat.Value?.ToString() ?? string.Empty;

            if (tentruyxuat == MQLTemplate.Property_NgayNhapKho)
            {
                mqlItem.GiaTri.IsCheckValueOK = true; mqlItem.GiaTri.NotifyMess = "Giá trị hợp lệ";

                return;
            }

            if (string.IsNullOrEmpty(value.Trim()))
            {
                mqlItem.GiaTri.IsCheckValueOK = false; mqlItem.GiaTri.NotifyMess = $"{displayName} không được để trống";
            }
            else
            {
                bool isValueOK = false;

                if (kieudulieu == 1) // Kieu ki tu
                {
                    isValueOK = !string.IsNullOrEmpty(value.Trim());
                }
                else if (kieudulieu == 2) // Kieu so luong
                {
                    isValueOK = int.TryParse(value, out int soluong) && soluong > 0;
                }
                else if (kieudulieu == 3) // Kieu ngay thang
                {
                    isValueOK = DateTime.TryParse(value, out DateTime ngay);
                }
                else isValueOK = false;

                if (isValueOK)
                {
                    mqlItem.GiaTri.IsCheckValueOK = true; mqlItem.GiaTri.NotifyMess = "Giá trị hợp lệ";
                }
                else
                {
                    mqlItem.GiaTri.IsCheckValueOK = false; mqlItem.GiaTri.NotifyMess = "Giá trị không hợp lệ";
                }
            }
        });
    }

    private async Task OnGenerateDSachLotwithTemplate()
    {
        List<ViTriofNVL> dsvitris = GenerateLot_V3.NewKHSX.DSachNVLofKHSXs.FirstOrDefault()?.dsVitriofNVLs ?? new();

        await Task.Run(() => { GenerateLot_V3.ListTempLOT_NVLs = GenerateLot_V3.GenerateLotNVL_perVitriofNVL(dsvitris, GenerateLot_V3.DinhMuc, GenerateLot_V3.SLperLotChan, NewMQLTemplate); });
    }

    private void OnRemoveMQLTemplate(MQLTemplateItem removeMQLtemplateItem)
    {
        NewMQLTemplate.MQLTemplateItems.Remove(removeMQLtemplateItem);
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = delay, Duration = duration, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }
}
