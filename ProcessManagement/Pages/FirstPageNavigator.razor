@page "/"
@attribute [Authorize(Roles = $"Admin, User, {Common.UserDongThung}")]

@using ParamountBed_Warehouse.Services.SocketService
@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_NVL.XuatKho
@using ProcessManagement.Pages.KehoachSX.Dialogs
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using Microsoft.AspNetCore.Components
@using System.Security.Claims

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@code {
    private List<string>? UserRoles;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState?.User;

        if (user != null && user.Identity?.IsAuthenticated == true)
        {
            // UserRoles = user.Claims.Where(c => c.Type == "role").Select(c => c.Value).ToList();
            // Check for claims with type "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
            UserRoles = user.Claims
                .Where(c => c.Type == ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }

        // Checking if is User login not Admin
        if (UserRoles != null && UserRoles.Any())
        {
            string userrole = UserRoles.FirstOrDefault()?.Trim() ?? string.Empty;

            if (userrole == "User")
            {
                // Navigate to Mobile device
                NavigationManager.NavigateTo("/mobilemainpage");
            }
            else if (userrole == "Admin")
            {
                // Navigate to admin firstpage
                NavigationManager.NavigateTo("/pagedskhsanxuats");
            }
            else if (userrole == Common.UserDongThung)
            {
                // Navigate to admin firstpage
                NavigationManager.NavigateTo("/khsx-dongthung");
            }
        }

        await base.OnInitializedAsync();
    }
}
