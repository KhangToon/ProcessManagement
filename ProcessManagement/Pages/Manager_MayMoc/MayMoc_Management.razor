@page "/mmtbmanagement"
@attribute [Authorize(Roles = "Admin, User")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.MAYMOC
@using ProcessManagement.Pages.Manager_MayMoc.Dialogs
@using ProcessManagement.Services.QRCodes
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen

@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime

<style>
    .custom-placeholder::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .custom-datepicker input[type="text"]::placeholder {
        color: #888888;
        font-size: 14px;
        font-style: italic;
    }

    .rz-grid-table-fixed-2 {
        table-layout: auto;
        border-radius: 10px;
        padding: 10px;
    }
</style>

<RadzenRow Gap="0" Style="height: 100%; width: 100%; overflow-y: auto; background-color: white; border-radius: 10px;">
    <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding-right: 0">
        <RadzenTabs Style="width: 100%; height: 100%; padding-right: 0">
            <Tabs>
                <RadzenTabsItem Selected="true" Text="Quản lý máy móc/thiết bị">
                    <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding-top: 15px">
                        <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                            <!--Thanh tim kiem-->
                            <RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenStack Style="height: 100%; width: 20%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenText Text="QUẢN LÝ MÁY MÓC/THIẾT BỊ" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                                </RadzenStack>
                                <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: 60%;">
                                    <RadzenTextBox @oninput="@((args) => FilterNV(args?.Value))" Placeholder="Tìm theo tên, mã, serial máy/thiết bị" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 50% "></RadzenTextBox>
                                    <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                                    <RadzenButton Click="@(async() => { await LoadAllDanhsachMayMocBase(); ReSelectCurrentMayMoc(Common.SelectedMayMocid); })" IsBusy="@isLoadingDSMM" BusyText=" Loading..." Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
                                </RadzenStack>
                            </RadzenStack>
                            <!--Filter-->
                            <RadzenStack Gap="0px" Orientation="Orientation.Horizontal" Style="height: 50px; width: 100%; padding-top: 5px; padding-bottom: 0px; border-top: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">

                            </RadzenStack>

                            <!--Danh sach may moc-->
                            <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
                                <!--Column bang danh sach may moc-->
                                <RadzenColumn Size="12" SizeMD="7" Style="height: contain; width: 100%; padding-top: 5px;">
                                    <!--Header infor-->
                                    <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding-bottom: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                        <RadzenStack Visible="@(DSachMayMocs.Count > 0)" Gap="10px" Style="height: contain; width: contain; padding: 10px; padding-left: 0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenText Text="Danh sách máy móc/thiết bị" Style="font-weight: 600; height: contain; width: contain; font-style: italic; color: darkred"></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenStack Gap="10px" Style="height: 100%; width: contain; padding-right: 10px; border-right: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                <RadzenText Text="@($"Loại máy móc/thiết bị:")" Style="color: black; height: contain; width: contain; font-size: 15px"></RadzenText>
                                            </RadzenStack>
                                            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                <RadzenText Text="@($"Tổng số lượng: ")" Style="color: black;  height: contain; width: contain; font-size: 15px"></RadzenText>
                                                <RadzenText Text="@($"{DSachMayMocs?.Count?? 0}")" Style="color: black; font-weight: 600; font-size: 15px; height: contain; width: contain"></RadzenText>
                                            </RadzenStack>
                                        </RadzenStack>
                                        <!--Button them may moc moi-->
                                        <RadzenStack Style="height: 100%; width: contain; padding-left: 10px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenButton Click="OnThemMoiMayMoc" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm máy móc mới"))" Icon="add" Text="Thêm máy móc mới" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                                          Style="height: contain; width: contain; font-size: 14px;" />
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenStack Visible="@(DSachMayMocs?.Count == 0)" Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenText Text="Hãy chọn loại máy móc/thiết bị" Style="color: red; font-weight: 500; font-size: 16px"></RadzenText>
                                    </RadzenStack>

                                    <!--Datagrid danh sach may moc-->
                                    <RadzenStack Visible="@(DSachMayMocs?.Count > 0)" Style="height: 450px; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                                        <RadzenDataGrid class="rz-grid-table-fixed-2" Data="@(DSachMayMocs)" TItem="MayMoc" IsLoading="@isLoadingDSMM"
                                                        EmptyText="Danh sách máy móc trống." Style="overflow-x: scroll; width: 100%; height: 100%"
                                                        ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true"
                                                        AllowFiltering="false" FilterMode="FilterMode.Simple"
                                                        AllowPaging="true" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                        ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                                        GridLines="DataGridGridLines.Both" PageSize="10" Density="Density.Default"
                                                        HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77)"))"
                                                        CellRender="@OnCellRender" Value="@DatagridSeleted" ValueChanged="@((args) => OnDatagridSelectChanged(args))">
                                            <Columns>
                                                @if (DSachMayMocs?.Count > 0)
                                                {
                                                    List<Propertyy> columns = DSachMayMocs.FirstOrDefault()?.GetPropertiesValues() ?? new();

                                                    <!--STT-->
                                                    <RadzenDataGridColumn Width="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                                          TItem="MayMoc" Title="#"
                                                                          Property="STT" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                                        </HeaderTemplate>
                                                        <Template Context="may">
                                                            <span style="font-weight: bold;">@(DSachMayMocs.IndexOf(may) + 1)</span>
                                                        </Template>
                                                    </RadzenDataGridColumn>

                                                    foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                                    {
                                                        string colName = column.DBName ?? string.Empty;
                                                        string displayName = column.DisplayName ?? string.Empty;

                                                        if (colName == Common.MM_MaMay) // ma may
                                                        {
                                                            <RadzenDataGridColumn Width="100px" TItem="MayMoc" Title="@displayName"
                                                                                  Property="@colName" TextAlign="TextAlign.Center">
                                                                <HeaderTemplate>
                                                                    <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                </HeaderTemplate>
                                                                <Template Context="may">
                                                                    <RadzenText Text="@($"{may.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; color: darkblue; font-weight: bold"></RadzenText>
                                                                </Template>
                                                            </RadzenDataGridColumn>
                                                        }
                                                        else if (colName == Common.MM_TenMay) // ten may
                                                        {
                                                            <RadzenDataGridColumn Width="200px" TItem="MayMoc" Title="@displayName"
                                                                                  Property="@colName" TextAlign="TextAlign.Center">
                                                                <HeaderTemplate>
                                                                    <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                </HeaderTemplate>
                                                                <Template Context="may">
                                                                    <RadzenText Text="@($"{may.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; font-weight: 500"></RadzenText>
                                                                </Template>
                                                            </RadzenDataGridColumn>
                                                        }
                                                        else if (colName == Common.MM_Serial) // so serial
                                                        {
                                                            <RadzenDataGridColumn Width="100px" TItem="MayMoc" Title="@displayName"
                                                                                  Property="@colName" TextAlign="TextAlign.Center">
                                                                <HeaderTemplate>
                                                                    <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                </HeaderTemplate>
                                                                <Template Context="may">
                                                                    <RadzenText Text="@($"{may.GetPropertyValue(colName)}")" Style="font-size: 15px; height: contain; color: black; font-weight: bold"></RadzenText>
                                                                </Template>
                                                            </RadzenDataGridColumn>
                                                        }
                                                    }

                                                    <!--Ngay su dung-->
                                                    <RadzenDataGridColumn Width="150px" TItem="MayMoc" Title="ngaysudung" Frozen="false"
                                                                          Property="ngaysudung" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: 600; font-size: 15px; color: white">Ngày sử dụng</span>
                                                        </HeaderTemplate>
                                                        <Template Context="may">
                                                            @{
                                                                string valuensd = may.DSThongTin.FirstOrDefault(tt => tt.LoaiThongTin.TenLoaiThongTin.Value?.ToString()?.Trim() == Common.MM_NgaySuDung)?.GiaTri.Value?.ToString() ?? string.Empty;
                                                                bool ishaveValueOfday = DateTime.TryParse(valuensd, out DateTime vldate);

                                                                <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                            }

                                                        </Template>
                                                    </RadzenDataGridColumn>

                                                    <!--ID-->
                                                    <RadzenDataGridColumn Width="60px" TItem="MayMoc" Title="#ID" Frozen="true"
                                                                          Property="#ID" TextAlign="TextAlign.Center">
                                                        <HeaderTemplate>
                                                            <span style="font-weight: 600; font-size: 15px; color: white">#ID</span>
                                                        </HeaderTemplate>
                                                        <Template Context="may">
                                                            <RadzenText Text="@($"#{may.GetPropertyValue(Common.MM_MMID)}")" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                        </Template>
                                                    </RadzenDataGridColumn>
                                                }
                                            </Columns>
                                        </RadzenDataGrid>
                                    </RadzenStack>
                                </RadzenColumn>
                                <!--Column danh sach thong tin may moc-->
                                <RadzenColumn Size="12" SizeMD="5" Style="height: contain; width: 100%; padding-top: 10px; padding-left: 10px; border-left: var(--rz-grid-cell-border);">
                                    <RadzenCard Variant="Variant.Filled" Style="border-radius: 10px; height: 100%; width: 100%;">
                                        <RadzenStack Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" Gap="5px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenCard Variant="@((isEditMayMocDetail)? Variant.Flat : Variant.Outlined)" Style="height: 390px; width: 100%; padding: 0px; border-radius: 10px;">
                                                <RadzenStack Style="height: 100%; width: 100%; padding: 5px; padding-right: 0; overflow-y: scroll" Gap="0" Orientation="Orientation.Vertical">
                                                    <RadzenStack Style="height: contain; width: 100%; padding: 10px; padding-right: 0;" Gap="0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                        <RadzenCard Variant="Variant.Filled" Style="height: contain; width: contain; padding: 0px; border-radius: 10px">
                                                            @{
                                                                string qrBase64string = QRCodeServices.GenerateQRCode(SelectedMayMoc.MaMay.Value?.ToString() ?? string.Empty, 150);
                                                                @if (!string.IsNullOrEmpty(qrBase64string))
                                                                {
                                                                    <RadzenImage Style="max-width: 130px; max-height: 130px; padding: 0px; border-radius: 10px; margin: 0" Path="@($"data:image/png;base64,{qrBase64string}")"></RadzenImage>
                                                                }
                                                                else
                                                                {
                                                                    <RadzenIcon Icon="image_not_supported" Style="font-size: 150px; color: #ccc;"></RadzenIcon>
                                                                }
                                                            }
                                                        </RadzenCard>
                                                        <RadzenStack Style="height: contain; width: 70%; padding: 0px; padding-left: 30px" Orientation="Orientation.Vertical" Gap="10px" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
                                                            <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenText Text="@($"{SelectedMayMoc.TenMay.Value?.ToString()}")" Style="color: black; font-size: 18px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenText Text="Mã máy:" Style="font-size: 16px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                                <RadzenText Text="@($"{SelectedMayMoc.MaMay.Value?.ToString()}")" Style="color: darkblue; font-size: 18px; font-weight: bold; height: contain; width: contain"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenText Text="Số Serial:" Style="font-size: 16px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                                <RadzenText Text="@($"{SelectedMayMoc.Serial.Value?.ToString()}")" Style="color: darkblue; font-size: 18px; font-weight: bold; height: contain; width: contain"></RadzenText>
                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                    <RadzenStack Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-darker); padding: 5px; padding-left: 10px; margin-bottom: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                        <RadzenText Text="Thông tin chi tiết máy móc/thiết bị" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>
                                                    </RadzenStack>
                                                    <!--Display main details--> <!--Edit mode-->
                                                    @if (isEditMayMocDetail)
                                                    {
                                                        var mmocthongtins = SelectedMayMoc?.GetPropertiesValues().Where(nvl => nvl.AlowDisplay == true).ToList() ?? new();

                                                        foreach (var thongtinmm in mmocthongtins)
                                                        {
                                                            <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Style="width: 30%;">
                                                                    <RadzenText Text="@thongtinmm.DisplayName" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditMayMocDetail)? JustifyContent.Start : JustifyContent.Center)">

                                                                    @if (thongtinmm.Type == typeof(string))
                                                                    {
                                                                        <RadzenTextBox Placeholder="@($"* nhập {thongtinmm.DisplayName}")" Value="@thongtinmm.Value?.ToString()" ValueChanged="@((args) => { thongtinmm.Value = args; } )"
                                                                                       Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                    }
                                                                    else if (thongtinmm.Type == typeof(int))
                                                                    {
                                                                        <RadzenNumeric Placeholder="@($"* nhập {thongtinmm.DisplayName}")" TValue="int" Value="@int.Parse(thongtinmm.Value?.ToString()?? "0")" Min="0" Max="999999" ValueChanged="@((args) => { thongtinmm.Value = args; })"
                                                                                       Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                    }
                                                                    else if (thongtinmm.Type == typeof(DateTime))
                                                                    {
                                                                        bool ishaveValueOfday = DateTime.TryParse(thongtinmm.Value?.ToString(), out DateTime selectday);
                                                                        if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                        <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {thongtinmm.DisplayName}")"
                                                                                          TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                          Change="@((args) =>
                                                                                                        {
                                                                                                            if (args != null)
                                                                                                            {
                                                                                                                DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                                thongtinmm.Value = value;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                thongtinmm.Value = string.Empty;
                                                                                                            }
                                                                                                        })"
                                                                                          ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" ParseInput="@Common.ParseDate_ddMMyyyy" AllowInput="true"
                                                                                          Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                    }
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        }
                                                    }

                                                    <!--Display extra details-->
                                                    @if (SelectedMayMoc?.DSThongTin.Count > 0)
                                                    {
                                                        var maymocdetails = SelectedMayMoc.DSThongTin;

                                                        if (maymocdetails != null)
                                                        {
                                                            foreach (var mmdetail in maymocdetails)
                                                            {
                                                                <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenStack Style="width: 30%;">
                                                                        <RadzenText Text="@(mmdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString())" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditMayMocDetail)? JustifyContent.Start : JustifyContent.Center)">
                                                                        @{
                                                                            int kieudulieu = int.TryParse(mmdetail.LoaiThongTin.KieuDuLieu.Value?.ToString(), out int kdl) ? kdl : 0;

                                                                            <!--Edit mode-->
                                                                            if (isEditMayMocDetail)
                                                                            {

                                                                                if (kieudulieu == 1) // kieu ki tu
                                                                                {
                                                                                    <RadzenTextBox class="custom-placeholder" Placeholder="@($"* nhập {mmdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                   Value="@mmdetail.GiaTri.Value?.ToString()" ValueChanged="@((args) => { mmdetail.GiaTri.Value = args; } )"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                                }
                                                                                else if (kieudulieu == 2) // kieu so
                                                                                {
                                                                                    <RadzenNumeric class="custom-placeholder" Placeholder="@($"* nhập {mmdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")" TValue="int"
                                                                                                   Value="@int.Parse(mmdetail.GiaTri.Value?.ToString()?? "0")" Min="1" Max="999999"
                                                                                                   ValueChanged="@((args) => { mmdetail.GiaTri.Value = args; })"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                                }
                                                                                else if (kieudulieu == 3) // datetime
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(mmdetail.GiaTri.Value?.ToString(), out DateTime selectday);
                                                                                    if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                                    <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {mmdetail.LoaiThongTin.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                      TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                                      Change="@((args) =>
                                                                                                        {
                                                                                                            if (args != null)
                                                                                                            {
                                                                                                                DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                                mmdetail.GiaTri.Value = value;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                mmdetail.GiaTri.Value = string.Empty;
                                                                                                            }
                                                                                                        })"
                                                                                                      ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" ParseInput="@Common.ParseDate_ddMMyyyy" AllowInput="true"
                                                                                                      Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                <!--Normal mode-->
                                                                                if (kieudulieu == 3)
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(mmdetail.GiaTri.Value?.ToString(), out DateTime vldate);

                                                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <RadzenText Text="@mmdetail.GiaTri.Value?.ToString()" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                            }
                                                                        }
                                                                    </RadzenStack>
                                                                    <RadzenStack Visible="@isEditMayMocDetail" Gap="5" Style="width: 15%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenButton Click="@(() => OpendialogRenameThongTinMM(mmdetail))" Icon="edit" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Đổi tên trường thông tin"))"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                        <RadzenButton Click="@(() => OpendialogDeleteThongTinMM(mmdetail))" Icon="delete" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa trường thông tin"))"
                                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            }
                                                        }
                                                    }
                                                </RadzenStack>
                                            </RadzenCard>
                                            <RadzenStack Visible="(SelectedMayMoc.MMID.Value != null)" Gap="10px" Style="height: contain; width: 100%; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenButton Visible="@(!isEditMayMocDetail)" Style="width: contain; height: contain;" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm thông tin khác cho máy móc"))"
                                                                  Icon="add" Text="Thông tin khác" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click="@(() => OnOpenDialogAddNewMMDetail())" />
                                                    <RadzenButton Visible="@(isEditMayMocDetail)" Style="width: contain; height: contain;"
                                                                  Icon="check" Text="Lưu thay đổi" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click=@(() => OnUpdateThongTinMayMoc(SelectedMayMoc))
                                                                  BusyText="Saving ..." IsBusy=@isSavingMMdetails />
                                                    <RadzenButton Style="width: contain; min-width: 120px; height: contain;" Click="@(() => EnableEditMMDetail())"
                                                                  Icon="@((isEditMayMocDetail)? "clear" : "edit")" Text="@((isEditMayMocDetail)? "Hủy" : "Chỉnh sửa")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                                </RadzenStack>
                                                <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenButton Visible="@(isEditMayMocDetail)" Style="width: contain; height: contain; background-color: darkred"
                                                                  Icon="delete" Text="Xóa máy" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                  Click=@(() => OnDeleteMayMoc(SelectedMayMoc)) />
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenColumn>
</RadzenRow>

@code {
    private List<MayMoc> DSachMayMocsBase = new();
    private List<MayMoc> DSachMayMocs = new();
    private MayMoc SelectedMayMoc = new();
    private ThongTinMayMoc SelectedThongtinMM = new();
    private IList<MayMoc>? DatagridSeleted;

    private DateTime startSearchDay = DateTime.Today;
    private DateTime endSearchDay = DateTime.Today;
    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";
    private bool isEditMayMocDetail = false;
    private bool isSavingMMdetails = false;

    protected override async Task OnInitializedAsync()
    {
        // Load ds may moc base/ hien thi
        await LoadAllDanhsachMayMocBase();

        ReSelectCurrentMayMoc(Common.SelectedMayMocid); // re-selected

        await base.OnInitializedAsync();
    }

    // Them moi may moc
    private async Task OnThemMoiMayMoc()
    {
        MayMoc newMM = await DialogService.OpenAsync<DialogAddnewMayMoc>(null, null,
        new DialogOptions() { ShowTitle = false, Width = "50%", Height = "95%", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        // Reload ds may moc
        await LoadAllDanhsachMayMocBase();

        if (newMM != null)
        {
            Common.SelectedMayMocid = newMM.MMID.Value;

            ReSelectCurrentMayMoc(Common.SelectedMayMocid);

            ShowNotification("Reload success!", NotificationSeverity.Success, 2000);
        }
    }

    bool isSearching = false;
    // Searching
    private async Task FilterNV(object? args)
    {
        await Task.Run(() =>
        {
            if (isSearching == false)
            {
                isSearching = true;

                SelectedMayMoc = new();

                string keysearch = args?.ToString()?.Trim() ?? string.Empty;

                // Load danh sach maymoc

                if (string.IsNullOrEmpty(keysearch))
                {
                    DSachMayMocs = DSachMayMocsBase; // Lay danh sach base
                }
                else
                {
                    List<MayMoc>? dsmaymocFilterResult = DSachMayMocsBase?.FindAll(mm => mm.TenMay.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);

                    if (dsmaymocFilterResult?.Count == 0)
                    {
                        dsmaymocFilterResult = DSachMayMocsBase?.FindAll(mm => mm.MaMay.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);

                        if (dsmaymocFilterResult?.Count == 0)
                        {
                            dsmaymocFilterResult = DSachMayMocsBase?.FindAll(mm => mm.Serial.Value?.ToString()?.IndexOf(keysearch, StringComparison.OrdinalIgnoreCase) >= 0);
                        }
                    }

                    DSachMayMocs = dsmaymocFilterResult ?? new();
                }

                isSearching = false;
            }
        });
    }

    private bool isLoadingDSMM = false;
    // Load all danh sach may moc base
    private async Task LoadAllDanhsachMayMocBase()
    {
        await Task.Run(async () =>
        {
            if (isLoadingDSMM == false)
            {
                isLoadingDSMM = true;

                DSachMayMocsBase = SQLServerServices.GetDanhSachMayMoc(); // load dach mac dinh

                DSachMayMocs = DSachMayMocsBase.ToList(); // gan cho ds hien thi

                await Task.Delay(300);

                isLoadingDSMM = false;
            }
        });
    }

    // Re-selected current may moc
    private void ReSelectCurrentMayMoc(object? targetID)
    {
        if (DSachMayMocs != null)
        {
            if (targetID == null) // get fist row
            {
                var fistitem = DSachMayMocs.FirstOrDefault();

                if (fistitem != null) { DatagridSeleted = new List<MayMoc>() { fistitem }; }
            }
            else
            {
                var selectedID = targetID;
                // load last selected item
                var selecteditem = DSachMayMocs.FirstOrDefault(mm => mm.MMID.Value?.ToString() == selectedID.ToString());

                if (selecteditem != null) { DatagridSeleted = new List<MayMoc>() { selecteditem }; }
                else { DatagridSeleted = new List<MayMoc>(); }
            }

            SelectedMayMoc = DatagridSeleted?.FirstOrDefault() ?? new();
        }
    }


    // Rename truong thong tin may moc
    private async Task OpendialogRenameThongTinMM(ThongTinMayMoc thongtin)
    {
        var renamestatus = await DialogService.OpenAsync<DialogRenameThongTinMayMoc>(null, new Dictionary<string, object>() { { "ThongTinMayMoc", thongtin }, { "TargetMayMoc", SelectedMayMoc } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (renamestatus != null)
        {
            await LoadAllDanhsachMayMocBase();

            ReSelectCurrentMayMoc(Common.SelectedMayMocid);
        }
    }

    // Delete thong tin may moc
    private async Task OpendialogDeleteThongTinMM(ThongTinMayMoc thongtin)
    {
        var deletestatus = await DialogService.OpenAsync<DialogDeleteThongTinMayMoc>(null, new Dictionary<string, object>() { { "DeleteThongTinMM", thongtin } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (deletestatus != null)
        {
            await LoadAllDanhsachMayMocBase();

            ReSelectCurrentMayMoc(Common.SelectedMayMocid);
        }
    }

    // Add new thong tin may moc
    private async Task OnOpenDialogAddNewMMDetail()
    {
        List<LoaiThongTinMayMoc> loaiThongTinMMs = await DialogService.OpenAsync<DialogAddnewThongTinMayMoc>(null, new Dictionary<string, object>() { { "TargetMayMoc", SelectedMayMoc }, { "IsAddThongTinInCreateNewMayMocMode", false } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (loaiThongTinMMs != null && loaiThongTinMMs.Count > 0)
        {
            int ttmmid = 0; string err = string.Empty;

            foreach (var loaiThongTinMM in loaiThongTinMMs)
            {
                var isexisting = SelectedMayMoc.DSThongTin.Any(thongtin => thongtin.LoaiThongTin.TenTruyXuat.Value?.ToString()?.Trim() == loaiThongTinMM.TenTruyXuat.Value?.ToString()?.Trim());

                if (!isexisting)
                {
                    ThongTinMayMoc thongTin = new()
                        {
                            LoaiTTMMID = { Value = loaiThongTinMM.LoaiTTMMID.Value },
                            MMID = { Value = SelectedMayMoc.MMID.Value },
                            LoaiThongTin = loaiThongTinMM,
                            GiaTri = { Value = loaiThongTinMM.GiaTriMacDinh.Value?? string.Empty }
                        };

                    (ttmmid, err) = SQLServerServices.InsertThongTinMayMoc(thongTin);
                }
            }

            if (ttmmid > 0)
            {
                await LoadAllDanhsachMayMocBase();

                ReSelectCurrentMayMoc(Common.SelectedMayMocid);

                ShowNotification("Đã thêm trường thông tin!", NotificationSeverity.Success, 3000);
            }
            else if (ttmmid == -1)
            {
                await DialogService.Alert($"Thêm thông tin lỗi: {err}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }

        isEditMayMocDetail = false;
    }

    // Save maymoc updatedinfors
    private async Task OnUpdateThongTinMayMoc(MayMoc selectedmaymoc)
    {
        isSavingMMdetails = true;

        // Update truong thong tin chinh

        (int mainUDresult, string mainUDerror) = SQLServerServices.UpdateMayMocMainDetails(selectedmaymoc);

        if (mainUDresult == -1)
        {
            await DialogService.Alert($"Lỗi: {mainUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
        else
        {
            // Update truong thong tin phu

            (int subUDresult, string subUDerror) = SQLServerServices.UpdateListExtraMayMocDetails(selectedmaymoc.DSThongTin);

            if (subUDresult == -1)
            {
                await DialogService.Alert($"Lỗi: {subUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                // await DialogService.Alert($"Cập nhật thành công!", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                await LoadAllDanhsachMayMocBase();

                ReSelectCurrentMayMoc(Common.SelectedMayMocid);

                ShowNotification("Đã lưu thay đổi!", NotificationSeverity.Success, 3000);
            }
        }

        isSavingMMdetails = false;

        isEditMayMocDetail = false;
    }

    // Delete maymoc
    private async Task OnDeleteMayMoc(MayMoc selectedmaymoc)
    {
        bool? comfirm = await DialogService.Confirm("Xóa máy này khỏi danh sách máy móc/thiết bị?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (comfirm.Value)
        {
            (int result, string error) = SQLServerServices.DeleteMayMoc(SelectedMayMoc.MMID.Value);

            if (result == -1)
            {
                await DialogService.Alert($"Không thể xóa: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                await LoadAllDanhsachMayMocBase();

                ReSelectCurrentMayMoc(Common.SelectedMayMocid);

                ShowNotification("Đã xóa!", NotificationSeverity.Success, 3000);
            }
        }

        isEditMayMocDetail = false;
    }

    // Press button Edit/Cancel
    private async Task EnableEditMMDetail()
    {
        if (isEditMayMocDetail)
        {
            // Press cancel button
            isEditMayMocDetail = false;

            await LoadAllDanhsachMayMocBase();

            ReSelectCurrentMayMoc(Common.SelectedMayMocid);
        }
        else
        {
            // Press edit button
            isEditMayMocDetail = true;
        }
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = 500, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<MayMoc> selectedMayMoc)
    {
        DatagridSeleted = selectedMayMoc;

        var fistItemSelectedMayMoc = DatagridSeleted.FirstOrDefault();

        if (fistItemSelectedMayMoc != null)
        {
            SelectedMayMoc = fistItemSelectedMayMoc;

            Common.SelectedMayMocid = fistItemSelectedMayMoc.MMID.Value;
        }
    }

    private void OnCellRender(DataGridCellRenderEventArgs<MayMoc> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }
}
