@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models;
@using ProcessManagement.Models.KHO_NVL.NhapKho

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices

<RadzenCard Variant="Variant.Filled" Style="height: 100%; width: 100%; padding: 10px;">
    <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: 100%; width: 100%; padding: 0px; padding-bottom: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <!--Header Phieu Nhap Kho-->
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                    <RadzenText Text="@($"Mã phiếu:")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                    <RadzenText Text="@($"{PNK.MaPhieuNK?.Value?.ToString()}")" Style="font-weight: 600; font-size: 15px; font-style: italic; color: black;"></RadzenText>
                </RadzenStack>
                <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                    <RadzenText Text="@($"Người lập phiếu:")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                    <RadzenText Text="@($"admin")" Style="font-weight: 600; font-size: 15px; font-style: italic; color: black;"></RadzenText>
                </RadzenStack>
            </RadzenStack>
            <RadzenStack Gap="20px" Style="height: contain; width: contain; padding: 10px; border-radius: 10px; border-bottom: var(--rz-grid-cell-border); background-color: var(--rz-success-light)" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="PHIẾU NHẬP KHO NGUYÊN VẬT LIỆU" Style="color: black; font-weight: 600; font-size: 20px"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                    <RadzenText Text="@($"Ngày lập phiếu:")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                    <RadzenText Text="@($"{DateTime.Now.Date.ToString("dd/MM/yyyy")}")" Style="font-weight: 600; font-size: 15px; font-style: italic; color: black;"></RadzenText>
                </RadzenStack>
                <RadzenStack Gap="5px" Style="height: contain; width: contain; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Center">
                    <RadzenText Text="@($"Lệnh:")" Style="font-weight: 600; font-size: 15px; font-style: italic;"></RadzenText>
                    <RadzenText Text="@($"Nhập kho")" Style="font-weight: 600; font-size: 15px; font-style: italic; color: black;"></RadzenText>
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>

        <!--Body Phieu Nhap Kho-->
        <RadzenRow class="rowbackground-style" Gap="10px" Style="height: 100%; width: 100%; padding-top: 10px; border-radius: 0; overflow-y: auto; border-top: var(--rz-grid-cell-border);">
            <!--Danh sach san pham nhap kho-->
            <RadzenColumn Size="12" SizeMD="6" Style="height: 100%; width: 100%; border-right: var(--rz-grid-cell-border); padding-right: 10px">
                <RadzenStack Gap="5px" Style="height: 100%; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                    <RadzenStack Visible="@(PNK.DSNVLofPNKs.Count > 0)" Gap="10px" Style="height: contain; width: 100%; padding: 0px; padding-left: 0" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenText Text="Bảng danh sách nguyên liệu nhập kho" Style="font-weight: 600; height: contain; width: contain; font-style: italic; color: darkred"></RadzenText>
                    </RadzenStack>
                    <!--Table listNVL-->
                    <RadzenDataGrid class="rz-grid-table-fixed-2" Data="@(PNK.DSNVLofPNKs)" TItem="NVLofPhieuNhapKho"
                                    EmptyText="Danh sách nguyên liệu trống."
                                    ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true"
                                    AllowFiltering="false" FilterMode="FilterMode.Simple"
                                    AllowPaging="true" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    ShowPagingSummary="true" PagerPosition="PagerPosition.Bottom" Style="padding-right: 5px"
                                    GridLines="DataGridGridLines.Both" PageSize="10" Density="Density.Compact"
                                    HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77)"))"
                                    CellRender="@OnCellRender" Value="@DatagridSelectedNVLofPNK" ValueChanged="@((args) => OnDatagridSelectChanged(args))">
                        <Columns>
                            @{
                                List<Propertyy> columns = PNK.DSNVLofPNKs.FirstOrDefault()?.GetPropertiesValues() ?? new();

                                <!--Column ID-->
                                <RadzenDataGridColumn Width="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                      TItem="NVLofPhieuNhapKho" Title="#"
                                                      Property="STT" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                    </HeaderTemplate>
                                    <Template Context="nvl">
                                        <span style="font-weight: bold;">@(PNK.DSNVLofPNKs.IndexOf(nvl) + 1)</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                <!--Column TenNVL-->
                                <RadzenDataGridColumn Width="contain" TItem="NVLofPhieuNhapKho" Title="Tên nguyên vật liệu"
                                                      Property="tennvl" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">Tên NVL</span>
                                    </HeaderTemplate>
                                    <Template Context="nvl">
                                        <span style="color: black; font-weight: bold;">@($"{nvl?.TargetNgLieu.TenNVL.Value?.ToString()}")</span>
                                    </Template>
                                </RadzenDataGridColumn>

                                <!--Column tong so luong-->
                                <RadzenDataGridColumn Width="contain" TItem="NVLofPhieuNhapKho" Title="Tổng số lượng nhập kho" Frozen="false"
                                                      Property="soluong" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">Tổng nhập kho</span>
                                    </HeaderTemplate>
                                    <Template Context="nvl">
                                        <RadzenNumeric Placeholder="@($"*Nhập số lượng")" TValue="int"
                                                       Value="@int.Parse(nvl.NVLNKSoLuongAll.Value?.ToString()?? "0")" Min="0" Max="999999"
                                                       ValueChanged="@((args) => { nvl.NVLNKSoLuongAll.Value = args; })"
                                                       Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <!--Column trang thai nhap kho-->
                                <RadzenDataGridColumn Width="contain" TItem="NVLofPhieuNhapKho" Title="Chỉ định vị trí" Frozen="false"
                                                      Property="vitriluukho" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white">Chỉ định vị trí</span>
                                    </HeaderTemplate>
                                    <Template Context="nvl">
                                        @{
                                            int tongsldachidinh = nvl.DSLenhNKs.Sum(lenh => int.TryParse(lenh.LNKSoLuong.Value?.ToString(), out int sll) ? sll : 0);

                                            if (tongsldachidinh > 0 && (nvl.NVLNKSoLuongAll.Value?.Equals(tongsldachidinh) ?? false))
                                            {
                                                nvl.IsAsignedVitri = true;
                                            }
                                            else nvl.IsAsignedVitri = false;

                                            if (nvl.IsAsignedVitri)
                                            {
                                                <RadzenButton Icon="check" Text="Đã chỉ định" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Flat"
                                                              Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; width: 100%; cursor: default;" />
                                            }
                                            else
                                            {
                                                <RadzenButton Text="Chưa chỉ định" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Flat"
                                                              Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; width: 100%; cursor: default;  color: rgba(58, 71, 77); font-weight: 600" />
                                            }
                                        }

                                    </Template>
                                </RadzenDataGridColumn>

                                <!--Column remove from list NVLNK-->
                                <RadzenDataGridColumn Width="60px" TItem="NVLofPhieuNhapKho" Title="clear" Frozen="false"
                                                      Property="clear" TextAlign="TextAlign.Center">
                                    <HeaderTemplate>
                                        <span style="font-weight: 600; font-size: 15px; color: white"></span>
                                    </HeaderTemplate>
                                    <Template Context="nvl">
                                        <RadzenButton Icon="delete" Click="(() => { OnRemoveNVLofPNK(nvl); })"
                                                      MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa nguyên liệu khỏi danh sách"))"
                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Darker" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        </Columns>
                    </RadzenDataGrid>
                    <!--Ngay nhap kho-->
                    <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-left: 10px; padding-bottom: 5px; padding-top: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Style="width: 35%;">
                            <RadzenText Text="Ngày nhập kho" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                        </RadzenStack>
                        <RadzenStack Style="width: 65%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            @{
                                DateTime createdday = DateTime.TryParse(PNK.NgayLapPNK.Value?.ToString(), out DateTime nnk) ? nnk : DateTime.Now;
                                createdday = createdday.Date.Add(DateTime.Now.TimeOfDay);

                                <RadzenDatePicker TValue="DateTime"
                                                  ValueChanged="@((args) =>
                                                                {
                                                                    args = args.Date.Add(DateTime.Now.TimeOfDay); PNK.NgayLapPNK.Value = args;
                                                                })"
                                                  Value="createdday"
                                                  ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" AllowInput="false"
                                                  Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                            }
                        </RadzenStack>
                    </RadzenStack>
                    <!--Nguoi nhap kho-->
                    <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-left: 10px; padding-bottom: 5px; padding-top: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Style="width: 35%;">
                            <RadzenText Text="Người nhập kho" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                        </RadzenStack>
                        <RadzenStack Style="width: 65%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            <RadzenTextBox Placeholder="*Nhập tên người nhập kho"
                                           Value="@PNK.NguoiLapPNK.Value?.ToString()" ValueChanged="@((args) => { PNK.NguoiLapPNK.Value = args; } )"
                                           Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                        </RadzenStack>
                    </RadzenStack>
                    <!--Phieu nhap kho ghi chu-->
                    <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-left: 10px; padding-bottom: 5px; padding-top: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Style="width: 35%;">
                            <RadzenText Text="Ghi chú" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                        </RadzenStack>
                        <RadzenStack Style="width: 65%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                            <RadzenTextBox Placeholder="*Nhập ghi chú"
                                           Value="@PNK.GhiChuPNK.Value?.ToString()" ValueChanged="@((args) => { PNK.GhiChuPNK.Value = args; } )"
                                           Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenStack>
            </RadzenColumn>

            <!--Vi tri luu tru-->
            <RadzenColumn Size="12" SizeMD="6" Style="height: 100%; width: 100%;">
                <RadzenRow Visible="@(SelectedNVLofPNK.NVLID.Value != null && PNK.DSNVLofPNKs.Count > 0)" class="rowbackground-style" Gap="10px" Style="height: 100%; width: 100%; border-radius: 0; overflow: scroll">
                    <RadzenColumn Size="12" SizeMD="12" Style="height: contain; width: 100%;">
                        <RadzenStack Gap="0" Style="height: 100%; width: 100%; padding: 5px; padding-top: 10px; border-radius: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Visible="@(PNK.DSNVLofPNKs.Count > 0)" Gap="10px" Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                <RadzenText Text="Chỉ định vị trí nhập kho" Style="color: darkred; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                                <RadzenText Text="@($"(nguyên liệu {SelectedNVLofPNK.TargetNgLieu.TenNVL.Value?.ToString()})")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: 100%; width: 100%; padding: 5px; padding-top: 5px; padding-right: 0;" Gap="5px" Orientation="Orientation.Vertical">
                                <!--Display list VitriLuutri-->
                                <RadzenStack Style="width: 100%; height: contain; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    @{
                                        var dsvitri = SelectedNVLofPNK.TargetNgLieu.DSViTri.Where(vt => (int.TryParse(vt.VTNVLSoLuong.Value?.ToString(), out int slvt) ? slvt : 0) > 0).ToList();
                                        if (dsvitri != null && dsvitri.Count > 0)
                                        {
                                            <RadzenCard Variant="Variant.Outlined" Style="height: contain; width: 100%; padding: 10px; margin-bottom: 10px">
                                                <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding: 0px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 5px; padding-right: 10px; padding-left: 10px; background-color: var(--rz-primary-darker)" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                        <RadzenText Text="Vị trí hiện tại trong kho" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>
                                                    </RadzenStack>
                                                    <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; max-height: 350px; padding-right: 0;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px;">
                                                            <RadzenStack Style="width: 100%; height: 100%; " Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Style="width: 3%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="#" Style="color: black; font-weight: 500; font-size: 14px"></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 20%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="Mã vị trí" Style="color: black; font-weight: 500; font-size: 16px"></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 25%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="Hiện có" Style="color: black; font-weight: 500; font-size: 16px"></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="Trạng thái vị trí" Style="color: black; font-weight: 500; font-size: 16px"></RadzenText>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        </RadzenCard>

                                                        @foreach (var vitri in dsvitri)
                                                        {
                                                            int SLnvlhiencoTaivitri = int.TryParse(vitri.VTNVLSoLuong.Value?.ToString(), out int slhc) ? slhc : 0;
                                                            int slcontrong = vitri.VitriInfor.SLConTrong;
                                                            int succhuavitri = int.TryParse(vitri.VitriInfor.VTSucChua.Value?.ToString(), out int scvt) ? scvt : 0;

                                                            <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px; background-color: white">
                                                                <RadzenStack Style="width: 100%; height: 100%" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenStack Style="width: 3%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenText Text="@($"{(dsvitri.IndexOf(vitri) + 1).ToString()}")" Style="color: black; font-weight: 600; font-size: 14px"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 20%; height: contain; border-left: var(--rz-grid-cell-border); border-right: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenStack Style="height: 30px; width: 100%; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            <RadzenText Text="@($"{vitri.VitriInfor.MaViTri.Value?.ToString()}")" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 25%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenText Text="@($"{SLnvlhiencoTaivitri.ToString()} ({SelectedNVLofPNK.TargetNgLieu.DonViTinh.Value?.ToString()?.Trim()})")" Style="font-weight: 600; font-size: 15px"></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 40%; height: contain; border-left: var(--rz-grid-cell-border); border-right: var(--rz-grid-cell-border); padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenStack Visible="@((slcontrong > 0))" Style="height: 30px; width: 100%; border-radius: 5px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            <RadzenText Text="@($"Trống ({slcontrong}/{succhuavitri})")" Style="color: darkgreen; font-weight: 600; font-size: 15px"></RadzenText>
                                                                        </RadzenStack>
                                                                        <RadzenStack Visible="@((slcontrong == 0))" Style="height: 30px; width: 100%; border-radius: 5px; background-color: rgb(254,243,220); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                            <RadzenText Text="@($"Đầy ({succhuavitri}/{succhuavitri})")" Style="color: var(--rz-warning-darker); font-weight: 600; font-size: 15px"></RadzenText>
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                </RadzenStack>
                                                            </RadzenCard>
                                                        }

                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenCard>

                                        }
                                    }
                                </RadzenStack>

                                <!--Danh sach lenh nhap kho-->
                                <RadzenStack Style="width: 100%; height: contain; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenCard Variant="Variant.Outlined" Style="height: contain; width: 100%; padding: 10px; margin-top: 10px; margin-bottom: 10px">
                                        <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding: 0px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 5px; padding-right: 10px; padding-left: 10px; background-color: var(--rz-primary-darker)" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenText Text="Chỉ định vị trí nhập kho" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>

                                                @{
                                                    // Tong so luong can nhap kho
                                                    int slallnhapkho = int.TryParse(SelectedNVLofPNK.NVLNKSoLuongAll.Value?.ToString(), out int slall) ? slall : 0;
                                                    // Tinh tong so luong nhap kho sau moi lan tao lenh moi
                                                    int slallnhapkhodatao = 0;
                                                    foreach (var lnk in SelectedNVLofPNK.DSLenhNKs)
                                                    {
                                                        int lnkslnhap = int.TryParse(lnk.LNKSoLuong.Value?.ToString(), out int lnksln) ? lnksln : 0;
                                                        slallnhapkhodatao += lnkslnhap;
                                                    }
                                                }

                                                <RadzenButton Visible="@(slallnhapkhodatao < slallnhapkho || slallnhapkhodatao == 0)" Text="@($"Đã chỉ định {slallnhapkhodatao}/{slallnhapkho}")" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Flat"
                                                              Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; width: contain; cursor: default; color: rgba(58, 71, 77); font-weight: 600" />
                                                <RadzenButton Visible="@(slallnhapkhodatao == slallnhapkho && slallnhapkhodatao > 0)" Text="@($"Đã chỉ định {slallnhapkhodatao}/{slallnhapkho}")" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Flat"
                                                              Style="border-radius: 5px; height: 30px; width: contain; cursor: default;" />
                                                <RadzenButton Visible="@(!isAddLocation)" Style="width: contain; height: 100%; background-color: white; color: black"
                                                              Click="(() => SelectVitriNhapKho())"
                                                              Icon="add" Text="Chỉ định vị trí" ButtonStyle="ButtonStyle.Secondary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                            </RadzenStack>

                                            <!--Hien thi danh sach lenh nhap kho-->
                                            <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; max-height: 350px; padding-right: 0;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                @if (SelectedNVLofPNK.DSLenhNKs.Count > 0)
                                                {
                                                    <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px;">
                                                        <RadzenStack Style="width: 100%; height: 100%; " Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                            <RadzenStack Style="width: 5%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="#" Style="font-weight: 500; font-size: 16px"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="width: 30%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Mã vị trí" Style="font-weight: 500; font-size: 16px"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="width: 35%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                <RadzenText Text="Số lượng nhập" Style="font-weight: 500; font-size: 16px"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Style="width: 10%; height: contain; " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                            </RadzenStack>
                                                        </RadzenStack>
                                                    </RadzenCard>
                                                    var DSlenhnhapkho = SelectedNVLofPNK.DSLenhNKs;

                                                    @foreach (var lnk in DSlenhnhapkho)
                                                    {
                                                        string vitrike = lnk.TargertVitri.ViTriKe.Value?.ToString() ?? string.Empty;
                                                        string vitrihang = lnk.TargertVitri.ViTriHang.Value?.ToString() ?? string.Empty;
                                                        string vitricot = lnk.TargertVitri.ViTriCot.Value?.ToString() ?? string.Empty;
                                                        int slnhapkho = int.TryParse(lnk.LNKSoLuong.Value?.ToString(), out int slnk) ? slnk : 0;
                                                        var lnkIsdone = int.TryParse(lnk.LNKIsDone.Value?.ToString(), out int lnkd) ? lnkd : -1;

                                                        <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px; background-color: white">
                                                            <RadzenStack Style="width: 100%; height: 100%" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenStack Style="width: 5%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="@($"{(DSlenhnhapkho.IndexOf(lnk) + 1).ToString()}")" Style="color: black; font-weight: 600; font-size: 14px"></RadzenText>
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 30%; height: contain; border-left: var(--rz-grid-cell-border); padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenStack Style="height: 35px; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                        <RadzenText Text="@($"{lnk.TargertVitri.MaViTri.Value?.ToString()}")" Style="color: black; font-weight: 600; font-size: 16px"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>

                                                                <RadzenStack Style="width: 35%; height: 35px; border-left: var(--rz-grid-cell-border); border-right: var(--rz-grid-cell-border); padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenText Text="@($"{slnhapkho.ToString()} ({lnk.TargetNgLieu.DonViTinh.Value?.ToString()})")" Style="color: rgba(58, 71, 77); font-weight: 600; font-size: 16px"></RadzenText>
                                                                </RadzenStack>

                                                                <RadzenStack Visible=false Style="width: 30%; height: contain; " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">

                                                                    @if (lnkIsdone.Equals(1))
                                                                    {
                                                                        <RadzenButton Icon="check" Text="Đã nhập" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Flat"
                                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; width: 100%; cursor: default;" />
                                                                    }
                                                                    else
                                                                    {
                                                                        <RadzenButton Text="Chưa nhập" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Light" Variant="Variant.Outlined"
                                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 30px; width: 100%; cursor: default; background-color: rgb(254,243,220); font-weight: 600" />
                                                                    }
                                                                </RadzenStack>
                                                                <RadzenStack Style="width: 10%; height: contain; " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                    <RadzenButton Icon="delete" Click="(() => { OnRemoveLNKfromDSLenhNKs(lnk); })"
                                                                                  MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa khỏi danh sách"))"
                                                                                  ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Darker" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                        </RadzenCard>
                                                    }
                                                }
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenStack>

                            </RadzenStack>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <!--Warning not selectedNVLokPNK-->
                <RadzenStack Visible="@(SelectedNVLofPNK.NVLID.Value == null)" Gap="10px" Style="height: contain; width: 100%; padding: 20px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                    <RadzenText Text="Chọn nguyên liệu trong bảng để chỉ định vị trí lưu kho" Style="color: red; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; border-top: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Visible=@(!isPNKSaved) Click="@( async () => { await ButtonSavePhieuNhapKho();})" Style="width: 120px;" Icon="check" Text="Lưu phiếu" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Dark" Variant="Variant.Flat" />
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Click="@(async () => { await ButtonClosePhieuNhapKho();})" Style="width: 120px;" Icon="close" Text="@(((isPNKSaved)? "Đóng" : "Hủy phiếu"))" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public List<NguyenVatLieu> DSachNVL_NhapKho { get; set; } = new();
    private PhieuNhapKho PNK = new();
    private IList<NVLofPhieuNhapKho> DatagridSelectedNVLofPNK = new List<NVLofPhieuNhapKho>();
    private NVLofPhieuNhapKho SelectedNVLofPNK = new();
    private bool isAddLocation = false;
    private LenhNhapKho temporaryLenhNK = new();
    private List<VitriLuuTru> DSVitris = new();
    private bool isAllowCreatePNK = true;
    private bool isPNKSaved = false;

    protected async override Task OnInitializedAsync()
    {
        if (DSachNVL_NhapKho.Count > 0)
        {
            // Load dsvitri
            DSVitris = SQLServerServices.GetAllViTriLuuTru();

            // Tao ma phieu random
            string maphieu = Common.Generate5UppercaseChars();
            PNK.MaPhieuNK.Value = $"#PNK{maphieu}";
            PNK.NgayLapPNK.Value = DateTime.Now;

            // Insert in to DB new PNK
            (int newpnkID, string newpnkerror) = SQLServerServices.InsertNewPhieuNhapKho(PNK);

            if (newpnkID == -1)
            {
                isAllowCreatePNK = false;
                await DialogService.Alert($"Lỗi: không thể tạo phiếu ({newpnkerror})", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                // Gan PNKID cho PNK
                PNK.PNKID.Value = newpnkID;
                // Khoi tao danh sach nguyen vat lieu nhap kho
                PNK.DSNVLofPNKs = new();
                foreach (var nvl in DSachNVL_NhapKho)
                {
                    NVLofPhieuNhapKho nvlpnk = new()
                        {
                            PNKID = { Value = newpnkID },
                            NVLID = { Value = nvl.NVLID.Value },
                            TargetNgLieu = nvl,
                            NVLNKSoLuongAll = { Value = 0 }
                        };

                    // Insert in to DB new NVL of PNK
                    (int newNVLpnkID, string newnvlPNKerror) = SQLServerServices.InsertNVLofPhieuNhapKho(nvlpnk);

                    if (newNVLpnkID == -1)
                    {
                        isAllowCreatePNK = false;
                        // Delete PNK when error
                        await DeletePhieuNhapKho();

                        await DialogService.Alert($"Lỗi: không thể thêm NVL cho phiếu ({newnvlPNKerror})", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                        break;
                    }
                    else
                    {
                        nvlpnk.NVLPNKID.Value = newNVLpnkID;
                        PNK.DSNVLofPNKs.Add(nvlpnk);
                    }
                }
            }
        }
        else isAllowCreatePNK = false;

        await base.OnInitializedAsync();
    }

    // Huy va xoa phieu nhap kho khi press Cancel button
    private async Task DeletePhieuNhapKho()
    {
        (int result, string error) = SQLServerServices.DeletePhieuNhapKho(PNK.PNKID.Value);

        if (result != -1)
        {
            ShowNotification("Đã hủy phiếu nhập kho!", NotificationSeverity.Warning, 2000);
        }
        else
        {
            await DialogService.Alert($"Lỗi: Không thể hủy phiếu {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    // Xoa nvl of list nvlofpnk
    private void OnRemoveNVLofPNK(NVLofPhieuNhapKho nvl)
    {
        PNK.DSNVLofPNKs.RemoveAll(item => item.NVLID.Value?.ToString() == nvl.NVLID.Value?.ToString());

        SQLServerServices.DeleteNVLofPhieuNhapKho(nvl.NVLPNKID.Value);

        SelectedNVLofPNK = new();

        PNK.DSNVLofPNKs = new List<NVLofPhieuNhapKho>(PNK.DSNVLofPNKs);
    }

    // Xoa lenh nhap kho khoi dslenhnk
    private void OnRemoveLNKfromDSLenhNKs(LenhNhapKho lnk)
    {
        SelectedNVLofPNK.DSLenhNKs.Remove(lnk);

        SelectedNVLofPNK.DSLenhNKs = new List<LenhNhapKho>(SelectedNVLofPNK.DSLenhNKs);

        //SQLServerServices.DeleteLenhNhapKho(lnk.LenhNKID.Value);
    }

    // Enable add new vitri luu kho
    private void ButtonAddVitriluukho()
    {
        temporaryLenhNK = new();

        if (isAddLocation)
        {
            isAddLocation = false;
        }
        else
        {
            isAddLocation = true;
        }
    }

    // Open dialog select vi tri nhap kho
    private async Task SelectVitriNhapKho()
    {
        if (int.Parse(SelectedNVLofPNK.NVLNKSoLuongAll.Value?.ToString() ?? "0") == 0)
        {
            await DialogService.Alert($"Hãy nhập số lượng cần nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        // Lay danh sach lenh (vi tri va so luong da lay) - de khong trung slot cua cung vi tri
        List<LenhNhapKho> alreadyGetLNKs = new();
        foreach (var nVLofpnk in PNK.DSNVLofPNKs)
        {
            if (nVLofpnk.NVLPNKID.Value?.ToString() != SelectedNVLofPNK.NVLPNKID.Value?.ToString())
            {
                foreach (var lnk in nVLofpnk.DSLenhNKs)
                {
                    alreadyGetLNKs.Add(lnk);
                }
            }
        }

        // Get danh sach vitri nguyen lieu da ton tai
        List<ViTriofNVL> dsvitricontrong = SelectedNVLofPNK.TargetNgLieu.DSViTri.Where(vt => (int.TryParse(vt.VTNVLSoLuong.Value?.ToString(), out int slvt) ? slvt : 0) > 0 && vt.VitriInfor.SLConTrong > 0).ToList();

        List<LenhNhapKho> dslenh = await DialogService.OpenAsync<DialogSelectViTriLuuTru>(null, new Dictionary<string, object>() { { "TarGetNVLofPNK", SelectedNVLofPNK }, { "DSVitriDaluu", dsvitricontrong }, { "DSLenhNKofAnotherNVL", alreadyGetLNKs } },
        new DialogOptions() { ShowTitle = false, Width = "80%", Height = "90%", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        if (dslenh != null)
        {
            SelectedNVLofPNK.DSLenhNKs.Clear();

            foreach (var lenh in dslenh)
            {
                SelectedNVLofPNK.DSLenhNKs.Add(lenh);
                // Add new lenh to DB
                // (int lenhnkId, string lnkError) = SQLServerServices.InsertLenhNhapKho(lenh);

                // if (lenhnkId > 0)
                // {
                //     // Gan ID cua lenh nhap kho sau khi insert
                //     lenh.LenhNKID.Value = lenhnkId;

                //     SelectedNVLofPNK.DSLenhNKs.Add(lenh);
                // }
                // else
                // {
                //     await DialogService.Alert($"Lỗi: {lnkError}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                // }
            }
        }
    }


    // Button save phieu nhap kho
    private async Task ButtonSavePhieuNhapKho()
    {
        bool isAsignedVitriOK = true;
        bool isPNKinforOK = true;

        if (PNK.DSNVLofPNKs.Count == 0)
        {
            await DialogService.Alert($"<strong>Không thể lưu phiếu</strong> (<i>danh sách nguyên liệu nhập kho trống</i>)", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        // Kiem tra trang thai chi dinh vi tri cua listNVLofPNK
        foreach (var nvlpnk in PNK.DSNVLofPNKs)
        {
            if (nvlpnk.IsAsignedVitri == false)
            {
                await DialogService.Alert($"Chưa chỉ định đầy đủ vị trí cho nguyên vật liệu ({nvlpnk.TargetNgLieu.TenNVL.Value})", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                isAsignedVitriOK = false;
                break;
            }
            else
            {
                // Update tong so luong nhap kho cua Lenhnhapkho
                SQLServerServices.UpdateNVLofPNK(nvlpnk);
            }
        }

        if (isAsignedVitriOK == false) return;

        // Kiem tra phieu nhap kho day du thong tin
        if (PNK.NguoiLapPNK.Value == null)
        {
            await DialogService.Alert($"Hãy nhập thông tin người lập phiếu!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            isPNKinforOK = false;
        }
        if (PNK.NgayLapPNK.Value == null)
        {
            await DialogService.Alert($"Hãy nhập thông tin ngày lập phiếu!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            isPNKinforOK = false;
        }
        if (PNK.MaPhieuNK.Value == null)
        {
            await DialogService.Alert($"Chưa tạo mã phiếu nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            isPNKinforOK = false;
        }

       

        if (isAsignedVitriOK && isPNKinforOK)
        {   
            // Update PNK infor
            (int updateResult, string errorMess) = SQLServerServices.UpdatePhieuNhapKhoInfor(PNK);

            if (updateResult > 0)
            {   
                // Them lenh nhap cua phieu vao Database
                foreach (var nvlofpnk in PNK.DSNVLofPNKs)
                {
                    foreach (var lenh in nvlofpnk.DSLenhNKs)
                    {
                        SQLServerServices.InsertLenhNhapKho(lenh);
                    }
                }
                isPNKSaved = true;
                await DialogService.Alert($"Phiếu đã lưu thành công!", "<strong><span style='color: Darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                await DialogService.Alert($"Error: {errorMess}", "<strong><span style='color: red'>Không thể lưu phiếu nhập kho!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    // Button close phieu nhap kho
    private async Task ButtonClosePhieuNhapKho()
    {
        if (isPNKSaved)
        {
            DialogService.Close(null);
        }
        else
        {
            await DeletePhieuNhapKho();
            DialogService.Close(null);
        }
    }



    private string GetVitriCode(VitriLuuTru vitri)
    {
        string vitrike = vitri.ViTriKe.Value?.ToString() ?? string.Empty;
        string vitrihang = vitri.ViTriHang.Value?.ToString() ?? string.Empty;
        string vitricot = vitri.ViTriCot.Value?.ToString() ?? string.Empty;

        if (String.IsNullOrEmpty(vitrike + vitrihang + vitricot))
        {
            return string.Empty;
        }
        else return $"VT#{vitrike}#{vitrihang}#{vitricot}";

    }

    private List<string> GetDSVitriCode()
    {
        List<string> dsvitricode = new();
        foreach (var vitri in DSVitris)
        {
            string vitricode = GetVitriCode(vitri).Trim();
            dsvitricode.Add(vitricode);
        }
        return dsvitricode;
    }

    private string GetValue(IList<NguyenVatLieu>? nvl, string proName)
    {
        var seletednvl = nvl?.FirstOrDefault();

        var tagertItem = seletednvl?.DSThongTin.FirstOrDefault(dt => dt.LoaiThongTin?.TenTruyXuat.Value?.ToString()?.Trim() == proName);

        if (tagertItem != null)
        {
            return tagertItem.GiaTri.Value?.ToString()?.Trim() ?? string.Empty;
        }
        else return string.Empty;
    }

    private void OnCellRender(DataGridCellRenderEventArgs<NVLofPhieuNhapKho> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }

    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<NVLofPhieuNhapKho> selectedNgvatlieu)
    {
        temporaryLenhNK = new(); isAddLocation = false;

        DatagridSelectedNVLofPNK = selectedNgvatlieu;

        SelectedNVLofPNK = DatagridSelectedNVLofPNK.FirstOrDefault() ?? new();
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = 500, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
