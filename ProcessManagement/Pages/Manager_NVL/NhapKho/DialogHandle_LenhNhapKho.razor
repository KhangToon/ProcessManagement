@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.Tracking
@using ProcessManagement.Services
@using ProcessManagement.Services.SQLServer
@using ProcessManagement.Services.QRCodes
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models;
@using ProcessManagement.Models.KHO_NVL.NhapKho

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime

<RadzenCard Variant="Variant.Filled" Style="height: contain; width: 100%; padding: 10px;">
    <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding: 0px; padding-bottom: 10px; padding-top: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="20px" Style="height: contain; width: 220px; border-radius: 5px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="@($"LỆNH NHẬP KHO")" Style="font-weight: 600; font-size: 16px; color: darkgreen;"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: contain; border-radius: 5px; padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="@($"Tên nguyên liệu:")" Style="font-weight: 600; font-size: 16px; color: black; font-style: italic"></RadzenText>
                <RadzenText Text="@($"{LNK?.TargetNgLieu.TenNVL.Value?.ToString()}")" Style="font-weight: bold; font-size: 16px; color: black; font-style: italic"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: contain; border-radius: 5px; padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="@($"Số lượng nhập:")" Style="font-weight: 600; font-size: 16px; color: black; font-style: italic"></RadzenText>
                <RadzenText Text="@($"{LNK?.LNKSoLuong.Value?.ToString()} ({LNK?.TargetNgLieu.DonViTinh.Value?.ToString()})")" Style="font-weight: bold; font-size: 16px; color: black; font-style: italic"></RadzenText>
            </RadzenStack>
            <RadzenStack Visible="false" Gap="20px" Style="height: contain; width: contain; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenRadioButtonList Value=@usingScanner TValue="bool" ValueChanged=@(args => usingScanner = args)>
                    <Items>
                        <RadzenRadioButtonListItem Text="Sử dụng USB Scanner" Value="true" />
                        <RadzenRadioButtonListItem Text="Sử dụng Handy Scanner" Value="false" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        </RadzenStack>

        <!--Scan ma phieu nhap kho-->
        <RadzenRow class="rowbackground-style" Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; border-radius: 0; overflow-y: auto; border-top: var(--rz-grid-cell-border);">
            <RadzenColumn Visible="false" Size="12" SizeMD="4" Style="height: 100%; width: 100%; border-right: var(--rz-grid-cell-border); padding-right: 10px">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"Mã phiếu nhập kho: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{PNK.MaPhieuNK.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(PNK.MaPhieuNK.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(PNK.MaPhieuNK.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã phiếu nhập kho" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtMaPNK"
                                               Value="@scanMaPNK" ValueChanged="@((args) => { scanMaPNK = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>

            <!--Scan vi tri luu tru-->
            <RadzenColumn Size="12" SizeMD="4" Style="height: 100%; width: 100%; border-right: var(--rz-grid-cell-border); padding-right: 10px">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"Mã vị trí: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{LNK.TargertVitri.MaViTri.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(LNK.TargertVitri.MaViTri.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(LNK.TargertVitri.MaViTri.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã vị trí" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtMaViTri"
                                               Value="@scanMaViTri" ValueChanged="@((args) => { scanMaViTri = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>

            <!--Scan ma nguyen lieu-->
            <RadzenColumn Size="12" SizeMD="4" Style="height: 100%; width: 100%;">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"QR quản lý NVL: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{LNK.QRIDLOT.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(LNK.QRIDLOT.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(LNK.QRIDLOT.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã quản lý" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtQRIDLOT"
                                               Value="@scanQRIDLOT" ValueChanged="@((args) => { scanQRIDLOT = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; border-top: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @if (LNK.LNKIsDone.Value?.ToString() == "1")
                {
                    <RadzenButton Text="Đã nhập kho thành công" Style="width: contain; cursor: default" Icon="check" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Variant="Variant.Flat" />
                }
                else
                {
                    <RadzenButton Text="Tiến hành nhập kho" Click="@(async () => { await OnHandleLenhNhapKhousingKhoServices(LNK, PNK.MaPhieuNK.Value?.ToString()?? string.Empty, scanMaViTri, scanQRIDLOT);})" Style="width: contain;" Icon="arrow_outward" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat" />
                }
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Click="@(() => { DialogService.Close();})" Style="width: 120px;" Icon="close" Text="Đóng" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public LenhNhapKho LNK { get; set; } = new();

    [Parameter]
    public PhieuNhapKho PNK { get; set; } = new();

    private bool usingScanner = true;

    private RadzenTextBox reftxtMaPNK = new();
    private RadzenTextBox reftxtQRIDLOT = new();
    private RadzenTextBox reftxtMaViTri = new();
    private int focusIndex = 1;

    private LenhNhapKho scanLNK = new();
    private string scanMaPNK = string.Empty;
    //private string scanMaNVL = string.Empty;
    private string scanQRIDLOT = string.Empty;
    private string scanMaViTri = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (focusIndex == 1)
        {
            //await reftxtMaPNK.FocusAsync();
        }
        else if (focusIndex == 2)
        {
            await reftxtQRIDLOT.FocusAsync();
        }
        else if (focusIndex == 3)
        {
            await reftxtMaViTri.FocusAsync();
        }
    }

    private async Task OnHandleLenhNhapKhousingKhoServices(LenhNhapKho lenhNhapKho, string maPNK, string maVitri, string qridlot)
    {
        (int status, string mess) = await KHOServices.HandleLenhNhapKho(lenhNhapKho, maPNK, maVitri, qridlot);

        if (status == -1)
        {
            await DialogService.Alert(mess, "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
        else if (status == 1)
        {
            await DialogService.Alert(mess, "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    private async Task OnConfirmExcuteLenhNhapKho_byQRIDLOT(string maPNK, string maVitri, string qridlot)
    {
        int soluongnhapfromClient = int.TryParse(LNK.LNKSoLuong.Value?.ToString(), out int lnksl) ? lnksl : 0;
        object? lnkid = LNK.LenhNKID.Value?.ToString();

        // Load lenh nhap kho by ID
        LenhNhapKho savedLNK = SQLServerServices.GetLenhNhapKhoByID(lnkid);

        if (string.IsNullOrWhiteSpace(maPNK) || !string.Equals(maPNK, PNK.MaPhieuNK.Value?.ToString()?.Trim())) { return; }
        if (string.IsNullOrWhiteSpace(maVitri) || !string.Equals(maVitri, savedLNK.TargertVitri.MaViTri.Value?.ToString()?.Trim())) { return; }
        if (string.IsNullOrWhiteSpace(qridlot) || !string.Equals(qridlot, savedLNK.QRIDLOT.Value?.ToString()?.Trim())) { return; }
        if (soluongnhapfromClient == 0) { return; }

        if (savedLNK.LenhNKID.Value == null)
        {
            await DialogService.Alert($"Không tồn tại lệnh nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
        else
        {
            // Handle lenh nhap kho

            // Check trang thai lenh (da hoan thanh hay chua)
            _ = int.TryParse(savedLNK.LNKIsDone.Value?.ToString(), out int scanlnkIsdone) ? scanlnkIsdone : -1;
            if (scanlnkIsdone != 0)
            {
                await DialogService.Alert($"Không thể nhập (lệnh đã hoàn thành trước đó)!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }

            // Kiem tra so luong them vao
            int soluongThemvao = int.TryParse(savedLNK.LNKSoLuong.Value?.ToString(), out int slthem) ? slthem : 0;
            if (soluongThemvao == 0)
            {
                await DialogService.Alert($"Số lượng không hợp lệ!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }

            // Kiem tra vitri of NVL con trong hay khong / hoac cung ngay nhap kho
            var viTriofNVL = SQLServerServices.GetViTriOfNgVatLieuBy_VTid_LotVitri(vtid: savedLNK.VTID.Value, lotvitri: savedLNK.LotVitri.Value);

            // Handle lenh nhap kho voi LOT Vitri
            if (viTriofNVL.VTofNVLID.Value != null) // vtofnvl co chua NVL
            {
                int slhienco = int.TryParse(viTriofNVL?.VTNVLSoLuong.Value?.ToString(), out int slhc) ? slhc : 0;

                // so luong sau khi nhap cho vi tri da luu
                int newtonkhotaivitri = slhienco + soluongThemvao;

                // Tao moi vitriofNVL
                ViTriofNVL newviTriofNVL = new()
                    {
                        VTofNVLID = { Value = viTriofNVL?.VTofNVLID.Value },
                        VTID = { Value = viTriofNVL?.VTID.Value },
                        NVLID = { Value = savedLNK.NVLID.Value },
                        VTNVLSoLuong = { Value = newtonkhotaivitri },
                        NgayNhapKho = { Value = DateTime.Now.Date.ToShortDateString() },
                        LotVitri = { Value = viTriofNVL?.LotVitri.Value },
                        QRIDLOT = { Value = savedLNK.QRIDLOT.Value }
                    };

                int updateVTofNVLresult = -1; string updateVTofNVLerror;

                if (slhienco > 0)
                {
                    bool isnvlsame = object.Equals(viTriofNVL?.NVLID.Value, savedLNK.NVLID.Value);
                    bool isngaynksame = viTriofNVL?.NgayNhapKho.Value?.ToString()?.Trim() == DateTime.Now.Date.ToShortDateString();

                    if (isnvlsame && isngaynksame)
                    {
                        // Trung ngay va trung NVL --> ++ so luong ton kho tai LOT
                        (updateVTofNVLresult, updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(newviTriofNVL);

                        if (updateVTofNVLresult == -1)
                        {
                            await DialogService.Alert($"LNK Lỗi: {updateVTofNVLerror}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                            return;
                        }
                    }
                    else
                    {
                        // Khong cho nhap kho vao LOT // chi duoc nhap vao lot khac cung vitri
                        await DialogService.Alert($"LOT đã chứa NVL, không thể nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                        return;
                    }
                }
                else
                {
                    // Update so luong ton kho tai LOT va NVLID
                    (updateVTofNVLresult, updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(newviTriofNVL);

                    if (updateVTofNVLresult == -1)
                    {
                        await DialogService.Alert($"LNK Lỗi: {updateVTofNVLerror}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                        return;
                    }
                }

                // Update success
                if (updateVTofNVLresult > 0)
                {
                    // Update lenh nhap kho status
                    savedLNK.LNKIsDone.Value = 1;
                    savedLNK.NgayNhapKho.Value = DateTime.Now.Date.ToShortDateString();
                    (int updatelnkResult, string updatelnkError) = SQLServerServices.UpdateLenhNhapKho(savedLNK);

                    if (updatelnkResult == -1)
                    {
                        await DialogService.Alert($"LNK Lỗi: {updatelnkError}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                        return;
                    }

                    // update status to UI
                    LNK.LNKIsDone.Value = 1;

                    // Get nguoi nhap kho
                    string nguoiNhapkho = SQLServerServices.GetNguoiTaoPhieuNhapKhoByID(savedLNK.PNKID.Value);

                    // Logging nhap kho
                    HistoryXNKho logNhapKho = new HistoryXNKho()
                        {
                            LogLoaiPhieu = { Value = Common.LogTypePNK },
                            LogMaPhieu = { Value = maPNK },
                            LogMaViTri = { Value = maVitri },
                            LogNgThucHien = { Value = nguoiNhapkho },
                            LogSoLuong = { Value = savedLNK.LNKSoLuong.Value },
                            LogTonKhoTruoc = { Value = savedLNK.TargetNgLieu.TonKho },
                            LogTonKhoSau = { Value = savedLNK.TargetNgLieu.TonKho + soluongThemvao },
                            LogTenNVL = { Value = savedLNK.TargetNgLieu.TenNVL.Value },
                            LogThoiDiem = { Value = DateTime.Now },
                            LotVitri = { Value = savedLNK.LotVitri.Value },
                            NVLID = { Value = savedLNK.NVLID.Value },
                            VTID = { Value = savedLNK.VTID.Value },
                            QRIDLOT = { Value = savedLNK.QRIDLOT.Value }
                        };
                    // Insert logging to Database
                    (int logId, string logErr) = SQLServerServices.InsertLogingXNKho(logNhapKho);

                    if (logId == -1)
                    {

                    }

                    // Feedback nhap kho thanh cong
                    await DialogService.Alert($"Đã nhập kho nguyên liệu: \n {savedLNK.TargetNgLieu.TenNVL.Value?.ToString()} \n Số lượng : {soluongnhapfromClient} (pcs)", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                }
            }

        }
    }

    private async Task OnConfirmExcuteLenhNhapKho_withLotVitri(string maPNK, string maVitri, string maNVL)
    {
        int soluongnhapfromClient = int.TryParse(LNK.LNKSoLuong.Value?.ToString(), out int lnksl) ? lnksl : 0;
        object? lnkid = LNK.LenhNKID.Value?.ToString();

        // Load lenh nhap kho by ID
        LenhNhapKho savedLNK = SQLServerServices.GetLenhNhapKhoByID(lnkid);

        if (string.IsNullOrWhiteSpace(maPNK) || !string.Equals(maPNK, PNK.MaPhieuNK.Value?.ToString())) { return; }
        if (string.IsNullOrWhiteSpace(maVitri) || !string.Equals(maVitri, savedLNK.TargertVitri.MaViTri.Value?.ToString())) { return; }
        if (string.IsNullOrWhiteSpace(maNVL) || !string.Equals(maNVL, savedLNK.TargetNgLieu.TenNVL.Value?.ToString())) { return; }
        if (soluongnhapfromClient == 0) { return; }

        if (savedLNK.LenhNKID.Value == null)
        {
            await DialogService.Alert($"Không tồn tại lệnh nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
        else
        {
            // Handle lenh nhap kho

            // Check trang thai lenh (da hoan thanh hay chua)
            _ = int.TryParse(savedLNK.LNKIsDone.Value?.ToString(), out int scanlnkIsdone) ? scanlnkIsdone : -1;
            if (scanlnkIsdone != 0)
            {
                await DialogService.Alert($"Không thể nhập (lệnh đã hoàn thành trước đó)!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }

            // Kiem tra so luong them vao
            int soluongThemvao = int.TryParse(savedLNK.LNKSoLuong.Value?.ToString(), out int slthem) ? slthem : 0;
            if (soluongThemvao == 0)
            {
                await DialogService.Alert($"Số lượng không hợp lệ!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                return;
            }

            // Kiem tra vitri of NVL con trong hay khong / hoac cung ngay nhap kho
            var viTriofNVL = SQLServerServices.GetViTriOfNgVatLieuBy_VTid_LotVitri(vtid: savedLNK.VTID.Value, lotvitri: savedLNK.LotVitri.Value);

            // Handle lenh nhap kho voi LOT Vitri
            if (viTriofNVL.VTofNVLID.Value != null) // vtofnvl co chua NVL
            {
                int slhienco = int.TryParse(viTriofNVL?.VTNVLSoLuong.Value?.ToString(), out int slhc) ? slhc : 0;

                // so luong sau khi nhap cho vi tri da luu
                int newtonkhotaivitri = slhienco + soluongThemvao;

                // Tao moi vitriofNVL
                ViTriofNVL newviTriofNVL = new()
                    {
                        VTofNVLID = { Value = viTriofNVL?.VTofNVLID.Value },
                        VTID = { Value = viTriofNVL?.VTID.Value },
                        NVLID = { Value = savedLNK.NVLID.Value },
                        VTNVLSoLuong = { Value = newtonkhotaivitri },
                        NgayNhapKho = { Value = DateTime.Now.Date.ToShortDateString() },
                        LotVitri = { Value = viTriofNVL?.LotVitri.Value },
                        QRIDLOT = { Value = savedLNK.QRIDLOT.Value }
                    };

                int updateVTofNVLresult = -1; string updateVTofNVLerror;

                if (slhienco > 0)
                {
                    bool isnvlsame = object.Equals(viTriofNVL?.NVLID.Value, savedLNK.NVLID.Value);
                    bool isngaynksame = viTriofNVL?.NgayNhapKho.Value?.ToString()?.Trim() == DateTime.Now.Date.ToShortDateString();

                    if (isnvlsame && isngaynksame)
                    {
                        // Trung ngay va trung NVL --> ++ so luong ton kho tai LOT
                        (updateVTofNVLresult, updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(newviTriofNVL);

                        if (updateVTofNVLresult == -1)
                        {
                            await DialogService.Alert($"LNK Lỗi: {updateVTofNVLerror}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                            return;
                        }
                    }
                    else
                    {
                        // Khong cho nhap kho vao LOT // chi duoc nhap vao lot khac cung vitri
                        await DialogService.Alert($"LOT đã chứa NVL, không thể nhập kho!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                        return;
                    }
                }
                else
                {
                    // Update so luong ton kho tai LOT va NVLID
                    (updateVTofNVLresult, updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(newviTriofNVL);

                    if (updateVTofNVLresult == -1)
                    {
                        await DialogService.Alert($"LNK Lỗi: {updateVTofNVLerror}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                        return;
                    }
                }

                // Update success
                if (updateVTofNVLresult > 0)
                {
                    // Update lenh nhap kho status
                    savedLNK.LNKIsDone.Value = 1;
                    savedLNK.NgayNhapKho.Value = DateTime.Now.Date.ToShortDateString();
                    (int updatelnkResult, string updatelnkError) = SQLServerServices.UpdateLenhNhapKho(savedLNK);

                    if (updatelnkResult == -1)
                    {
                        await DialogService.Alert($"LNK Lỗi: {updatelnkError}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                        return;
                    }

                    // update status to UI
                    LNK.LNKIsDone.Value = 1;

                    // Get nguoi nhap kho
                    string nguoiNhapkho = SQLServerServices.GetNguoiTaoPhieuNhapKhoByID(savedLNK.PNKID.Value);

                    // Logging nhap kho
                    HistoryXNKho logNhapKho = new HistoryXNKho()
                        {
                            LogLoaiPhieu = { Value = Common.LogTypePNK },
                            LogMaPhieu = { Value = maPNK },
                            LogMaViTri = { Value = maVitri },
                            LogNgThucHien = { Value = nguoiNhapkho },
                            LogSoLuong = { Value = savedLNK.LNKSoLuong.Value },
                            LogTonKhoTruoc = { Value = savedLNK.TargetNgLieu.TonKho },
                            LogTonKhoSau = { Value = savedLNK.TargetNgLieu.TonKho + soluongThemvao },
                            LogTenNVL = { Value = savedLNK.TargetNgLieu.TenNVL.Value },
                            LogThoiDiem = { Value = DateTime.Now },
                            LotVitri = { Value = savedLNK.LotVitri.Value },
                            NVLID = { Value = savedLNK.NVLID.Value },
                            VTID = { Value = savedLNK.VTID.Value },
                            QRIDLOT = { Value = savedLNK.QRIDLOT.Value }
                        };
                    // Insert logging to Database
                    (int logId, string logErr) = SQLServerServices.InsertLogingXNKho(logNhapKho);

                    if (logId == -1)
                    {

                    }

                    // Feedback nhap kho thanh cong
                    await DialogService.Alert($"Đã nhập kho nguyên liệu: \n {maNVL} \n Số lượng : {soluongnhapfromClient} (pcs)", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });

                }
            }

        }
    }

    private async Task CopyToClipboard(string content)
    {
        try
        {
            // Try modern Clipboard API first
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Copied!",
                    Detail = $"{content}",
                    Duration = 4000
                });
        }
        catch (JSException)
        {
            try
            {
                // Fallback method
                await JSRuntime.InvokeVoidAsync("fallbackCopyToClipboard", content);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Fallback Copied!",
                        Detail = $"{content}",
                        Duration = 4000
                    });
            }
            catch (Exception)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Failed to copy text",
                        Duration = 3000
                    });
            }
        }
    }

    // Notification
    private void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
