@page "/khomanagement"
@attribute [Authorize(Roles = "Admin")]
@* this limited access into page *@

@using ProcessManagement.Commons
@using ProcessManagement.Models
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Pages.Manager_NVL.LoggingXNK
@using ProcessManagement.Pages.Manager_NVL.ViTriLuuTru
@using ProcessManagement.Pages.Manager_NVL.NhapKho
@using ProcessManagement.Pages.Manager_NVL.XuatKho
@using ProcessManagement.Services.QRCodes
@using ProcessManagement.Services.SQLServer
@using ProcessManagement.Pages.Manager_NVL.Dialogs
@using Radzen.Blazor
@using Radzen

@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject ContextMenuService ContextMenuService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<style>
    .rowbackground-style {
        background-color: white;
        border-radius: 10px;
    }

    .rz-grid-table-fixed-2 {
        /*width: unset;*/
        table-layout: auto;
        border-radius: 10px;
        padding: 10px;
    }
</style>

<RadzenRow class="rowbackground-style" Gap="0" Style="height: 100%; width: 100%; overflow-y: auto;">
    <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding-right: 0">
        <RadzenTabs Style="width: 100%; height: 100%; padding-right: 0" SelectedIndex="@((SelectedTabIndex - 1))">
            <Tabs>
                <RadzenTabsItem @onclick="@(() => SelectedTabIndex = 1)">
                    <Template>
                        <RadzenText Text="Kho nguyên liệu" Style=@($"{((SelectedTabIndex == 1)? "color: black; font-weight: 600; font-size: 16px" : "color: var(--rz-primary-dark); font-weight: 600; font-size: 16px")}")></RadzenText>
                    </Template>
                    <ChildContent>
                        <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding-top: 10px">
                            <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                                <!--Search by maquanly-->
                                <RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                    <RadzenRow Style="height: 100%; width: 100%;">
                                        <RadzenColumn SizeMD="3" Size="12">
                                            <RadzenStack Style="height: 100%; width: 100%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenText Text="KHO NGUYÊN LIỆU" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
                                            </RadzenStack>
                                        </RadzenColumn>
                                        <RadzenColumn SizeMD="6" Size="12">
                                            <RadzenStack Gap="15px" Style="height: 100%; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenTextBox @oninput="@((args) => FilterNVL(args?.Value))" Placeholder="Tìm theo tên nguyên liệu" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 50% "></RadzenTextBox>
                                                <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                                                <RadzenButton Click="@(() => { LoadList_LoaiNVL(); LoadList_NguyenVatLieu(); ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid); })" Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
                                            </RadzenStack>
                                        </RadzenColumn>
                                        <RadzenColumn SizeMD="3" Size="12">
                                            <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <!--Nhap kho button-->
                                                <RadzenButton Click="OnOpenDialogNhapKho" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Tạo phiếu nhập kho", 100))" Icon="download" Text="@($"Nhập kho {((DSNvlNhapKho.Count > 0)? $"({DSNvlNhapKho.Count})" : string.Empty)}")" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Light"
                                                              Style="height: contain; width: 50%; font-size: 14px;" />
                                                <!--Xuat kho button-->
                                                <RadzenButton Click="OnOpenDialogXuatKho" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Tạo phiếu xuất kho", 100))" Icon="upload" Text="@($"Xuất kho {((DSNvlXuatKho.Count > 0)? $"({DSNvlXuatKho.Count})" : string.Empty)}")" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Light"
                                                              Style="height: contain; width: 50%; font-size: 14px;" />
                                            </RadzenStack>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenStack>

                                <!--Filter-->
                                <RadzenStack Visible="false" Gap="0px" Orientation="Orientation.Horizontal" Style="height: contain; width: 100%; padding-top: 5px; padding-bottom: 0px; border-top: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                    <!--Search by ngaynhap-->
                                    <RadzenStack Visible="false" Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: contain; padding: 0; padding-right: 10px; border-right: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                        <RadzenStack Gap="10px" Style="height: 100%; width: contain; background-color: white; padding: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenLabel Text="Ngày sử dụng" Component="CheckBox1" Style="font-size: 14px; font-weight: bold; cursor: pointer" />
                                            <RadzenCheckBox TValue="bool" @bind-Value="@(isDisplaybyDay)" Name="CheckBox1" Change="@((args) => { isDisplaybyDay = args; LoadList_LoaiNVL(); LoadList_NguyenVatLieu(); })" />
                                        </RadzenStack>
                                        <!--Từ ngày-->
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="From" Style="font-weight: 500; font-size: 14px; color: black;"></RadzenText>
                                            <RadzenDatePicker Disabled="@(!isDisplaybyDay)" Style="width: 120px" TValue="DateTime" Value="@startSearchDay"
                                                              ValueChanged="@((args) => { startSearchDay = args; LoadList_LoaiNVL(); LoadList_NguyenVatLieu();})"
                                                              ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" AllowInput="false">
                                                <FooterTemplate>
                                                    <RadzenStack Style="height: 100%; width: contain; padding: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenButton Style="height: 100%; width: 50%;" Text="To day"
                                                                      Click="@(() => { startSearchDay = DateTime.Today; LoadList_LoaiNVL(); LoadList_NguyenVatLieu();})"
                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                                                    </RadzenStack>
                                                </FooterTemplate>
                                            </RadzenDatePicker>
                                        </RadzenStack>
                                        <!--Đến ngày-->
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" Style="height: contain; width: contain;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            <RadzenText Text="To" Style="font-weight: 500; font-size: 14px; color: black;"></RadzenText>
                                            <RadzenDatePicker Disabled="@(!isDisplaybyDay)" Style="width: 120px" TValue="DateTime" Value="@endSearchDay"
                                                              ValueChanged="@((args) => { endSearchDay = args; LoadList_LoaiNVL(); LoadList_NguyenVatLieu();})"
                                                              ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" AllowInput="false">
                                                <FooterTemplate>
                                                    <RadzenStack Style="height: 100%; width: contain; padding: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenButton Style="height: 100%; width: 50%;" Text="To day"
                                                                      Click="@(() => { endSearchDay = DateTime.Today; LoadList_LoaiNVL(); LoadList_NguyenVatLieu();})"
                                                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />
                                                    </RadzenStack>
                                                </FooterTemplate>
                                            </RadzenDatePicker>
                                        </RadzenStack>
                                    </RadzenStack>
                                    <RadzenStack Gap="10px" Style="height: 100%; width: contain; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                        <!--Search by Loai Danh muc-->
                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding-left: 10px ; padding-right: 10px; border-right: var(--rz-grid-cell-border);">
                                            <RadzenLabel Text="Danh mục" Style="font-size: 14px; color: darkred; font-weight: 600; width: contain" />
                                            <RadzenDropDown Disabled="true" Value="@SelectedDanhMuc?.TenDanhMuc.Value?.ToString()" ValueChanged="@((args) => { OnSelectDanhMucValueChanged(args);})" TValue="string"
                                                            Data=@(DanhMucNVLs?.Select(dm => dm.TenDanhMuc.Value?.ToString()).Prepend(allLoainvlFormat).ToList()) Style="border-radius: 5px; border-width: 1px; font-size: 14px; width: contain ">
                                            </RadzenDropDown>
                                        </RadzenStack>
                                    </RadzenStack>
                                </RadzenStack>

                                <!--Danh sach nguyen lieu trong kho-->
                                <RadzenRow Gap="10px" Style="height: 100%; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
                                    <!--Column bang danh sach NVL-->
                                    <RadzenColumn Size="12" SizeMD="7" Style="height: auto; width: 100%; padding-top: 5px;">
                                        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-bottom: 5px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                            <RadzenRow Style="height: 100%; width: 100%;">
                                                <RadzenColumn SizeMD="3" Size="12">
                                                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 10px; padding-left: 0; padding-right: 10px; border-right: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                        <RadzenText Text="Danh sách nguyên liệu" Style="font-weight: 600; height: contain; width: contain; font-style: italic; color: darkred"></RadzenText>
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn SizeMD="6" Size="12">
                                                    <RadzenStack Gap="10px" Style="height: 100%; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <!--Search by Loai NVL-->
                                                        <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: contain; padding-left: 10px; padding-right: 10px;">
                                                            <RadzenLabel Text="Loại nguyên liệu" Style="font-size: 16px; color: black; font-weight: 600; width: contain" />
                                                            <RadzenDropDown Placeholder="*Chọn loại nguyên liệu" Value="@((SelectedLoaiNVL != null)? SelectedLoaiNVL?.TenLoaiNVL.Value?.ToString() : allLoainvlFormat)"
                                                                            ValueChanged="@((args) => { OnSelectLoaiNVLValueChanged(args);})" TValue="string"
                                                                            Data=@(DSLoaiNVLs?.Select(loai => loai.TenLoaiNVL.Value?.ToString()).Prepend(allLoainvlFormat).ToList()) Style="border-radius: 5px; border-width: 1px; font-size: 14px; width: contain">
                                                            </RadzenDropDown>
                                                        </RadzenStack>
                                                        <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                            <RadzenText Text="@($"Tổng: ")" Style="color: black;  height: contain; width: contain; font-size: 15px"></RadzenText>
                                                            <RadzenText Text="@($"{DSNguyenVatLieus?.Count?? 0}")" Style="color: black; font-weight: 600; font-size: 15px; height: contain; width: contain"></RadzenText>
                                                        </RadzenStack>
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn SizeMD="3" Size="12">
                                                    <!--Them NVL moi-->
                                                    <RadzenStack Style="height: 100%; width: 100%; padding-left: 10px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenButton Click="OnThemMoiNguyenVatLieu" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm nguyên liệu mới", 100))" Icon="add" Text="Thêm nguyên liệu mới" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Filled" Shade="Shade.Lighter"
                                                                      Style="height: contain; width: 100%; font-size: 14px;" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                            </RadzenRow>
                                        </RadzenStack>

                                        <RadzenStack Visible="@(DSNguyenVatLieus?.Count == 0)" Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenText Text="Hãy chọn loại nguyên vật liệu" Style="color: red; font-weight: 500; font-size: 16px"></RadzenText>
                                        </RadzenStack>
                                        <!--Table listNVL-->
                                        <RadzenStack Visible="@(DSNguyenVatLieus != null && DSNguyenVatLieus.Count > 0)" Style="height: contain; width: 100%; padding-top: 10px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenDataGrid class="rz-grid-table-fixed-2" Data="@(DSNguyenVatLieus)" TItem="NguyenVatLieu"
                                                            EmptyText="Danh sách nguyên liệu trống." Style="overflow-x: scroll; width: 100%; height: contain; max-height: 800px"
                                                            ShowColumnTitleAsTooltip="true" ShowCellDataAsTooltip="true"
                                                            AllowFiltering="false" FilterMode="FilterMode.Simple" AllowVirtualization="true"
                                                            AllowPaging="false" AllowSorting="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                            ShowPagingSummary="true" PagingSummaryFormat="@pagingSummaryFormat" PagerPosition="PagerPosition.Bottom"
                                                            GridLines="DataGridGridLines.Both" Density="Density.Default" CellContextMenu="@OnDatagridCellContextMenu"
                                                            HeaderCellRender="@(args => args.Attributes.Add("style", $"background-color: rgba(58, 71, 77)"))"
                                                            CellRender="@OnCellRender" Value="@DatagridSelected" ValueChanged="@((args) => OnDatagridSelectChanged(args))">

                                                <Columns>

                                                    @if (DSNguyenVatLieus != null && DSNguyenVatLieus.Count > 0)
                                                    {
                                                        List<Propertyy> columns = DSNguyenVatLieus.FirstOrDefault()?.GetPropertiesValues() ?? new();
                                                        List<ThongTinNVL>? extracolumns = DSNguyenVatLieus.FirstOrDefault()?.DSThongTin.Where(tt => tt.LoaiThongTin.IsDisplayDatagrid.Value?.ToString() == "1")?.ToList();

                                                        <RadzenDataGridColumn Width="40px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left" Filterable="false"
                                                                              TItem="NguyenVatLieu" Title="#"
                                                                              Property="STT" TextAlign="TextAlign.Center">
                                                            <HeaderTemplate>
                                                                <span style="font-weight: 600; font-size: 15px; color: white">STT</span>
                                                            </HeaderTemplate>
                                                            <Template Context="nvl">
                                                                <span style="font-weight: bold;">@(DSNguyenVatLieus.IndexOf(nvl) + 1)</span>
                                                            </Template>
                                                        </RadzenDataGridColumn>

                                                        <!--Ten NVL-->
                                                        <RadzenDataGridColumn Width="110px" TItem="NguyenVatLieu" Title="Tên NVL"
                                                                              Property="tennvl" TextAlign="TextAlign.Center">
                                                            <HeaderTemplate>
                                                                <span style="font-weight: 600; font-size: 15px; color: white">Tên NVL</span>
                                                            </HeaderTemplate>
                                                            <Template Context="nvl">
                                                                <span style="color: darkblue; font-weight: bold;">@($"{nvl?.TenNVL.Value?.ToString()}")</span>
                                                            </Template>
                                                        </RadzenDataGridColumn>

                                                        <!--Loai NVL-->
                                                        <RadzenDataGridColumn Width="110px" TItem="NguyenVatLieu" Title="Loại NVL"
                                                                              Property="loainglieu" TextAlign="TextAlign.Center">
                                                            <HeaderTemplate>
                                                                <span style="font-weight: 600; font-size: 15px; color: white">Loại NVL</span>
                                                            </HeaderTemplate>
                                                            <Template Context="nvl">
                                                                <span style="color: black; font-weight: 500;">@($"{nvl.LoaiNVL?.TenLoaiNVL.Value?.ToString()}")</span>
                                                            </Template>
                                                        </RadzenDataGridColumn>

                                                        <!--Ton Kho-->
                                                        <RadzenDataGridColumn Width="110px" TItem="NguyenVatLieu" Title="Tồn kho"
                                                                              Property="tongtonkho" TextAlign="TextAlign.Center">
                                                            <HeaderTemplate>
                                                                <span style="font-weight: 600; font-size: 15px; color: white">Tồn kho</span>
                                                            </HeaderTemplate>
                                                            <Template Context="nvl">
                                                                @{
                                                                    string donvitinh = nvl.DonViTinh.Value?.ToString() ?? string.Empty;

                                                                    if (!String.IsNullOrEmpty(donvitinh) && nvl.TonKho > 0)
                                                                    {
                                                                        <span style="color: darkred; font-weight: bold;">@(nvl.TonKho + $" ({donvitinh})")</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span style="color: darkred; font-weight: bold;">@(nvl.TonKho)</span>
                                                                    }
                                                                }
                                                            </Template>
                                                        </RadzenDataGridColumn>

                                                        if (extracolumns != null)
                                                        {
                                                            foreach (var column in extracolumns)
                                                            {
                                                                string colName = column.LoaiThongTin.TenLoaiThongTin.Value?.ToString() ?? string.Empty;

                                                                <RadzenDataGridColumn Width="110px" TItem="NguyenVatLieu" Title="@colName"
                                                                                      Property="@colName" TextAlign="TextAlign.Center">
                                                                    <HeaderTemplate>
                                                                        <span style="font-weight: 600; font-size: 15px; color: white">@colName</span>
                                                                    </HeaderTemplate>
                                                                    <Template Context="nvl">
                                                                        @{
                                                                            ThongTinNVL? ttNVl = nvl.DSThongTin.FirstOrDefault(tt => tt.LoaiThongTin.TenLoaiThongTin.Value?.ToString() == colName);
                                                                            if (ttNVl != null)
                                                                            {
                                                                                int kieudulieu = int.TryParse(ttNVl.LoaiThongTin.KieuDuLieu.Value?.ToString(), out int kdl) ? kdl : 0;
                                                                                string colValue = ttNVl?.GiaTri.Value?.ToString() ?? string.Empty;
                                                                                if (kieudulieu == 3)
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(colValue, out DateTime vldate);

                                                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <span style="color: black; font-weight: 500;">@colValue</span>
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                <RadzenText Text="@string.Empty" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                            }
                                                                        }
                                                                    </Template>
                                                                </RadzenDataGridColumn>
                                                            }
                                                        }

                                                        foreach (var column in columns.Where(cl => cl.DispDatagrid == true).ToList())
                                                        {
                                                            string colName = column.DBName ?? string.Empty;
                                                            string displayName = column.DisplayName ?? string.Empty;

                                                            if (colName != Common.TenNVL)
                                                            {
                                                                <RadzenDataGridColumn Width="110px" TItem="NguyenVatLieu" Title="@displayName"
                                                                                      Property="@colName" TextAlign="TextAlign.Center">
                                                                    <HeaderTemplate>
                                                                        <span style="font-weight: 600; font-size: 15px; color: white">@displayName</span>
                                                                    </HeaderTemplate>
                                                                    <Template Context="nvl">

                                                                        @if (column.Type == typeof(DateTime))
                                                                        {
                                                                            string valuensd = nvl.GetPropertyValue(colName)?.ToString() ?? string.Empty;
                                                                            bool ishaveValueOfday = DateTime.TryParse(valuensd, out DateTime vldate);

                                                                            <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                            <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 15px; height: contain; color: black; font-weight: 500"></RadzenText>

                                                                        }
                                                                        else
                                                                        {
                                                                            <span style="color: black; font-weight: 500;">@(nvl.GetPropertyValue(colName))</span>
                                                                        }
                                                                    </Template>
                                                                </RadzenDataGridColumn>
                                                            }
                                                        }

                                                        <!--ID-->
                                                        <RadzenDataGridColumn Width="40px" TItem="NguyenVatLieu" Title="#ID" Frozen="true"
                                                                              Property="#ID" TextAlign="TextAlign.Center">
                                                            <HeaderTemplate>
                                                                <span style="font-weight: 600; font-size: 15px; color: white">#ID</span>
                                                            </HeaderTemplate>
                                                            <Template Context="nvl">
                                                                <span style="color: black; font-weight: 500;">@($"#{nvl.GetPropertyValue(Common.NVLID)}")</span>
                                                            </Template>
                                                        </RadzenDataGridColumn>
                                                    }
                                                </Columns>
                                            </RadzenDataGrid>
                                        </RadzenStack>
                                    </RadzenColumn>
                                    <!--Column bang thong tin NVL-->
                                    <RadzenColumn Size="12" SizeMD="5" Style="height: auto; width: 100%; padding-top: 10px; padding-left: 10px; border-left: var(--rz-grid-cell-border);">
                                        <RadzenCard Variant="Variant.Filled" Style="border-radius: 10px; height: 100%; width: 100%;">
                                            <RadzenStack Orientation="Orientation.Vertical" Gap="5px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: 100%; width: 100%;">
                                                <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: contain; width: contain; padding: 0px">
                                                    <RadzenText Visible="@(!isEditNVLDetail)" Text="@("Thông tin chi tiết nguyên liệu")" Style="color: black; font-size: 18px; font-weight: 500; height: contain; width: contain"></RadzenText>
                                                    <RadzenText Visible="@isEditNVLDetail" Text="@("Sửa thông tin nguyên liệu")" Style="color: red; font-size: 18px; font-weight: 500; height: contain; width: contain"></RadzenText>
                                                    <RadzenText Text="@($"{SelectedNgVatLieu?.TenNVL.Value?.ToString()}")" Style="color: darkred; font-size: 18px; font-weight: 600; height: contain; width: contain"></RadzenText>
                                                </RadzenStack>
                                                <RadzenCard Variant="@((isEditNVLDetail)? Variant.Flat : Variant.Outlined)" Style="min-height: 370px; height: contain; width: 100%; padding: 5px; padding-right:0; border-radius: 10px; margin-top: 5px;">
                                                    <RadzenStack Style="height: 100%; width: 100%; padding: 10px; padding-right: 0; overflow-y: scroll" Gap="0" Orientation="Orientation.Vertical">
                                                        @if (SelectedNgVatLieu.NVLID.Value != null)
                                                        {

                                                            <!--Display list VitriLuutri-->
                                                            <RadzenStack Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-darker); padding: 5px; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                <RadzenText Text="Vị trí nguyên liệu trong kho" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>
                                                            </RadzenStack>
                                                            <RadzenStack Gap="0" Style="width: 100%; height: contain; padding: 0; " Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                <RadzenCard Variant="Variant.Filled" Style="height: contain; width: 25%; padding: 5px; border-radius: 10px">
                                                                    <RadzenStack Style="width: 100%; height: contain; padding: 0; padding-top: 10px;" Gap="0" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">

                                                                        @{
                                                                            string qrBase64string = QRCodeServices.GenerateQRCode(SelectedNgVatLieu?.TenNVL.Value?.ToString() ?? string.Empty, 150);
                                                                            @if (!string.IsNullOrEmpty(qrBase64string))
                                                                            {
                                                                                <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                    <RadzenText Text="@($"{SelectedNgVatLieu?.TenNVL.Value?.ToString()}")" Style="font-weight: 600; font-size: 16px; color: darkblue;"></RadzenText>
                                                                                </RadzenStack>
                                                                                <RadzenImage Style="max-width: 100px; max-height: 100px; padding: 0px; margin: 0" Path="@($"data:image/png;base64,{qrBase64string}")"></RadzenImage>
                                                                            }
                                                                            else
                                                                            {
                                                                                <RadzenIcon Icon="image_not_supported" Style="font-size: 100px; color: #ccc;"></RadzenIcon>
                                                                            }
                                                                        }
                                                                    </RadzenStack>
                                                                </RadzenCard>
                                                                <RadzenStack Style="width: 75%; height: contain; padding: 0;" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenCard Variant="Variant.Flat" Style="height: contain; width: 100%; padding: 10px; border-radius: 0; margin-bottom: 10px">
                                                                        <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding: 0px; " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                            <RadzenStack Gap="20px" Style="height: contain; width: 100%; padding: 0px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                                <RadzenText Text="Danh sách vị trí" Style="font-weight: 500; font-size: 16px; color: black"></RadzenText>
                                                                            </RadzenStack>
                                                                            <RadzenRow Gap="10px" Style="width: 100%; height: contain; overflow-x: scroll">
                                                                                <RadzenColumn Size="12" SizeMD="12" Style="width: 100%; height: 100%; min-width: 350px;">
                                                                                    <RadzenStack Gap="5px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding-right: 0;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">

                                                                                        @if (SelectedNgVatLieu.NVLID.Value != null)
                                                                                        {
                                                                                            var dsvitri = SelectedNgVatLieu?.DSViTri.Where(vt => (int.TryParse(vt.VTNVLSoLuong.Value?.ToString(), out int slvt) ? slvt : 0) > 0).ToList();

                                                                                            if (dsvitri != null && dsvitri.Count > 0)
                                                                                            {
                                                                                                @foreach (var vitri in dsvitri)
                                                                                                {
                                                                                                    <RadzenCard class="rz-shadow-4" Variant="Variant.Outlined" Style="width: 100%; height: contain; padding: 5px; padding-right: 0px; background-color: white">
                                                                                                        <RadzenStack Style="width: 100%; height: contain" Gap="0" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                            <RadzenStack Style="width: 100%; height: contain" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                <RadzenStack Style="width: 3%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                    <RadzenText Text="@($"{(dsvitri.IndexOf(vitri) + 1).ToString()}")" Style="color: black; font-weight: 600; font-size: 14px"></RadzenText>
                                                                                                                </RadzenStack>
                                                                                                                <RadzenStack Style="width: 25%; height: contain; border-left: var(--rz-grid-cell-border); border-right: var(--rz-grid-cell-border); padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                    <RadzenText Text="@($"{vitri.VitriInfor.MaViTri.Value?.ToString()}")" Style="color: darkblue; font-weight: 600; font-size: 16px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Vị trí", 0, duration: 500))"></RadzenText>
                                                                                                                </RadzenStack>
                                                                                                                <RadzenStack Style="width: 15%; height: contain; border-right: var(--rz-grid-cell-border); padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                    <RadzenText Text="@($"{vitri.LotVitri.Value?.ToString()}")" Style="color: darkblue; font-weight: 600; font-size: 16px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Lot vị trí", 0, duration: 500))"></RadzenText>
                                                                                                                </RadzenStack>
                                                                                                                <RadzenStack Gap=15px Style="width: 30%; height: contain; padding-right: 10px; border-right: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                    <RadzenText Text="@($"{(int.TryParse(vitri.VTNVLSoLuong?.Value?.ToString(), out int slvt)? slvt : 0)} (pcs)")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Số lượng tại vị trí", 0, duration: 500))"></RadzenText>
                                                                                                                </RadzenStack>
                                                                                                                <RadzenStack Style="width: 25%; height: contain; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                                    <RadzenText Text="@($"{vitri.NgayNhapKho.Value?.ToString()}")" Style="color: darkblue; font-weight: 600; font-size: 16px" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Ngày nhập kho", 0, duration: 500))"></RadzenText>
                                                                                                                </RadzenStack>
                                                                                                            </RadzenStack>
                                                                                                            <RadzenStack Visible="@(!string.IsNullOrEmpty(vitri.QRIDLOT.Value?.ToString()))" Style="width: 100%; height: contain; padding-right: 10px; padding-top: 5px" Gap="10px" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                                                                <RadzenButton Text="@vitri.QRIDLOT.Value?.ToString()" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Lighter" Variant="Variant.Flat"
                                                                                                                              Style="font-size: 17px; font-weight: 600; height: contain; min-height: contain; width: contain;" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Mã quản lý", 0, duration: 500))" />

                                                                                                                <RadzenButton Click="@(() => CopyToClipboard(vitri.QRIDLOT.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />

                                                                                                                <RadzenButton Click="@(() => NavigateToPrintQRIDLOTpage(vitri))" Icon="print" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Darker" Variant="Variant.Flat"
                                                                                                                              Style="font-size: 18px; height: contain; min-height: contain; width: contain;" />

                                                                                                            </RadzenStack>
                                                                                                        </RadzenStack>
                                                                                                    </RadzenCard>
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                <RadzenStack Style="width: 100%; height: contain; " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                                    <RadzenText Text="Nguyên liệu chưa có trong kho lưu trữ" Style="font-size: 16px; font-weight: 500; height: contain; color: red"></RadzenText>
                                                                                                </RadzenStack>
                                                                                            }
                                                                                        }
                                                                                    </RadzenStack>
                                                                                </RadzenColumn>
                                                                            </RadzenRow>
                                                                        </RadzenStack>
                                                                    </RadzenCard>
                                                                </RadzenStack>
                                                            </RadzenStack>
                                                            <!--Display list VitriLuutri-->

                                                            <RadzenStack Gap="20px" Style="height: contain; width: 100%; background-color: var(--rz-primary-darker); padding: 5px; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                                <RadzenText Text="Thông tin chi tiết nguyên liệu" Style="color: white; font-weight: 500; font-size: 16px"></RadzenText>
                                                            </RadzenStack>
                                                            <!--Danh sach thong tin cua nguyen lieu - default-->
                                                            var nvlDetailsItems = SelectedNgVatLieu?.GetPropertiesValues().Where(nvl => nvl.AlowDisplay == true).ToList();

                                                            if (nvlDetailsItems != null)
                                                            {
                                                                // Danh muc
                                                                <RadzenStack Visible="false" Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenStack Style="width: 30%;">
                                                                        <RadzenText Text="Danh mục" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditNVLDetail)? JustifyContent.Start : JustifyContent.Center)">
                                                                        <RadzenText Text="@SelectedNgVatLieu?.DanhMuc?.TenDanhMuc.Value?.ToString()" Style="font-size: 16px; height: contain;"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>

                                                                // Ton kho
                                                                <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                    <RadzenStack Style="width: 30%;">
                                                                        <RadzenText Text="Tồn kho" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                                                                    </RadzenStack>
                                                                    <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditNVLDetail)? JustifyContent.Start : JustifyContent.Center)">
                                                                        <RadzenText Text="@($"{SelectedNgVatLieu?.TonKho} ({SelectedNgVatLieu?.DonViTinh.Value?.ToString()})")" Style="color: darkred; font-size: 16px; height: contain;"></RadzenText>
                                                                    </RadzenStack>
                                                                </RadzenStack>

                                                                foreach (var ngVatlieu in nvlDetailsItems)
                                                                {
                                                                    <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                        <RadzenStack Style="width: 30%;">
                                                                            <RadzenText Text="@ngVatlieu.DisplayName" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                                                                        </RadzenStack>
                                                                        <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditNVLDetail)? JustifyContent.Start : JustifyContent.Center)">

                                                                            <!--Edit mode-->
                                                                            @if (isEditNVLDetail)
                                                                            {
                                                                                if (ngVatlieu.Type == typeof(string))
                                                                                {
                                                                                    <RadzenTextBox Placeholder="@($"*Nhập {ngVatlieu.DisplayName}")" Value="@ngVatlieu.Value?.ToString()" ValueChanged="@((args) => { ngVatlieu.Value = args; } )"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                                }
                                                                                else if (ngVatlieu.Type == typeof(int))
                                                                                {
                                                                                    <RadzenNumeric Placeholder="@($"*Nhập {ngVatlieu.DisplayName}")" TValue="int" Value="@int.Parse(ngVatlieu.Value?.ToString()?? "0")" Min="0" Max="999999" ValueChanged="@((args) => { ngVatlieu.Value = args; })"
                                                                                                   Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                                }
                                                                                else if (ngVatlieu.Type == typeof(DateTime))
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(ngVatlieu.Value?.ToString(), out DateTime selectday);
                                                                                    if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                                    <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {ngVatlieu.DisplayName}")"
                                                                                                      TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                                      Change="@((args) =>
                                                                                                        {
                                                                                                            if (args != null)
                                                                                                            {
                                                                                                                DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                                ngVatlieu.Value = value;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                ngVatlieu.Value = string.Empty;
                                                                                                            }
                                                                                                        })"
                                                                                                      ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" ParseInput="@Common.ParseDate_ddMMyyyy" AllowInput="true"
                                                                                                      Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                <!--Normal mode-->
                                                                                if (ngVatlieu.Type == typeof(DateTime))
                                                                                {
                                                                                    bool ishaveValueOfday = DateTime.TryParse(ngVatlieu.Value?.ToString(), out DateTime vldate);

                                                                                    <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                    <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                                else
                                                                                {
                                                                                    <RadzenText Text="@ngVatlieu.Value?.ToString()" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                }
                                                                            }
                                                                        </RadzenStack>
                                                                    </RadzenStack>
                                                                }
                                                            }

                                                            <!--Display extra details-->
                                                            @if (SelectedNgVatLieu?.DSThongTin.Count > 0)
                                                            {
                                                                var dsngvldetails = SelectedNgVatLieu?.DSThongTin;

                                                                if (dsngvldetails != null)
                                                                {
                                                                    foreach (var nvldetail in dsngvldetails)
                                                                    {
                                                                        <RadzenStack Gap="0" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px; padding-left: 20px; border-bottom: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                                            <RadzenStack Style="width: 30%;">
                                                                                <RadzenText Text="@(nvldetail.LoaiThongTin?.TenLoaiThongTin.Value?.ToString())" Style="font-size: 16px; font-weight: 600; color: black; height: contain; width: 100% "></RadzenText>
                                                                            </RadzenStack>
                                                                            <RadzenStack Style="width: 55%; height: 100%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="@((isEditNVLDetail)? JustifyContent.Start : JustifyContent.Center)">
                                                                                <!--Edit mode-->
                                                                                @{
                                                                                    int kieudulieu = int.TryParse(nvldetail.LoaiThongTin?.KieuDuLieu.Value?.ToString(), out int kdl) ? kdl : 0;

                                                                                    if (isEditNVLDetail)
                                                                                    {
                                                                                        if (kieudulieu == 1) // kieu ki tu
                                                                                        {
                                                                                            <RadzenTextBox Placeholder="@($"* nhập {nvldetail.LoaiThongTin?.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                           Value="@nvldetail.GiaTri.Value?.ToString()" ValueChanged="@((args) => { nvldetail.GiaTri.Value = args; } )"
                                                                                                           Style="font-size: 16px; height: contain; border-width: 1px; width: 100% "></RadzenTextBox>
                                                                                        }
                                                                                        else if (kieudulieu == 2) // kieu so
                                                                                        {
                                                                                            <RadzenNumeric Placeholder="@($"* nhập {nvldetail.LoaiThongTin?.TenLoaiThongTin.Value?.ToString()}")" TValue="int"
                                                                                                           Value="@int.Parse(nvldetail.GiaTri.Value?.ToString()?? "0")" Min="0" Max="999999"
                                                                                                           ValueChanged="@((args) => { nvldetail.GiaTri.Value = args; })"
                                                                                                           Style="font-size: 16px; height: contain; border-width: 1px; width: 100%" />
                                                                                        }
                                                                                        else if (kieudulieu == 3) // datetime
                                                                                        {
                                                                                            bool ishaveValueOfday = DateTime.TryParse(nvldetail.GiaTri.Value?.ToString(), out DateTime selectday);
                                                                                            if (ishaveValueOfday) selectday = selectday.Date.Add(DateTime.Now.TimeOfDay);

                                                                                            <RadzenDatePicker class="custom-datepicker" Placeholder="@($"* nhập {nvldetail.LoaiThongTin?.TenLoaiThongTin.Value?.ToString()}")"
                                                                                                              TValue="DateTime" Value="selectday" AllowClear="true"
                                                                                                              Change="@((args) =>
                                                                                                        {
                                                                                                            if (args != null)
                                                                                                            {
                                                                                                                DateTime value = args.Value.Date.Add(DateTime.Now.TimeOfDay);
                                                                                                                nvldetail.GiaTri.Value = value;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                nvldetail.GiaTri.Value = string.Empty;
                                                                                                            }
                                                                                                        })"
                                                                                                              ShowTime="false" HourFormat="12" DateFormat="@Common.FormatNoTime_yyyMMdd" ParseInput="@Common.ParseDate_ddMMyyyy" AllowInput="true"
                                                                                                              Style="width: 100%;  font-size: 16px"></RadzenDatePicker>
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <!--Normal mode-->
                                                                                        if (kieudulieu == 3)
                                                                                        {
                                                                                            bool ishaveValueOfday = DateTime.TryParse(nvldetail.GiaTri.Value?.ToString(), out DateTime vldate);

                                                                                            <RadzenText Visible="@ishaveValueOfday" Text="@vldate.ToString("dd/MM/yyyy")" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                            <RadzenText Visible="@(!ishaveValueOfday)" Text="@string.Empty" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <RadzenText Text="@nvldetail.GiaTri.Value?.ToString()" Style="font-size: 16px; height: contain; color: black; font-weight: 500"></RadzenText>
                                                                                        }
                                                                                    }
                                                                                }
                                                                            </RadzenStack>
                                                                            <RadzenStack Visible="@isEditNVLDetail" Gap="5" Style="width: 15%; height: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                                                <RadzenButton Click="@(() => OpendialogRenameThongTinNVL(nvldetail))" Icon="edit" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Đổi tên trường thông tin", 100))"
                                                                                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                                <RadzenButton Click="@(() => OpendialogDeleteThongTinNVL(nvldetail))" Icon="delete" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa trường thông tin", 100))"
                                                                                              ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Shade="Shade.Lighter" Style="border-radius: 5px; --rz-icon-size: 18px;" />
                                                                            </RadzenStack>
                                                                        </RadzenStack>
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    </RadzenStack>
                                                </RadzenCard>

                                                <RadzenStack Visible="(SelectedNgVatLieu.NVLID.Value != null)" Gap="10px" Style="height: contain; width: 100%; padding-top: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                    <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenButton Visible="@(!isEditNVLDetail)" Style="width: contain; height: contain;" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm thông tin khác cho nguyên liệu", 100))"
                                                                      Icon="add" Text="Thêm trường thông tin" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                      Click="@(() => OnOpenDialogAddNewNVLDetail())" />
                                                        <RadzenButton Visible="@(isEditNVLDetail)" Style="width: contain; height: contain;"
                                                                      Icon="check" Text="Lưu thay đổi" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                      Click=@(() => OnUpdateThongTinNguyenVatLieu(SelectedNgVatLieu))
                                                                      BusyText="Saving ..." IsBusy=@isSavingNVLdetails />
                                                        <RadzenButton Style="width: contain; min-width: 120px; height: contain;" Click="@(() => EnableEditNVLDetail())" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm/xóa/sửa thông tin", 100))"
                                                                      Icon="@((isEditNVLDetail)? "clear" : "edit")" Text="@((isEditNVLDetail)? "Hủy" : "Chỉnh sửa")" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                                    </RadzenStack>
                                                    <RadzenStack Gap="10px" Style="height: contain; width: contain; padding: 0px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                        <RadzenButton Visible="@(isEditNVLDetail)" Style="width: contain; height: contain; background-color: darkred"
                                                                      Icon="delete" Text="Xóa NVL" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat"
                                                                      Click=@(() => OnDeleteNguyenVatLieu(SelectedNgVatLieu)) />
                                                    </RadzenStack>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenCard>
                                    </RadzenColumn>
                                </RadzenRow>
                            </RadzenStack>
                        </RadzenCard>
                    </ChildContent>
                </RadzenTabsItem>
                <RadzenTabsItem @onclick="@(() => SelectedTabIndex = 2)">
                    <Template>
                        <RadzenText Text="Vị trí lưu trữ" Style=@($"{((SelectedTabIndex == 2)? "color: black; font-weight: 600; font-size: 16px" : "color: var(--rz-primary-dark); font-weight: 600; font-size: 16px")}")></RadzenText>
                    </Template>
                    <ChildContent>
                        <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                            <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                                <DanhSachViTriLuuTru></DanhSachViTriLuuTru>
                            </RadzenStack>
                        </RadzenCard>
                    </ChildContent>
                </RadzenTabsItem>
                <RadzenTabsItem @onclick="@(() => SelectedTabIndex = 3)">
                    <Template>
                        <RadzenText Text="Kế hoạch nhập kho" Style=@($"{((SelectedTabIndex == 3)? "color: black; font-weight: 600; font-size: 16px" : "color: var(--rz-primary-dark); font-weight: 600; font-size: 16px")}")></RadzenText>
                    </Template>
                    <ChildContent>
                        <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                            <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                                <DanhSachPhieuNhapKho></DanhSachPhieuNhapKho>
                            </RadzenStack>
                        </RadzenCard>
                    </ChildContent>
                </RadzenTabsItem>
                <RadzenTabsItem @onclick="@(() => SelectedTabIndex = 4)">
                    <Template>
                        <RadzenText Text="Kế hoạch xuất kho" Style=@($"{((SelectedTabIndex == 4)? "color: black; font-weight: 600; font-size: 16px" : "color: var(--rz-primary-dark); font-weight: 600; font-size: 16px")}")></RadzenText>
                    </Template>
                    <ChildContent>
                        <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                            <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                                <DanhSachPhieuXuatKho></DanhSachPhieuXuatKho>
                            </RadzenStack>
                        </RadzenCard>
                    </ChildContent>
                </RadzenTabsItem>
                <RadzenTabsItem @onclick="@(() => SelectedTabIndex = 5)">
                    <Template>
                        <RadzenText Text="Lịch sử xuất/nhập kho" Style=@($"{((SelectedTabIndex == 5)? "color: black; font-weight: 600; font-size: 16px" : "color: var(--rz-primary-dark); font-weight: 600; font-size: 16px")}")></RadzenText>
                    </Template>
                    <ChildContent>
                        <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                            <RadzenStack Gap="5" Style="height: 100%; width: 100%;">
                                <LoggingHistoryXNKho></LoggingHistoryXNKho>
                            </RadzenStack>
                        </RadzenCard>
                    </ChildContent>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenColumn>
</RadzenRow>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "tabindxex")]
    public int AsignCurrentTabIndex { get; set; } = 1;

    public static int SelectedTabIndex { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery(Name = "khsxid")]
    public int TargetKHSXID { get; set; } = 0; // notuse

    private List<string>? UserRoles;
    private DateTime startSearchDay = DateTime.Today;
    private DateTime endSearchDay = DateTime.Today;

    private bool isDisplaybyDay = false;
    private bool isSavingNVLdetails = false;

    private bool isSelectAllLoaiNVL = false;
    private List<DanhMucNVL>? DanhMucNVLs;
    private DanhMucNVL? SelectedDanhMuc;

    private bool isSelectAllNguyenVatLieu = true;
    private List<LoaiNVL>? DSLoaiNVLs;
    private LoaiNVL? SelectedLoaiNVL;

    private List<NguyenVatLieu>? DSNguyenVatLieus;
    private NguyenVatLieu SelectedNgVatLieu = new();
    private IList<NguyenVatLieu>? DatagridSelected;

    private string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";
    private string allLoainvlFormat = "Tất cả";


    private List<NguyenVatLieu> DSNvlNhapKho = new();

    private List<NguyenVatLieu> DSNvlXuatKho = new();

    private bool isEditNVLDetail = false;

    protected override Task OnParametersSetAsync()
    {
        if (AsignCurrentTabIndex > 0)
        {
            SelectedTabIndex = AsignCurrentTabIndex;
        }

        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState?.User;

        if (user != null && user.Identity?.IsAuthenticated == true)
        {
            UserRoles = user.Claims.Where(c => c.Type == "role").Select(c => c.Value).ToList();
        }

        LoadList_DanhMuc();

        LoadList_LoaiNVL();

        LoadList_NguyenVatLieu();

        ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);

        await base.OnInitializedAsync();
    }

    // Them moi nvl
    private async Task OnThemMoiNguyenVatLieu()
    {
        NguyenVatLieu newNVL = await DialogService.OpenAsync<DialogAddnewNVL>(null, new Dictionary<string, object>() { { "SelectLoaiNVL", SelectedLoaiNVL ?? new() } },
        new DialogOptions() { ShowTitle = false, Width = "50%", Height = "95%", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 0px; padding: 0px" });

        if (newNVL != null)
        {
            LoadList_LoaiNVL();

            LoadList_NguyenVatLieu();

            ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);

            ShowNotification("Reload success!", NotificationSeverity.Success, 2000);
        }
    }
    // Press button Edit/Cancel
    private void EnableEditNVLDetail()
    {
        if (isEditNVLDetail)
        {
            // Press cancel button
            isEditNVLDetail = false;

            LoadList_LoaiNVL();

            LoadList_NguyenVatLieu();

            ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
        else
        {
            // Press edit button
            isEditNVLDetail = true;
        }
    }
    // Searching
    private async Task FilterNVL(object? args)
    {
        SelectedNgVatLieu = new();

        string tennvl = args?.ToString()?.Trim() ?? string.Empty;

        LoadList_LoaiNVL();

        LoadList_NguyenVatLieu();

        await Task.Delay(100);

        List<NguyenVatLieu>? NVLsFilter = DSNguyenVatLieus?.FindAll(cl => cl.TenNVL.Value?.ToString()?.IndexOf(tennvl, StringComparison.OrdinalIgnoreCase) >= 0);

        DSNguyenVatLieus = NVLsFilter;
    }

    // Load danh sach loai nguyen lieu
    private void LoadList_LoaiNVL()
    {
        DateTime offsetendDay = endSearchDay.AddDays(1);

        if (isSelectAllLoaiNVL)
        {
            DSLoaiNVLs = SQLServerServices.GetListLoaiNVLs();
        }
        else
        {
            DSLoaiNVLs = SQLServerServices.GetListLoaiNVLs(SelectedDanhMuc?.DMID.Value);
        }
    }

    // Load danh sach nguyen vat lieu
    private void LoadList_NguyenVatLieu()
    {
        SelectedNgVatLieu = new();

        DateTime offsetendDay = endSearchDay.AddDays(1);

        if (isSelectAllNguyenVatLieu)
        {
            if (isDisplaybyDay)
            {
                DSNguyenVatLieus = SQLServerServices.GetListNgVatLieuByDanhmucID(SelectedDanhMuc?.DMID.Value).Where(sp => (startSearchDay <= Convert.ToDateTime(sp.NgaySuDung.Value) && Convert.ToDateTime(sp.NgaySuDung.Value) < offsetendDay)).ToList();
            }
            else
            {
                DSNguyenVatLieus = SQLServerServices.GetListNgVatLieuByDanhmucID(SelectedDanhMuc?.DMID.Value);
            }
        }
        else
        {
            if (isDisplaybyDay)
            {
                DSNguyenVatLieus = SQLServerServices.GetListNguyenVatLieuByLoaiNvlID(SelectedLoaiNVL?.LOAINVLID.Value).Where(nvl => (startSearchDay <= Convert.ToDateTime(nvl.NgaySuDung.Value)
                                                        && Convert.ToDateTime(nvl.NgaySuDung.Value) < offsetendDay)).ToList();
            }
            else
            {
                DSNguyenVatLieus = SQLServerServices.GetListNguyenVatLieuByLoaiNvlID(SelectedLoaiNVL?.LOAINVLID.Value);
            }
        }
    }

    // Load danh sach danh muc
    private void LoadList_DanhMuc()
    {
        DanhMucNVLs = SQLServerServices.GetListDanhMucNVLs();
        // Asign danh muc nguyen vat lieu
        SelectedDanhMuc = DanhMucNVLs?.FirstOrDefault(dm => dm.TenDanhMuc.Value?.ToString() == "Nguyên liệu gia công");
    }

    // Save danh muc value changed
    private void OnSelectDanhMucValueChanged(string danhmuc)
    {
        SelectedDanhMuc = DanhMucNVLs?.FirstOrDefault(dm => dm.TenDanhMuc.Value?.ToString()?.Trim() == danhmuc);

        if (danhmuc == allLoainvlFormat)
        {
            isSelectAllLoaiNVL = true;
        }

        LoadList_LoaiNVL();
    }

    // Save loai NVL value changed
    private void OnSelectLoaiNVLValueChanged(string loainvl)
    {
        if (loainvl == allLoainvlFormat)
        {
            SelectedLoaiNVL = null;
            isSelectAllNguyenVatLieu = true;
        }
        else
        {
            isSelectAllNguyenVatLieu = false;
            SelectedLoaiNVL = DSLoaiNVLs?.FirstOrDefault(dm => dm.TenLoaiNVL.Value?.ToString()?.Trim() == loainvl);
        }

        LoadList_NguyenVatLieu();
    }

    // Re-selected current nguyên vật liệu
    private void ReSelectCurrentNguyenVatLieu(object? targetID)
    {
        if (DSNguyenVatLieus != null)
        {
            if (targetID == null) // get first row
            {
                var firstItem = DSNguyenVatLieus.FirstOrDefault();

                if (firstItem != null) { DatagridSelected = new List<NguyenVatLieu>() { firstItem }; }
            }
            else
            {
                var selectedID = targetID;
                // load last selected item
                var selectedItem = DSNguyenVatLieus.FirstOrDefault(nvl => nvl.NVLID.Value?.ToString() == selectedID.ToString());

                if (selectedItem != null) { DatagridSelected = new List<NguyenVatLieu>() { selectedItem }; }
                else { DatagridSelected = new List<NguyenVatLieu>(); }
            }

            SelectedNgVatLieu = DatagridSelected?.FirstOrDefault() ?? new();
        }
    }

    // Rename thong tin NVL
    private async Task OpendialogRenameThongTinNVL(ThongTinNVL ngvlDetail)
    {
        var deletestatus = await DialogService.OpenAsync<DialogRenameThongTinNgVatLieu>(null, new Dictionary<string, object>() { { "ThongTinNVL", ngvlDetail }, { "TargetNVL", SelectedNgVatLieu } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (deletestatus != null)
        {
            LoadList_LoaiNVL();

            LoadList_NguyenVatLieu();

            ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
    }

    // Delete thong tin NVL
    private async Task OpendialogDeleteThongTinNVL(ThongTinNVL ngvlDetail)
    {
        var deletestatus = await DialogService.OpenAsync<DialogDeleteThongTinNgVatLieu>(null, new Dictionary<string, object>() { { "DeleteThongTinNVL", ngvlDetail } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px" });

        if (deletestatus != null)
        {
            LoadList_LoaiNVL();

            LoadList_NguyenVatLieu();

            ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
    }

    // Thêm thông tin mới cho nguyên vật liệu
    private async Task OnOpenDialogAddNewNVLDetail()
    {
        List<LoaiThongTinNVL> loaiThongTinNVLs = await DialogService.OpenAsync<DialogAddnewThongTinNguyenVatLieu>(null, new Dictionary<string, object>() { { "TargetNguyenVatLieu", SelectedNgVatLieu }, { "IsAddThongTinInCreateNewNVLMode", false } },
        new DialogOptions() { ShowTitle = false, Width = "45%", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "background-color: white; border-radius: 10px; padding: 0px" });

        if (loaiThongTinNVLs != null && loaiThongTinNVLs.Count > 0)
        {
            int resulterr = 0;
            string err = string.Empty;

            foreach (var loaiThongTinNVL in loaiThongTinNVLs)
            {
                ThongTinNVL thongTin = new()
                    {
                        LoaiTTNVLID = { Value = loaiThongTinNVL.LoaiTTNVLID.Value },
                        // Chưa gan NVLID
                        LoaiThongTin = loaiThongTinNVL,
                        GiaTri = { Value = (loaiThongTinNVL.IsDefault.Value?.ToString() == "1") ? loaiThongTinNVL.GiaTriMacDinh.Value : string.Empty }
                    };

                if (loaiThongTinNVL.IsAddForAll) // Them cho tat ca NVL
                {
                    if (DSNguyenVatLieus != null)
                    {
                        foreach (var nvl in DSNguyenVatLieus)
                        {
                            var isExisting = nvl.DSThongTin.Any(thongtin => thongtin.LoaiThongTin.TenTruyXuat.Value?.ToString()?.Trim() == loaiThongTinNVL.TenTruyXuat.Value?.ToString()?.Trim());

                            if (!isExisting)
                            {
                                // Gan NVLID
                                thongTin.NVLID.Value = nvl.NVLID.Value;
                                // Them truong thong tin
                                (resulterr, err) = SQLServerServices.InsertThongTinNguyenVatLieu(thongTin);
                                if (resulterr < 0) break;
                            }
                        }
                    }
                }
                else
                {
                    var isExisting = SelectedNgVatLieu.DSThongTin.Any(thongtin => thongtin.LoaiThongTin.TenTruyXuat.Value?.ToString()?.Trim() == loaiThongTinNVL.TenTruyXuat.Value?.ToString()?.Trim());

                    if (!isExisting)
                    {
                        // Gan NVLID
                        thongTin.NVLID.Value = SelectedNgVatLieu.NVLID.Value;
                        // Them truong thong tin
                        (resulterr, err) = SQLServerServices.InsertThongTinNguyenVatLieu(thongTin);
                        if (resulterr < 0) break;
                    }
                }
            }

            if (resulterr > 0)
            {
                LoadList_LoaiNVL();

                LoadList_NguyenVatLieu();

                ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);

                ShowNotification("Đã thêm trường thông tin!", NotificationSeverity.Success, 3000);
            }
            else if (resulterr == -1)
            {
                await DialogService.Alert($"Thêm thông tin lỗi: {err}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }

        isEditNVLDetail = false;
    }

    // Delete nguyên vật liệu
    private async Task OnDeleteNguyenVatLieu(NguyenVatLieu? selectedNguyenVatLieu)
    {
        bool? confirm = await DialogService.Confirm("Xóa nguyên vật liệu này khỏi danh sách?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (confirm.Value)
        {
            (int result, string error) = SQLServerServices.DeleteNguyenVatLieu(selectedNguyenVatLieu?.NVLID.Value);

            if (result == -1)
            {
                await DialogService.Alert($"Không thể xóa: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                LoadList_LoaiNVL();

                LoadList_NguyenVatLieu();

                ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);

                ShowNotification("Đã xóa!", NotificationSeverity.Success, 3000);
            }
        }

        isEditNVLDetail = false;
    }

    // Save nguyen vat lieu updatedinfors
    private async Task OnUpdateThongTinNguyenVatLieu(NguyenVatLieu? updateItems)
    {
        if (updateItems != null)
        {
            isSavingNVLdetails = true; await Task.Delay(300);

            // Update truong thong tin chinh

            (int mainUDresult, string mainUDerror) = SQLServerServices.UpdateNguyenVatLieuMainDetails(updateItems);

            if (mainUDresult == -1)
            {
                await DialogService.Alert($"Lỗi: {mainUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
            else
            {
                // Update truong thong tin phu

                (int subUDresult, string subUDerror) = SQLServerServices.UpdateListNguyenVatLieuDetails(updateItems.DSThongTin);

                if (mainUDresult == -1)
                {
                    await DialogService.Alert($"Lỗi: {mainUDerror}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
                else
                {
                    ShowNotification("Cập nhật thành công!", NotificationSeverity.Success, 2000);
                    // await DialogService.Alert($"Cập nhật thành công!", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                    isEditNVLDetail = false;
                }
            }

            isSavingNVLdetails = false;

            LoadList_NguyenVatLieu();

            ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
    }

    // Nhap kho dialog
    private async Task OnOpenDialogNhapKho()
    {
        if (DSNvlNhapKho.Count > 0)
        {
            await DialogService.OpenAsync<DialogCreate_PhieuNhapKho>(null, new Dictionary<string, object>() { { "DSachNVL_NhapKho", DSNvlNhapKho } },
            new DialogOptions() { ShowTitle = false, Width = "100%", Height = "100%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px;" });

            // reset dsnvlnhapkho
            DSNvlNhapKho = new();

            // Reload
            LoadList_LoaiNVL(); LoadList_NguyenVatLieu(); ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
        else
        {
            await DialogService.Alert($"<strong>Hãy chọn nguyên liệu cần nhập kho</strong> \n <i>(chuột phải vào danh sách nguyên liệu)</i>", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    // Xuat kho dialog
    private async Task OnOpenDialogXuatKho()
    {
        if (DSNvlXuatKho.Count > 0)
        {
            await DialogService.OpenAsync<DialogCreate_PhieuXuatKho>(null, new Dictionary<string, object>() { { "DSachNVL_XuatKho", DSNvlXuatKho } },
            new DialogOptions() { ShowTitle = false, Width = "100%", Height = "100%", Resizable = true, Draggable = true, ShowClose = false, Style = "background-color: while; border-radius: 10px; padding: 0px;" });

            // reset dsnvlxuatkho
            DSNvlXuatKho = new();
            // Reload
            LoadList_LoaiNVL(); LoadList_NguyenVatLieu(); ReSelectCurrentNguyenVatLieu(Common.SelectedNVLid);
        }
        else
        {
            await DialogService.Alert($"<strong>Hãy chọn nguyên liệu cần xuất kho</strong> \n <i>(chuột phải vào danh sách nguyên liệu)</i>", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }


    // Datagrid selected changed event
    private void OnDatagridSelectChanged(IList<NguyenVatLieu> selectedNgvatlieu)
    {
        DatagridSelected = selectedNgvatlieu;

        var fistItemSelectedNVL = DatagridSelected.FirstOrDefault();

        // Save selected NVLid into static variable
        if (fistItemSelectedNVL != null)
        {
            SelectedNgVatLieu = fistItemSelectedNVL;

            Common.SelectedNVLid = fistItemSelectedNVL.NVLID.Value;
        }
    }

    // Datagrid
    private void OnCellRender(DataGridCellRenderEventArgs<NguyenVatLieu> args)
    {
        if (args.Column.Property.Contains("ID"))
        {
            args.Attributes.Add("style", $"font-weight: bold;");
        }
    }

    // Navigate to print QRIDLOT page
    private void NavigateToPrintQRIDLOTpage(ViTriofNVL? viTriofNVL)
    {
        if (viTriofNVL != null)
        {
            //NavigationManager.NavigateTo($"khomanagement?tabindxex={3}&khsxid={khsxid}");
            int.TryParse(viTriofNVL.VTofNVLID.Value?.ToString(), out int vtofnvlid);

            NavigationManager.NavigateTo($"print-qridlot?vtofnvlid={vtofnvlid}");
        }
    }

    private async Task CopyToClipboard(string content)
    {
        try
        {
            // Try modern Clipboard API first
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Copied!",
                    Detail = $"{content}",
                    Duration = 4000
                });
        }
        catch (JSException)
        {
            try
            {
                // Fallback method
                await JSRuntime.InvokeVoidAsync("fallbackCopyToClipboard", content);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Fallback Copied!",
                        Detail = $"{content}",
                        Duration = 4000
                    });
            }
            catch (Exception)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Failed to copy text",
                        Duration = 3000
                    });
            }
        }
    }


    // ContextMenu
    void OnDatagridCellContextMenu(DataGridCellMouseEventArgs<NguyenVatLieu> args)
    {
        DatagridSelected = new List<NguyenVatLieu>() { args.Data };

        var fistItemSelectdNVL = DatagridSelected.FirstOrDefault();

        if (fistItemSelectdNVL != null)
        {
            // Save selected NVLid into static variable
            Common.SelectedNVLid = fistItemSelectdNVL.NVLID.Value;

            var itemNK = DSNvlNhapKho.FirstOrDefault(nvl => nvl.NVLID.Value?.ToString() == fistItemSelectdNVL?.NVLID.Value?.ToString());

            var itemXK = DSNvlXuatKho.FirstOrDefault(nvl => nvl.NVLID.Value?.ToString() == fistItemSelectdNVL?.NVLID.Value?.ToString());

            ContextMenuService.Open(args,
                new List<ContextMenuItem>{ new ContextMenuItem(){ Text = ((itemNK == null)? "Thêm vào danh sách nhập kho" : "Đã có trong danh sách nhập kho"), Value = 1, Icon = ((itemNK == null)? "add" : "check") },
                                            new ContextMenuItem(){ Text = ((itemXK == null)? "Thêm vào danh sách xuất kho" : "Đã có trong danh sách xuất kho"), Value = 2, Icon = ((itemXK == null)? "add" : "check") } },
                                            (e) =>
                                            {
                                                if (e.Value.Equals(1) && itemNK == null)
                                                {
                                                    // Them nvl vao ds nhap kho
                                                    DSNvlNhapKho.Add(fistItemSelectdNVL);
                                                }
                                                else if (e.Value.Equals(2) && itemXK == null)
                                                {
                                                    // Them nvl vao ds xuat kho
                                                    DSNvlXuatKho.Add(fistItemSelectdNVL);
                                                }

                                                StateHasChanged();
                                                ContextMenuService.Close();
                                            });
        }
    }

    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content, int delay, int duration = 500)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = delay, Duration = duration, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }

}
