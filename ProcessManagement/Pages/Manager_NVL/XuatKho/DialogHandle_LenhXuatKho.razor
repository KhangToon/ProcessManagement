@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.Tracking
@using ProcessManagement.Services.SQLServer
@using ProcessManagement.Services.QRCodes
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models;
@using ProcessManagement.Models.KHO_NVL.XuatKho

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime

<RadzenCard Variant="Variant.Filled" Style="height: contain; width: 100%; padding: 10px;">
    <RadzenStack Gap="10px" Orientation="Orientation.Vertical" Style=" height: contain; width: 100%; padding: 0px; padding-bottom: 10px; padding-top: 10px " AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenStack Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="20px" Style="height: contain; width: 220px; border-radius: 5px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="@($"LỆNH XUẤT KHO")" Style="font-weight: 600; font-size: 16px; color: darkgreen;"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: contain; border-radius: 5px; padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="@($"Tên nguyên liệu:")" Style="font-weight: 600; font-size: 16px; color: black; font-style: italic"></RadzenText>
                <RadzenText Text="@($"{LXK?.ViTriofNVL.NgLieuInfor.TenNVL.Value?.ToString()}")" Style="font-weight: bold; font-size: 16px; color: black; font-style: italic"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: contain; border-radius: 5px; padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="@($"Số lượng xuất:")" Style="font-weight: 600; font-size: 16px; color: black; font-style: italic"></RadzenText>
                <RadzenText Text="@($"{LXK?.LXKSoLuong.Value?.ToString()} ({LXK?.ViTriofNVL.NgLieuInfor.DonViTinh.Value?.ToString()})")" Style="font-weight: bold; font-size: 16px; color: black; font-style: italic"></RadzenText>
            </RadzenStack>
            <RadzenStack Visible="false" Gap="20px" Style="height: contain; width: contain; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenRadioButtonList Value=@usingScanner TValue="bool" ValueChanged=@(args => usingScanner = args)>
                    <Items>
                        <RadzenRadioButtonListItem Text="Sử dụng USB Scanner" Value="true" />
                        <RadzenRadioButtonListItem Text="Sử dụng Handy Scanner" Value="false" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        </RadzenStack>

        <!--Scan ma phieu xuat kho-->
        <RadzenRow class="rowbackground-style" Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; border-radius: 0; overflow-y: auto; border-top: var(--rz-grid-cell-border);">
            <RadzenColumn Visible="false" Size="12" SizeMD="4" Style="height: 100%; width: 100%; border-right: var(--rz-grid-cell-border); padding-right: 10px">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"Mã phiếu xuất kho: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{PXK.MaPhieuXK.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(PXK.MaPhieuXK.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(PXK.MaPhieuXK.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã phiếu xuất kho" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtMaPXK"
                                               Value="@scanMaPXK" ValueChanged="@((args) => { scanMaPXK = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>

            <!--Scan vi tri luu tru-->
            <RadzenColumn Size="12" SizeMD="4" Style="height: 100%; width: 100%; border-right: var(--rz-grid-cell-border); padding-right: 10px">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"Mã vị trí: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{LXK.ViTriofNVL.VitriInfor.MaViTri.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(LXK.ViTriofNVL.VitriInfor.MaViTri.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(LXK.ViTriofNVL.VitriInfor.MaViTri.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã vị trí" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtQRIDLOT"
                                               Value="@scanMaViTri" ValueChanged="@((args) => { scanMaViTri = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>

            <!--Scan ma nguyen lieu-->
            <RadzenColumn Size="12" SizeMD="4" Style="height: 100%; width: 100%;">
                <RadzenCard Variant="Variant.Flat" Style="height: 100%; width: 100%; padding: 10px;">
                    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText Text="@($"QR quản lý NVL: ")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
                            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenText Text="@($"{LXK.QRIDLOT.Value?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkred;"></RadzenText>
                                <RadzenButton Click="@(() => CopyToClipboard(LXK.QRIDLOT.Value?.ToString()?? string.Empty))" Icon="content_copy" Style="--rz-icon-size: 18px;" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Light" />
                            </RadzenStack>
                        </RadzenStack>
                        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
                            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                @{
                                    string qrBase64string = QRCodeServices.GenerateQRCode(LXK.QRIDLOT.Value?.ToString() ?? string.Empty, 150);
                                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                                }
                            </RadzenStack>
                        </RadzenCard>

                        <RadzenStack Gap="5" Style="height: contain; width: 100%; padding-bottom: 5px; padding-top: 5px;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                            <RadzenStack Style="height: contain; width: 100%">
                                <RadzenText Text="Quét mã quản lý" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                            </RadzenStack>
                            <RadzenStack Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                <RadzenTextBox Placeholder="*Kết quả quét mã" @ref="reftxtQRIDLOT"
                                               Value="@scanQRIDLOT" ValueChanged="@((args) => { scanQRIDLOT = args; } )"
                                               Style="font-size: 16px; height: contain; border-width: 1px; width: 100%;"></RadzenTextBox>
                            </RadzenStack>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-top: 10px; border-top: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @if (LXK.LXKIsDone.Value?.ToString() == "1")
                {
                    <RadzenButton Style="width: contain; cursor: default" Icon="check" Text="Xuất kho thành công" ButtonStyle="ButtonStyle.Success" Shade="Shade.Dark" Size="ButtonSize.Small" Variant="Variant.Flat" />
                }
                else
                {
                    <RadzenButton Click="@(async () => { await OnConfirmExcuteLenhXuatKho_byQRIDLOT(PXK.MaPhieuXK.Value?.ToString()?? string.Empty, scanMaViTri, scanQRIDLOT);})" Style="width: contain;" Icon="arrow_outward" Text="Tiến hành xuất kho" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Darker" Size="ButtonSize.Small" Variant="Variant.Flat" />
                }
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: 100%; width: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenButton Click="@(() => { DialogService.Close();})" Style="width: 120px;" Icon="close" Text="Đóng" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public LenhXuatKho LXK { get; set; } = new();

    [Parameter]
    //public string MaPXK { get; set; } = string.Empty;
    public PhieuXuatKho PXK { get; set; } = new();

    private bool usingScanner = true;

    private RadzenTextBox reftxtMaPXK = new();
    private RadzenTextBox reftxtMaNVL = new();
    private RadzenTextBox reftxtQRIDLOT = new();
    private int focusIndex = 1;

    private LenhXuatKho scanLXK = new();
    private string scanMaPXK = string.Empty;
    private string scanQRIDLOT = string.Empty;
    private string scanMaViTri = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (focusIndex == 1)
        {
            //await reftxtMaPXK.FocusAsync();
        }
        else if (focusIndex == 2)
        {
            await reftxtMaNVL.FocusAsync();
        }
        else if (focusIndex == 3)
        {
            await reftxtQRIDLOT.FocusAsync();
        }
    }

    private async void HandyPXK_ExportEventRasing(object? sender, object? lenhxkid)
    {
        scanLXK = SQLServerServices.GetLenhXuatKhoByID(lenhxkid);

        await this.InvokeAsync(() => this.StateHasChanged());
    }

    private async Task OnConfirmExcuteLenhXuatKho(string maPXK, string maViTri, string maNVL)
    {
        if (String.IsNullOrEmpty(maPXK) || String.IsNullOrEmpty(maViTri) || String.IsNullOrEmpty(maNVL))
        {
            await DialogService.Alert($"Hãy quét đầy đủ thông tin!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            return;
        }

        // Load phieu xuat kho id
        List<int> pxkIds = SQLServerServices.GetListPXKIds(maPXK.Trim());
        if (pxkIds.Count == 0) { return; }
        int scanpxkID = pxkIds[0];

        // Load nvl id
        List<int> nvlIds = SQLServerServices.GetListNVLIds(maNVL.Trim());
        if (nvlIds.Count == 0) { return; }
        int scannvlID = nvlIds[0];

        // Load vitri ID
        List<int> vitriIds = SQLServerServices.GetListVTriIds(maViTri.Trim());
        if (vitriIds.Count == 0) { return; }
        int scanvitriID = vitriIds[0];

        if (scanpxkID == 0 || scannvlID == 0 || scanvitriID == 0)
        {
            return;
        }

        // Get scan lenh xuat kho
        LenhXuatKho temLXK = new() { PXKID = { Value = scanpxkID }, NVLID = { Value = scannvlID }, VTID = { Value = scanvitriID } };

        scanLXK = SQLServerServices.GetLenhXuatKho(temLXK);
        scanLXK.ViTriofNVL = LXK.ViTriofNVL;

        if (scanLXK.LenhXKID.Value == null)
        {
            return;
        }

        // Update so luong nguyen vat lieu
        int soluongXuatdi = int.TryParse(scanLXK.LXKSoLuong.Value?.ToString(), out int slxuat) ? slxuat : 0;

        // Tinh so luong hien co cua nvl o vitri
        int soluongHientaivitri = int.TryParse(scanLXK.ViTriofNVL.VTNVLSoLuong.Value?.ToString(), out int slht) ? slht : 0;

        // gan so luong sau khi xuat cho vi tri da luu
        int newtonkhotaivitri = soluongHientaivitri - soluongXuatdi;

        if (newtonkhotaivitri < 0)
        {
            return;
        }

        // Check trang thai lenh (da hoan thanh hay chua)
        _ = int.TryParse(scanLXK.LXKIsDone.Value?.ToString(), out int scanlxkIsdone) ? scanlxkIsdone : -1;
        if (scanlxkIsdone != 0)
        {
            return;
        }

        // Update so luong vi tri da co cua nvl
        (int updateVTofNVLresult, string updateVTofNVLerror) = SQLServerServices.UpdateSoluongNgVatLieuById(scanLXK.ViTriofNVL.VTofNVLID.Value, newtonkhotaivitri);

        if (updateVTofNVLresult == -1)
        {
            return;
        }
        else
        {
            // Update lenh xuat kho status
            (int updatelxkResult, string updatelxkError) = SQLServerServices.UpdateLenhXuatKhoStatus(scanLXK.LenhXKID.Value, 1);

            if (updatelxkResult != -1)
            {
                // update status to UI
                scanLXK.LXKIsDone.Value = 1;

                //Logging xuat kho
                HistoryXNKho logXuatKho = new HistoryXNKho()
                    {
                        LogLoaiPhieu = { Value = Common.LogTypePXK },
                        LogMaPhieu = { Value = PXK.MaPhieuXK.Value?.ToString() },
                        LogMaViTri = { Value = scanMaViTri },
                        LogNgThucHien = { Value = PXK.NguoiLapPXK.Value?.ToString() },
                        LogTonKhoTruoc = { Value = LXK.ViTriofNVL.NgLieuInfor.TonKho },
                        LogSoLuong = { Value = LXK.LXKSoLuong.Value },
                        LogTonKhoSau = { Value = LXK.ViTriofNVL.NgLieuInfor.TonKho - soluongXuatdi },
                        LogTenNVL = { Value = LXK.ViTriofNVL.NgLieuInfor.TenNVL.Value },
                        LogThoiDiem = { Value = DateTime.Now },
                        NVLID = { Value = scanLXK.NVLID.Value },
                        VTID = { Value = scanLXK.VTID.Value }
                    };
                // Insert logging to Database
                (int logId, string logErr) = SQLServerServices.InsertLogingXNKho(logXuatKho);

                if (logId == -1)
                {
                    await DialogService.Alert($"Logging error: {logErr}!", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }

                ShowNotification("Đã xuất kho!", NotificationSeverity.Success, 2000);
            }
        }
    }

    // Update ngaynhapkho/ngayxuatkho cua dsLOTofKHSX
    private (int, string) UpdateNgayNhapXuatKho_dsLOTofKHSX(object? khsxid, LenhXuatKho targetLXK)
    {
        Dictionary<string, object?> parameters = new Dictionary<string, object?>() { { Models.KHSXs.KHSX_LOT.DBName.KHSXID, khsxid } };
        (var resultdslots, string getError) = SQLServerServices.GetListLOT_khsx(parameters);

        if (resultdslots != null && resultdslots.Any())
        {
            if (targetLXK != null)
            {
                foreach (var lot in resultdslots)
                {
                    lot.NgayNhapKho.Value = targetLXK.ViTriofNVL.NgayNhapKho.Value;
                    lot.NgayXuatKho.Value = targetLXK.NgayXuatKho.Value;

                    (int updatelot, string updateloterr) = SQLServerServices.UpdateLOT_khsx(lot);

                    if (updatelot == -1)
                    {

                    }
                }

                return (1, string.Empty);
            }

            return (-1, "Error");

        }
        else return (-1, "Danh sách LOT của KHSX không tồn tại!");
    }

    private async Task OnConfirmExcuteLenhXuatKho_byQRIDLOT(string maPXK, string maViTri, string qridlot)
    {
        int soluongxuatfromClient = int.TryParse(LXK.LXKSoLuong.Value?.ToString(), out int lxksl) ? lxksl : 0;
        object? lxkid = LXK.LenhXKID.Value;

        // Load lenh xuat kho by ID
        LenhXuatKho savedLXK = SQLServerServices.GetLenhXuatKhoByID(lxkid);


        if (string.IsNullOrWhiteSpace(maPXK) || !string.Equals(maPXK, PXK.MaPhieuXK.Value?.ToString()?.Trim())) { return; }
        if (string.IsNullOrWhiteSpace(maViTri) || !string.Equals(maViTri, savedLXK.ViTriofNVL.VitriInfor.MaViTri.Value?.ToString()?.Trim())) { return; }
        if (string.IsNullOrWhiteSpace(qridlot) || !string.Equals(qridlot, savedLXK.QRIDLOT.Value?.ToString()?.Trim())) { return; }
        if (soluongxuatfromClient == 0) { return; }


        if (savedLXK.LenhXKID.Value == null)
        {
            return;
        }
        else
        {
            // Handle lenh xuat kho

            // Check trang thai lenh (da hoan thanh hay chua)
            _ = int.TryParse(savedLXK.LXKIsDone.Value?.ToString(), out int scanlxkIsdone) ? scanlxkIsdone : -1;
            if (scanlxkIsdone != 0)
            {
                return;
            }

            // Kiem tra so luong xuat ra
            int soluongXuatra = int.TryParse(savedLXK.LXKSoLuong.Value?.ToString(), out int slxuat) ? slxuat : 0;
            if (soluongXuatra == 0)
            {
                return;
            }

            // Kiem tra trang thai vi tri
            ViTriofNVL viTriofNVL = SQLServerServices.GetViTriOfNgVatLieuBy_VTid_LotVitri(vtid: savedLXK.VTID.Value, lotvitri: savedLXK.LotVitri.Value);

            if (viTriofNVL == null || viTriofNVL.VTofNVLID.Value == null)
            {
                return;
            }

            int soluongHiencotaivitri = int.TryParse(viTriofNVL?.VTNVLSoLuong.Value?.ToString(), out int slhc) ? slhc : 0;

            // Kiem tra so luong xuat co vuot qua so luong hien tai khong
            if (soluongXuatra > soluongHiencotaivitri)
            {
                return;
            }

            // Tinh so luong con lai sau khi xuat
            int newtonkhotaivitri = soluongHiencotaivitri - soluongXuatra;

            // Tao moi vitriofNVL
            ViTriofNVL viTriofNVLupdate = new()
                {
                    VTofNVLID = { Value = viTriofNVL?.VTofNVLID.Value },
                    VTID = { Value = viTriofNVL?.VTID.Value },
                    NVLID = { Value = (newtonkhotaivitri > 0) ? savedLXK.NVLID.Value : 0 },
                    VTNVLSoLuong = { Value = newtonkhotaivitri },
                    NgayNhapKho = { Value = (newtonkhotaivitri > 0) ? viTriofNVL?.NgayNhapKho.Value : string.Empty },
                    LotVitri = { Value = viTriofNVL?.LotVitri.Value },
                    QRIDLOT = { Value = (newtonkhotaivitri > 0) ? viTriofNVL?.QRIDLOT.Value : string.Empty }
                };

            // Update so luong vi tri cua nvl
            (int updateVTofNVLresult, string updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(viTriofNVLupdate);

            if (updateVTofNVLresult == -1)
            {
                return;
            }

            // Update lenh xuat kho status
            savedLXK.LXKIsDone.Value = 1;
            savedLXK.NgayXuatKho.Value = DateTime.Now.Date.ToShortDateString();
            (int updatelxkResult, string updatelxkError) = SQLServerServices.UpdateLenhXuatKho(savedLXK);

            if (updatelxkResult == -1)
            {
                return;
            }

            // Update ngaynhap/xuatkho of KHSX
            _ = int.TryParse(PXK.KHSXID.Value?.ToString(), out int khsxid) ? khsxid : 0;

            if (khsxid > 0)
            {
                SQLServerServices.UpdatePhieuXuatKhoInfor(PXK);

                (int updatelotstatus, string errorlot) = UpdateNgayNhapXuatKho_dsLOTofKHSX(khsxid, savedLXK);
            }

            // update status to UI
            LXK.LXKIsDone.Value = 1;

            // Get nguoi xuat kho
            string nguoiXuatkho = SQLServerServices.GetNguoiTaoPhieuXuatKhoByID(savedLXK.PXKID.Value);

            // Logging xuat kho
            HistoryXNKho logXuatKho = new HistoryXNKho()
                {
                    LogLoaiPhieu = { Value = Common.LogTypePXK },
                    LogMaPhieu = { Value = maPXK },
                    LogMaViTri = { Value = maViTri },
                    LogNgThucHien = { Value = nguoiXuatkho },
                    LogSoLuong = { Value = savedLXK.LXKSoLuong.Value },
                    LogTonKhoTruoc = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TonKho },
                    LogTonKhoSau = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TonKho - soluongXuatra },
                    LogTenNVL = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TenNVL.Value },
                    LogThoiDiem = { Value = DateTime.Now },
                    LotVitri = { Value = savedLXK.LotVitri.Value },
                    NVLID = { Value = savedLXK.NVLID.Value },
                    VTID = { Value = savedLXK.VTID.Value },
                    QRIDLOT = { Value = savedLXK.QRIDLOT.Value }
                };
            // Insert logging to Database
            (int logId, string logErr) = SQLServerServices.InsertLogingXNKho(logXuatKho);

            if (logId == -1)
            {
                return;
            }

            // Feedback xuat kho thanh cong
            await DialogService.Alert($"Đã xuất kho nguyên liệu: \n {savedLXK.ViTriofNVL.NgLieuInfor.TenNVL.Value?.ToString()} \n Số lượng : {soluongxuatfromClient} (pcs)", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }

    private async Task OnConfirmExcuteLenhXuatKho_withLotVitri(string maPXK, string maViTri, string maNVL)
    {
        int soluongxuatfromClient = int.TryParse(LXK.LXKSoLuong.Value?.ToString(), out int lxksl) ? lxksl : 0;
        object? lxkid = LXK.LenhXKID.Value;

        // Load lenh xuat kho by ID
        LenhXuatKho savedLXK = SQLServerServices.GetLenhXuatKhoByID(lxkid);


        if (string.IsNullOrWhiteSpace(maPXK) || !string.Equals(maPXK, PXK.MaPhieuXK.Value?.ToString())) { return; }
        if (string.IsNullOrWhiteSpace(maViTri) || !string.Equals(maViTri, savedLXK.ViTriofNVL.VitriInfor.MaViTri.Value?.ToString())) { return; }
        if (string.IsNullOrWhiteSpace(maNVL) || !string.Equals(maNVL, savedLXK.ViTriofNVL.NgLieuInfor.TenNVL.Value?.ToString())) { return; }
        if (soluongxuatfromClient == 0) { return; }


        if (savedLXK.LenhXKID.Value == null)
        {
            return;
        }
        else
        {
            // Handle lenh xuat kho

            // Check trang thai lenh (da hoan thanh hay chua)
            _ = int.TryParse(savedLXK.LXKIsDone.Value?.ToString(), out int scanlxkIsdone) ? scanlxkIsdone : -1;
            if (scanlxkIsdone != 0)
            {
                return;
            }

            // Kiem tra so luong xuat ra
            int soluongXuatra = int.TryParse(savedLXK.LXKSoLuong.Value?.ToString(), out int slxuat) ? slxuat : 0;
            if (soluongXuatra == 0)
            {
                return;
            }

            // Kiem tra trang thai vi tri
            ViTriofNVL viTriofNVL = SQLServerServices.GetViTriOfNgVatLieuBy_VTid_LotVitri(vtid: savedLXK.VTID.Value, lotvitri: savedLXK.LotVitri.Value);

            if (viTriofNVL == null || viTriofNVL.VTofNVLID.Value == null)
            {
                return;
            }

            int soluongHiencotaivitri = int.TryParse(viTriofNVL?.VTNVLSoLuong.Value?.ToString(), out int slhc) ? slhc : 0;

            // Kiem tra so luong xuat co vuot qua so luong hien tai khong
            if (soluongXuatra > soluongHiencotaivitri)
            {
                return;
            }

            // Tinh so luong con lai sau khi xuat
            int newtonkhotaivitri = soluongHiencotaivitri - soluongXuatra;

            // Tao moi vitriofNVL
            ViTriofNVL viTriofNVLupdate = new()
                {
                    VTofNVLID = { Value = viTriofNVL?.VTofNVLID.Value },
                    VTID = { Value = viTriofNVL?.VTID.Value },
                    NVLID = { Value = (newtonkhotaivitri > 0) ? savedLXK.NVLID.Value : 0 },
                    VTNVLSoLuong = { Value = newtonkhotaivitri },
                    NgayNhapKho = { Value = (newtonkhotaivitri > 0) ? viTriofNVL?.NgayNhapKho.Value : string.Empty },
                    LotVitri = { Value = viTriofNVL?.LotVitri.Value }
                };

            // Update so luong vi tri cua nvl
            (int updateVTofNVLresult, string updateVTofNVLerror) = SQLServerServices.UpdateViTriOfNgVatLieu(viTriofNVLupdate);

            if (updateVTofNVLresult == -1)
            {
                return;
            }

            // Update lenh xuat kho status
            savedLXK.LXKIsDone.Value = 1;
            savedLXK.NgayXuatKho.Value = DateTime.Now.Date.ToShortDateString();
            (int updatelxkResult, string updatelxkError) = SQLServerServices.UpdateLenhXuatKho(savedLXK);

            if (updatelxkResult == -1)
            {
                return;
            }

            // Update ngaynhap/xuatkho of KHSX
            _ = int.TryParse(PXK.KHSXID.Value?.ToString(), out int khsxid) ? khsxid : 0;

            if (khsxid > 0)
            {
                SQLServerServices.UpdatePhieuXuatKhoInfor(PXK);

                (int updatelotstatus, string errorlot) = UpdateNgayNhapXuatKho_dsLOTofKHSX(khsxid, savedLXK);
            }

            // update status to UI
            LXK.LXKIsDone.Value = 1;

            // Get nguoi xuat kho
            string nguoiXuatkho = SQLServerServices.GetNguoiTaoPhieuXuatKhoByID(savedLXK.PXKID.Value);

            // Logging xuat kho
            HistoryXNKho logXuatKho = new HistoryXNKho()
                {
                    LogLoaiPhieu = { Value = Common.LogTypePXK },
                    LogMaPhieu = { Value = maPXK },
                    LogMaViTri = { Value = maViTri },
                    LogNgThucHien = { Value = nguoiXuatkho },
                    LogSoLuong = { Value = savedLXK.LXKSoLuong.Value },
                    LogTonKhoTruoc = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TonKho },
                    LogTonKhoSau = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TonKho - soluongXuatra },
                    LogTenNVL = { Value = savedLXK.ViTriofNVL.NgLieuInfor.TenNVL.Value },
                    LogThoiDiem = { Value = DateTime.Now },
                    LotVitri = { Value = savedLXK.LotVitri.Value },
                    NVLID = { Value = savedLXK.NVLID.Value },
                    VTID = { Value = savedLXK.VTID.Value }
                };
            // Insert logging to Database
            (int logId, string logErr) = SQLServerServices.InsertLogingXNKho(logXuatKho);

            if (logId == -1)
            {
                return;
            }

            // Feedback xuat kho thanh cong
            await DialogService.Alert($"Đã xuất kho nguyên liệu: \n {maNVL} \n Số lượng : {soluongxuatfromClient} (pcs)", "<strong><span style='color: darkgreen'>Success!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
        }
    }


    private async Task CopyToClipboard(string content)
    {
        try
        {
            // Try modern Clipboard API first
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", content);

            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Copied!",
                    Detail = $"{content}",
                    Duration = 4000
                });
        }
        catch (JSException)
        {
            try
            {
                // Fallback method
                await JSRuntime.InvokeVoidAsync("fallbackCopyToClipboard", content);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Fallback Copied!",
                        Detail = $"{content}",
                        Duration = 4000
                    });
            }
            catch (Exception)
            {
                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Failed to copy text",
                        Duration = 3000
                    });
            }
        }
    }


    // Notification
    private void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
