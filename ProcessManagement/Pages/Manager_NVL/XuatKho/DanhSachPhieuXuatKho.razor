@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.XuatKho
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices


<style>
    .pxkho_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }
</style>

<RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
    <RadzenRow Style="height: 100%; width: 100%;">
        <RadzenColumn SizeMD="3" Size="12">
            <RadzenStack Style="height: 100%; width: 100%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="KẾ HOẠCH XUẤT KHO" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn SizeMD="6" Size="12">
            <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: 100%;">
                <RadzenTextBox @oninput="@((args) => GetFilterDSachKHXuatKho(args?.Value?.ToString()?? string.Empty))" Placeholder="Nhập mã phiếu xuất kho để tìm kiếm" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 50% "></RadzenTextBox>
                <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
                <RadzenButton Click="(async () => {await LoadDSachPhieuXuatKho(); ReSelectPhieuXuatKho();})" Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>
<RadzenRow Gap="10px" Style="height: 100%; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
    <RadzenColumn Size="12" SizeMD="3" Style="height: contain; width: 100%;">
        <RadzenStack Gap="0px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 10px; padding-left: 10px; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="Danh sách phiếu xuất kho" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
                <RadzenText Text="@($"( {DSPhieuXKs.Count} phiếu )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenDataList Style="height: contain; width: 100%;" PagerPosition="PagerPosition.Top" PageSize="3" WrapItems="true" AllowPaging="true" Data="@DSPhieuXKs" TItem="PhieuXuatKho">
                    <Template Context="pxk">
                        <RadzenCard Style="width: 100%; height: contain; padding: 0" Variant="Variant.Flat">
                            <RadzenCard class="@(IsPXKhoSelected(pxk))" Style="width: 100%; height: contain;" Variant="Variant.Filled">
                                <RadzenStack onclick="@(() => OnPhieuXuatKhoClick(pxk))" Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenCard Variant="@((pxk.PXKID.Value?.Equals(SelectedPXK.PXKID.Value)?? false)? Variant.Flat : Variant.Outlined)" Style="height: 100%; width: 100%; padding: 10px;">
                                        <RadzenStack Style="width: 100%; height: 100%;" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@((DSPhieuXKs.IndexOf(pxk) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="height: contain; width: contain; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if (pxk.IsPXKDoneXuatKho)
                                                    {
                                                        <RadzenButton Text="Done" Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: 100%; cursor: default; background-color: rgb(229,245,233); font-weight: 600" />
                                                    }
                                                    else
                                                    {
                                                        <RadzenButton Text="Not done" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: 100%; cursor: default; background-color: rgb(254,243,220); font-weight: 600" />
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Mã phiếu: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                    <RadzenText Text="@($"{pxk.MaPhieuXK.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Người lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                    <RadzenText Text="@($"{pxk.NguoiLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="width: 40%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Ngày lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                                                    <RadzenText Text="@($"{pxk.NgayLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenStack>
            <RadzenStack Visible="@(DSPhieuXKs.Count == 0)" Gap="10px" Style="height: contain; width: 100%; padding: 10px; padding-left: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="Chưa có phiếu xuất kho nào" Style="color: red; font-weight: 600; font-size: 16px; height: contain; width: contain;"></RadzenText>
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="9" Style="height: contain; width: 100%; padding: 10px; border-left: var(--rz-grid-cell-border)">
        <RadzenStack Gap="10px" Style="height: 100%; width: 100%; padding: 0px" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
            <RadzenStack Gap="10px" Style="height: 95%; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <PhieuXuatKhoDetails PXK="SelectedPXK"></PhieuXuatKhoDetails>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenButton Visible="@(SelectedPXK.PXKID.Value != null)" Style="width: contain; min-width: 120px; height: contain;" Click="@(() => OnDeleteSelectedPhieuXuatKho())" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Xóa phiếu xuất kho"))"
                              Icon="delete" Text="Xóa phiếu" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code {
    private List<PhieuXuatKho> DSPhieuXKs = new();
    private PhieuXuatKho SelectedPXK = new();
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        // Registed reload pnk
        if (Common.IsReloadPXK_EventRegistered())
        {
            Common.ResetReloadPXK_Event();
        }
        Common.ReloadPXKEvent += ReloadPXKEventRasing;

        await LoadDSachPhieuXuatKho();

        ReSelectPhieuXuatKho();

        await base.OnInitializedAsync();
    }

    private async void ReloadPXKEventRasing(object? sender, EventArgs eventArgs)
    {
        await LoadDSachPhieuXuatKho();

        ReSelectPhieuXuatKho();

        await this.InvokeAsync(() => this.StateHasChanged());
    }

    private async Task LoadDSachPhieuXuatKho()
    {
        await Task.Run(() =>
        {
            DSPhieuXKs = SQLServerServices.GetListPhieuXuatKho();
            DSPhieuXKs.Reverse();
        });
    }

    private void ReSelectPhieuXuatKho()
    {
        if (Common.SelectedPXKID != null)
        {
            SelectedPXK = DSPhieuXKs.FirstOrDefault(pxkid => pxkid.PXKID.Value?.ToString() == Common.SelectedPXKID.ToString()) ?? new();
        }
        else
        {
            SelectedPXK = DSPhieuXKs.FirstOrDefault() ?? new();
        }
    }

    private async Task GetFilterDSachKHXuatKho(string keyWord)
    {
        if (isSearching == false)
        {
            isSearching = true;

            await LoadDSachPhieuXuatKho();


            if (!string.IsNullOrEmpty(keyWord.Trim()))
            {
                DSPhieuXKs = DSPhieuXKs.Where(phieu => phieu.MaPhieuXK.Value?.ToString()?.IndexOf(keyWord.Trim(), StringComparison.OrdinalIgnoreCase) >= 0).ToList();

                ReSelectPhieuXuatKho();
            }

            await InvokeAsync(StateHasChanged);

            isSearching = false;
        }
    }


    private void OnPhieuXuatKhoClick(PhieuXuatKho selectPXK)
    {
        SelectedPXK = selectPXK;

        Common.SelectedPXKID = SelectedPXK.PXKID.Value;

        StateHasChanged();
    }

    // Delete phieu xuat kho from Database
    private async Task OnDeleteSelectedPhieuXuatKho()
    {
        if (SelectedPXK.PXKID.Value != null)
        {
            bool? comfirm = await DialogService.Confirm($"Xóa phiếu xuất kho này (<strong>{SelectedPXK.MaPhieuXK.Value?.ToString()}</strong>)?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

            if (comfirm.Value)
            {
                (int result, string error) = SQLServerServices.DeletePhieuXuatKho(SelectedPXK.PXKID.Value);

                if (result != -1)
                {
                    await LoadDSachPhieuXuatKho();

                    ReSelectPhieuXuatKho();

                    ShowNotification("Đã xóa phiếu!", NotificationSeverity.Success, 2000);
                }
                else
                {
                    await DialogService.Alert($"Error: {error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
                }
            }
        }
    }

    private string IsPXKhoSelected(PhieuXuatKho selectPXK)
    {
        if (SelectedPXK.PXKID.Value != null && SelectedPXK.PXKID.Value.Equals(selectPXK.PXKID.Value))
        {
            return "pxkho_IsSelected";
        }
        else return string.Empty;
    }

    // Tooltip
    private void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Delay = 500, Style = "background-color: black" };

        TooltipService.Open(elementReference, content, options);
    }

    // Notification
    private void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
}
