@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices

<RadzenCard Style="height: 100%; width: 100%; padding: 5px" Variant="Variant.Flat">
    <RadzenStack Gap="0" Style="height: 100%; width: 100%; margin: 0; padding: 0" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-bottom: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenText Text="Thêm nguyên vật liệu mới" Style="font-size: 18px; font-weight: 600; color: black"></RadzenText>
        </RadzenStack>
        <RadzenRow Gap="10px" Style="height: contain; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0; overflow-y: scroll">
            <RadzenColumn Size="12" SizeMD="12" Style="height: 100%; width: 100%; padding: 15px; padding-right: 0">
                <RadzenText Text="Nhập thông tin nguyên vật liệu (NVL)" Style="color: darkred; font-size: 16px; font-weight: 500; height: contain; width: contain"></RadzenText>
                <RadzenCard Variant="Variant.Filled" Style="min-height: 300px; width: 100%; padding: 0px; margin-top: 10px;">
                    <RadzenStack Style="height: 100%; width: 100%; padding: 10px;" Gap="0" Orientation="Orientation.Vertical">
                        @{
                            List<Propertyy>? nvlproperties = NewNVL.GetPropertiesValues();

                            var alowdispNVLproperties = nvlproperties.Where(nvl => nvl.AlowDisplay == true);

                            if (alowdispNVLproperties != null)
                            {
                                foreach (var property in alowdispNVLproperties)
                                {
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 10px; border-bottom: var(--rz-grid-cell-border);">
                                        <RadzenStack Style="width: 30%;">
                                            <RadzenText Text="@(((property.DBName == Common.TonKhoHienTai)? "Số lượng ban đầu" : property.DisplayName))" Style="font-size: 16px; font-weight: 600; height: contain; width: 100% "></RadzenText>
                                        </RadzenStack>
                                        <RadzenStack Style="width: 70%; padding-left: 20px; border-left: var(--rz-grid-cell-border);" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                            @if (property.DBName == Common.DMID)
                                            {
                                                <RadzenStack Gap="10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenDropDown Disabled="true" AllowClear="true" Placeholder="@("*Chọn danh mục nguyên vật liệu")" TValue="string" Style="width: 70%; height: contain; font-size: 14px; font-weight: 600;"
                                                                    Data=@danhMucNVLs?.Select(dm => dm.TenDanhMuc.Value?.ToString()) Value="@SelectDanhmuc?.TenDanhMuc.Value?.ToString()"
                                                                    Change="@(args =>
                                                                    {
                                                                        SelectDanhmuc = danhMucNVLs?.FirstOrDefault(dm => dm.TenDanhMuc.Value?.ToString() == args?.ToString());
                                                                        property.Value = SelectDanhmuc?.DMID.Value?.ToString();
                                                                        LoaiNVLs = LoadListLoaiNguyenVatLieu(SelectDanhmuc);
                                                                        selectLoaiNVL = null; // reset selected loaiNVL
                                                                    })">
                                                    </RadzenDropDown>
                                                    <RadzenButton Disabled="true" Style="width: 30%; min-height: 35px; height: contain;" Click="@(() => OnOpenDialogAddNewDanhmucNVL())"
                                                                  Icon="add" Text="Danh mục khác" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                                </RadzenStack>
                                            }
                                            else if (property.DBName == Common.LOAINVLID)
                                            {
                                                <RadzenStack Gap=" 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Style="height: contain; width: 100%; padding: 0px;">
                                                    <RadzenDropDown AllowClear="true" Placeholder="@("*Chọn loại nguyên vật liệu")" Disabled="(LoaiNVLs?.Count == 0)" TValue="string" Style="width: 70%; height: contain; font-size: 14px; font-weight: 600" Value="selectLoaiNVL?.TenLoaiNVL.Value?.ToString()"
                                                                    Data=@(LoaiNVLs?.Select(dm => dm.TenLoaiNVL.Value?.ToString()) ?? Enumerable.Empty<string>())
                                                                    Change="@(args =>
                                                                    {
                                                                        selectLoaiNVL = LoaiNVLs?.FirstOrDefault(dm => dm.TenLoaiNVL.Value?.ToString() == args?.ToString());
                                                                        property.Value = selectLoaiNVL?.LOAINVLID.Value?.ToString();
                                                                    })">
                                                    </RadzenDropDown>
                                                    <RadzenButton Style="width: 30%; min-height: 35px; height: contain;" Click="@(() => OnOpenDialogAddNewLoaiNVL())" MouseEnter="@(args => ShowToolTip(args, TooltipPosition.Bottom, "Thêm loại NVL"))"
                                                                  Icon="add" Text="Loại NVL khác" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" />
                                                </RadzenStack>
                                                @if (selectLoaiNVL == null) { property.Value = null; } // reset property value (MaLoaiNVL) khi chuyen san danh muc khac
                                            }
                                            else if (property.DBName == Common.TenNVL)
                                            {
                                                <RadzenTextBox Placeholder="@($"*Nhập {property.DisplayName}")" Value="@property.Value?.ToString()" Style="font-size: 16px; height: contain;  border-width: 1px; width: 100% "
                                                               ValueChanged="@((args) => {property.Value = args;})">
                                                </RadzenTextBox>

                                                notallowAddnewNVL = SQLServerServices.IsTenNVLExists(property.Value?.ToString()?.Trim());

                                                <RadzenAlert Visible="notallowAddnewNVL" Text="@("Tên nguyên vật liệu đã tồn tại, thử tên khác!")" Style="width: 100%; height: contain; font-size: 16px; background-color: orangered; color: white; padding-left: 15px" IconColor="white" AlertStyle="AlertStyle.Danger" AllowClose="false" Variant="Variant.Flat" Size="AlertSize.Small" Shade="Shade.Lighter"></RadzenAlert>
                                            }
                                            else
                                            {
                                                if (property.Type == typeof(string))
                                                {
                                                    <RadzenTextBox Placeholder="@($"*Nhập {property.DisplayName}")" Value="@property.Value?.ToString()" Style="font-size: 16px; height: contain;  border-width: 1px; width: 100% "
                                                                   ValueChanged="@((args) => {property.Value = args;})">
                                                    </RadzenTextBox>
                                                }
                                                else if (property.Type == typeof(int))
                                                {
                                                    <RadzenNumeric Placeholder="@($"*Nhập {property.DisplayName}")" TValue="int" Value="@int.Parse(property.Value?.ToString()?? "0")" Min="0" Max="100000" ValueChanged="@((args) => { property.Value = args; })"
                                                                   Style="font-size: 16px; height: contain;  border-width: 1px; width: 100%" />
                                                }
                                                else if (property.Type == typeof(DateTime))
                                                {
                                                    <RadzenDatePicker Placeholder="@($"*Chọn {property.DisplayName}")" TValue="DateTime"
                                                                      ValueChanged="@((args) => { var now = DateTime.Now ; property.Value = args.Add(new TimeSpan(now.Hour, now.Minute, now.Second));})"
                                                                      ShowTime="false" HourFormat="12" DateFormat="@Common.DayTimeFormatnoTime" AllowInput="false"
                                                                      Style="width: 100%; font-size: 16px"></RadzenDatePicker>
                                                }
                                            }
                                        </RadzenStack>
                                    </RadzenStack>
                                }
                            }
                        }
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding-right: 15px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
            <RadzenButton Style="width: contain; height: 80%; color: white; background-color: darkgreen" Icon="save" Text="Xác nhận thêm" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Variant="Variant.Filled" Click="@(() => OnAddnewNVL())" />
            <RadzenButton Style="width: contain; height: 80%;" Icon="close" Text="Thoát" ButtonStyle="ButtonStyle.Primary" Shade="Shade.Lighter" Size="ButtonSize.Small" Variant="Variant.Flat" Click="@(() => OnCancelAddnewNVL())" />
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    private NguyenVatLieu NewNVL = new();
    private List<DanhMucNVL>? danhMucNVLs;
    private List<LoaiNVL>? LoaiNVLs;
    private bool notallowAddnewNVL = false;
    private DanhMucNVL? SelectDanhmuc;
    private LoaiNVL? selectLoaiNVL;

    protected override Task OnInitializedAsync()
    {
        danhMucNVLs = LoadListDanhmucNguyenVatLieu();

        SelectDanhmuc = danhMucNVLs?.FirstOrDefault(dm => dm.TenDanhMuc.Value?.ToString()?.Trim() == Common.DanhMucNguyenLieuGiaCong);

        NewNVL.DMID.Value = SelectDanhmuc?.DMID.Value;

        LoaiNVLs = LoadListLoaiNguyenVatLieu(SelectDanhmuc);

        return base.OnInitializedAsync();
    }

    private List<DanhMucNVL>? LoadListDanhmucNguyenVatLieu()
    {
        var danhmucs = SQLServerServices.GetListDanhMucNVLs();

        return danhmucs;
    }

    private List<LoaiNVL>? LoadListLoaiNguyenVatLieu(DanhMucNVL? selectedresult) // load theo danh mục
    {
        int danhmucID = int.TryParse(selectedresult?.DMID?.Value?.ToString(), out int dmid) ? dmid : 0;

        var loaiNVLs = SQLServerServices.GetListLoaiNVLs(danhmucID);

        return loaiNVLs;
    }

    private async Task OnOpenDialogAddNewDanhmucNVL()
    {
        var newDanhMuc = await DialogService.OpenAsync<DialogThemDanhmuc>(null, null,
        new DialogOptions() { ShowTitle = false, Width = "contain", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "border-radius: 10px; padding: 0px" });

        danhMucNVLs = LoadListDanhmucNguyenVatLieu();
    }

    private async Task OnOpenDialogAddNewLoaiNVL()
    {
        if (SelectDanhmuc != null)
        {
            var newLoaiNVL = await DialogService.OpenAsync<DialogThemLoaiNVL>(null, new Dictionary<string, object>() { { "SelectDMucNVL", SelectDanhmuc ?? new() } },
            new DialogOptions() { ShowTitle = false, Width = "contain", Height = "contain", Resizable = false, Draggable = false, ShowClose = false, Style = "border-radius: 10px; padding: 0px" });

            LoaiNVLs = LoadListLoaiNguyenVatLieu(SelectDanhmuc);
        }
        else
        {
            ShowNotification("Hãy chọn danh mục!", NotificationSeverity.Warning, 2000);
        }
    }

    private async Task OnAddnewNVL()
    {
        bool? comfirm = await DialogService.Confirm("Thêm mới loại nguyên liệu này?", "Xác nhận", new ConfirmOptions() { OkButtonText = "OK", CancelButtonText = "Hủy", ShowClose = false });

        if (comfirm.Value)
        {
            // List<Propertyy>? nvlproperties = NewNVL.GetPropertiesValues();

            // var alowdispNVLproperties = nvlproperties.Where(nvl => nvl.AlowDisplay == true);

            (int result, string error) = SQLServerServices.InsertNewLoaiNguyenVatLieu(NewNVL);

            if (result > 0)
            {
                ShowNotification("Thêm nguyên liệu thành công!", NotificationSeverity.Success, 2000);

                DialogService.Close(NewNVL);
            }
            else
            {
                await DialogService.Alert($"{error}", "<strong><span style='color: red'>Error!</span></strong>", new AlertOptions() { OkButtonText = "OK", ShowClose = true });
            }
        }
    }

    private void OnCancelAddnewNVL()
    {
        DialogService.Close(null);
    }

    // Notification
    void ShowNotification(string message, NotificationSeverity notifytype, double time)
    {
        NotificationMessage notify = new NotificationMessage
            {
                Style = "position: fixed; top: 0; right: 0;",
                Severity = notifytype,
                Summary = message,
                Duration = time
            };

        NotificationService.Notify(notify);
    }
    // Tooltip
    void ShowToolTip(ElementReference elementReference, TooltipPosition position, string content)
    {
        TooltipOptions options = new TooltipOptions() { Position = position, Style = "background-color: var(--rz-primary-light); " };

        TooltipService.Open(elementReference, content, options);
    }
}
