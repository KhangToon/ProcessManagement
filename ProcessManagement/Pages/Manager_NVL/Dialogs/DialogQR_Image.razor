@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.Tracking
@using ProcessManagement.Services
@using ProcessManagement.Services.SQLServer
@using ProcessManagement.Services.QRCodes
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models;
@using ProcessManagement.Models.KHO_NVL.XuatKho

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices
@inject QRCodeServices QRCodeServices
@inject IJSRuntime JSRuntime

<RadzenCard Variant="Variant.Flat" Style="height: contain; width: contain; padding: 10px;">
    <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
        <RadzenStack Gap="20px" Style="height: contain; width: 100%; border-radius: 5px; background-color: var(--rz-secondary-lighter); padding: 5px; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenText Text="@($"{HEADER}")" Style="font-weight: 600; font-size: 16px; color: black;"></RadzenText>
            <RadzenStack Gap="10" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                <RadzenText Text="@($"{CONTENT?.ToString()}")" Style="font-weight: 600; font-size: 18px; color: darkgreen;"></RadzenText>
            </RadzenStack>
        </RadzenStack>
        <RadzenCard Variant="Variant.Flat" Style="width: 100%; height: contain; padding: 10px; margin-top: 10px; border-radius: 0">
            <RadzenStack Style="height: 100%; width: contain" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                @{
                    string qrBase64string = QRCodeServices.GenerateQRCode(CONTENT?.ToString() ?? string.Empty, 150);
                    <img style="border-radius: 10px;" src="@($"data:image/png;base64,{qrBase64string}")" alt="QR Code">
                }
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>

    <RadzenStack Gap="10px" Style="width: 100%; height: contain" Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenCard Variant="Variant.Outlined" Style="width: 100%; height: 80%">
            <div class="col-lg-8" align="center">
                <svg style="display:none" id="barcode"></svg>
            </div>
        </RadzenCard>
        <RadzenStack Style="width: 100%; height: 20%; padding: 5px;" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            <RadzenButton Click="@(async () => { await DownLoadBarcode(CONTENT?.ToString()?? string.Empty); })" Icon="download" Text="Tải" Style="font-size: 14px; border-radius: 5px; width: 50%;" Variant="Variant.Filled" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"></RadzenButton>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>


@code {
    [Parameter]
    public object? CONTENT { get; set; } = string.Empty;

    [Parameter]
    public object? HEADER { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GenerateBarcode(CONTENT?.ToString() ?? string.Empty);
        }
    }

    private async Task DownLoadBarcode(string code)
    {
        await JSRuntime.InvokeVoidAsync("downloadBarcode", code);
    }

    private async Task GenerateBarcode(string input)
    {
        await JSRuntime.InvokeVoidAsync("generateBarcode", input);
    }
}
