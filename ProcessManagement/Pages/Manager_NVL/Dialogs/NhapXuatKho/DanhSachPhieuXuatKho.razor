@using ProcessManagement.Commons
@using ProcessManagement.Models.KHO_NVL
@using ProcessManagement.Models.KHO_NVL.XuatKho
@using ProcessManagement.Services.SQLServer
@using Radzen.Blazor
@using Radzen
@using ProcessManagement.Models

@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService
@inject SQLServerServices SQLServerServices


<style>
    .pxkho_IsSelected {
        border-style: solid;
        border-width: 2px;
        border-color: green;
    }
</style>

<RadzenStack Style="height: contain; width: 100%; padding-bottom: 5px; padding-left: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
    <RadzenStack Style="height: 100%; width: 20%; border-radius: 10px; background-color: var(--rz-success-lighter); padding: 10px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenText Text="KẾ HOẠCH XUẤT KHO" Style="color: green; font-weight: 600; font-size: 18px"></RadzenText>
    </RadzenStack>
    <RadzenStack Gap="15px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%; width: 60%;">
        <RadzenTextBox @oninput="@((args) => GetFilterDSachKHXuatKho(args?.Value?.ToString()?? string.Empty))" Placeholder="Nhập mã phiếu xuất kho để tìm kiếm" Style="border-radius: 20px; padding-left: 20px; border-width: 2px; border-color: var(--rz-primary-light); width: 50% "></RadzenTextBox>
        <RadzenButton Icon="search" ButtonStyle="ButtonStyle.Primary" Style="border-radius: 20px;" />
        <RadzenButton Style="border-radius: 20px;" Icon="autorenew" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
</RadzenStack>
<RadzenRow Gap="10px" Style="height: 100%; width: 100%; border-top: var(--rz-grid-cell-border); padding: 0;">
    <RadzenColumn Size="12" SizeMD="3" Style="height: contain; width: 100%;">
        <RadzenStack Gap="0px" Style="height: contain; width: 100%;" Orientation="Orientation.Vertical" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Start">
            <RadzenStack Gap="10px" Style="height: contain; width: 100%; padding: 10px; padding-left: 10px; border-bottom: var(--rz-grid-cell-border) " Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenText Text="Danh sách phiếu xuất kho" Style="color: darkred; font-weight: 600; font-size: 17px; height: contain; width: contain; font-style: italic;"></RadzenText>
                <RadzenText Text="@($"( {DSPhieuXKs.Count} phiếu )")" Style="color: black; font-weight: 600; font-size: 16px; height: contain; width: contain; font-style: italic;"></RadzenText>
            </RadzenStack>
            <RadzenStack Gap="10px" Style="height: contain; width: 100%;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenDataList Style="height: contain; width: 100%;" PagerPosition="PagerPosition.Bottom" PageSize="3" WrapItems="true" AllowPaging="true" Data="@DSPhieuXKs" TItem="PhieuXuatKho">
                    <Template Context="pxk">
                        <RadzenCard Style="width: 100%; height: contain; padding: 0" Variant="Variant.Flat">
                            <RadzenCard class="@(IsPXKhoSelected(pxk))" Style="width: 100%; height: contain;" Variant="Variant.Filled">
                                <RadzenStack onclick="@(() => OnPhieuXuatKhoClick(pxk))" Style="width: 100%; height: 100%; padding: 0" Orientation=Orientation.Horizontal AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                    <RadzenCard Variant="@((pxk.PXKID.Value?.Equals(SelectedPXK.PXKID.Value)?? false)? Variant.Flat : Variant.Outlined)" Style="height: 100%; width: 100%; padding: 10px;">
                                        <RadzenStack Style="width: 100%; height: 100%;" Gap="10px" Orientation=Orientation.Vertical AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain; padding-bottom: 5px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                                <RadzenStack Style="height: contain; width: contain; min-width: 30px; border-radius: 5px; background-color: var(--rz-primary-lighter); padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@((DSPhieuXKs.IndexOf(pxk) + 1).ToString())" Style="color: rgba(58,71,77); font-weight: 600; font-size: 15px"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="height: contain; width: contain; border-radius: 5px; padding: 0px;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    @if ((int.TryParse(pxk.IsDonePXK.Value?.ToString(), out int pxkdone) ? pxkdone : 0) > 0)
                                                    {
                                                        <RadzenButton Text="Đã hoàn thành" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: 100%; cursor: default; background-color: rgb(229,245,233); font-weight: 600" />
                                                    }
                                                    else
                                                    {
                                                        <RadzenButton Text="Chưa hoàn thành" ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Shade="Shade.Dark" Variant="Variant.Outlined"
                                                                      Style="border-radius: 5px; --rz-icon-size: 18px; height: 20px; width: 100%; cursor: default; background-color: rgb(254,243,220); font-weight: 600" />
                                                    }
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Style="width: 40%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Mã phiếu: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@($"{pxk.MaPhieuXK.Value?.ToString()}")" Style="color: darkblue; font-weight: 700; font-size: 18px"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Style="width: 40%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Người lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@($"{pxk.NguoiLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                            <RadzenStack Gap="0" Style="width: 100%; height: contain;" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                <RadzenStack Style="width: 40%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                                                    <RadzenText Text="Ngày lập: " Style="font-size: 16px; font-weight: 500; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                                <RadzenStack Style="width: 60%; height: contain; padding-left: 10px; padding-right: 10px" Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
                                                    <RadzenText Text="@($"{pxk.NgayLapPXK.Value?.ToString()}")" Style="font-size: 16px; font-weight: 600; height: contain; color: rgba(58,71,77)"></RadzenText>
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                </RadzenStack>
                            </RadzenCard>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>
            </RadzenStack>
        </RadzenStack>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="9" Style="height: contain; width: 100%; padding: 10px; border-left: var(--rz-grid-cell-border)">
        <PhieuXuatKhoDetails PXK="SelectedPXK"></PhieuXuatKhoDetails>
    </RadzenColumn>
</RadzenRow>
@code {
    private List<PhieuXuatKho> DSPhieuXKs = new();
    private PhieuXuatKho SelectedPXK = new();
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDSachPhieuXuatKho();

        await base.OnInitializedAsync();
    }

    private async Task LoadDSachPhieuXuatKho()
    {
        await Task.Run(() =>
        {
            DSPhieuXKs = SQLServerServices.GetListPhieuXuatKho();
        });
    }

    private async Task GetFilterDSachKHXuatKho(string keyWord)
    {
        if (isSearching == false)
        {
            isSearching = true;

            await LoadDSachPhieuXuatKho();

            isSearching = false;
        }
    }


    private void OnPhieuXuatKhoClick(PhieuXuatKho selectPXK)
    {
        SelectedPXK = selectPXK;

        StateHasChanged();
    }

    private string IsPXKhoSelected(PhieuXuatKho selectPXK)
    {
        if (SelectedPXK.PXKID.Value != null && SelectedPXK.PXKID.Value.Equals(selectPXK.PXKID.Value))
        {
            return "pxkho_IsSelected";
        }
        else return string.Empty;
    }
}
